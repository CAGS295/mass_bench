<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="757.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="757.00"> </text><svg id="frames" x="10" width="1180"><g><title>[[heap]] (34 samples, 0.11%)</title><rect x="0.0000%" y="693" width="0.1053%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="703.50"></text></g><g><title>__sincos (39 samples, 0.12%)</title><rect x="0.2788%" y="677" width="0.1208%" height="15" fill="rgb(217,0,24)"/><text x="0.5288%" y="687.50"></text></g><g><title>main::main (54 samples, 0.17%)</title><rect x="0.4677%" y="677" width="0.1673%" height="15" fill="rgb(221,193,54)"/><text x="0.7177%" y="687.50"></text></g><g><title>mass_bench::input_pair (50 samples, 0.15%)</title><rect x="0.4801%" y="661" width="0.1549%" height="15" fill="rgb(248,212,6)"/><text x="0.7301%" y="671.50"></text></g><g><title>mass_bench::load_series (50 samples, 0.15%)</title><rect x="0.4801%" y="645" width="0.1549%" height="15" fill="rgb(208,68,35)"/><text x="0.7301%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (50 samples, 0.15%)</title><rect x="0.4801%" y="629" width="0.1549%" height="15" fill="rgb(232,128,0)"/><text x="0.7301%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (50 samples, 0.15%)</title><rect x="0.4801%" y="613" width="0.1549%" height="15" fill="rgb(207,160,47)"/><text x="0.7301%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (50 samples, 0.15%)</title><rect x="0.4801%" y="597" width="0.1549%" height="15" fill="rgb(228,23,34)"/><text x="0.7301%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (50 samples, 0.15%)</title><rect x="0.4801%" y="581" width="0.1549%" height="15" fill="rgb(218,30,26)"/><text x="0.7301%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (50 samples, 0.15%)</title><rect x="0.4801%" y="565" width="0.1549%" height="15" fill="rgb(220,122,19)"/><text x="0.7301%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (50 samples, 0.15%)</title><rect x="0.4801%" y="549" width="0.1549%" height="15" fill="rgb(250,228,42)"/><text x="0.7301%" y="559.50"></text></g><g><title>core::ptr::write (39 samples, 0.12%)</title><rect x="0.5142%" y="533" width="0.1208%" height="15" fill="rgb(240,193,28)"/><text x="0.7642%" y="543.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (61 samples, 0.19%)</title><rect x="0.8580%" y="485" width="0.1889%" height="15" fill="rgb(216,20,37)"/><text x="1.1080%" y="495.50"></text></g><g><title>core::slice::ascii::is_ascii (61 samples, 0.19%)</title><rect x="0.8580%" y="469" width="0.1889%" height="15" fill="rgb(206,188,39)"/><text x="1.1080%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (58 samples, 0.18%)</title><rect x="0.8672%" y="453" width="0.1796%" height="15" fill="rgb(217,207,13)"/><text x="1.1172%" y="463.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (74 samples, 0.23%)</title><rect x="0.8487%" y="501" width="0.2292%" height="15" fill="rgb(231,73,38)"/><text x="1.0987%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (40 samples, 0.12%)</title><rect x="1.6230%" y="149" width="0.1239%" height="15" fill="rgb(225,20,46)"/><text x="1.8730%" y="159.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (33 samples, 0.10%)</title><rect x="1.7469%" y="149" width="0.1022%" height="15" fill="rgb(210,31,41)"/><text x="1.9969%" y="159.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (187 samples, 0.58%)</title><rect x="1.3752%" y="165" width="0.5792%" height="15" fill="rgb(221,200,47)"/><text x="1.6252%" y="175.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (211 samples, 0.65%)</title><rect x="1.3721%" y="181" width="0.6535%" height="15" fill="rgb(226,26,5)"/><text x="1.6221%" y="191.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (212 samples, 0.66%)</title><rect x="1.3721%" y="197" width="0.6566%" height="15" fill="rgb(249,33,26)"/><text x="1.6221%" y="207.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (215 samples, 0.67%)</title><rect x="1.3659%" y="293" width="0.6659%" height="15" fill="rgb(235,183,28)"/><text x="1.6159%" y="303.50"></text></g><g><title>flate2::zio::read (215 samples, 0.67%)</title><rect x="1.3659%" y="277" width="0.6659%" height="15" fill="rgb(221,5,38)"/><text x="1.6159%" y="287.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (213 samples, 0.66%)</title><rect x="1.3721%" y="261" width="0.6597%" height="15" fill="rgb(247,18,42)"/><text x="1.6221%" y="271.50"></text></g><g><title>flate2::mem::Decompress::decompress (213 samples, 0.66%)</title><rect x="1.3721%" y="245" width="0.6597%" height="15" fill="rgb(241,131,45)"/><text x="1.6221%" y="255.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (213 samples, 0.66%)</title><rect x="1.3721%" y="229" width="0.6597%" height="15" fill="rgb(249,31,29)"/><text x="1.6221%" y="239.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (213 samples, 0.66%)</title><rect x="1.3721%" y="213" width="0.6597%" height="15" fill="rgb(225,111,53)"/><text x="1.6221%" y="223.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (225 samples, 0.70%)</title><rect x="1.3597%" y="469" width="0.6969%" height="15" fill="rgb(238,160,17)"/><text x="1.6097%" y="479.50"></text></g><g><title>&lt;tar::entry::Entry&lt;R&gt; as std::io::Read&gt;::read (223 samples, 0.69%)</title><rect x="1.3659%" y="453" width="0.6907%" height="15" fill="rgb(214,148,48)"/><text x="1.6159%" y="463.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read (223 samples, 0.69%)</title><rect x="1.3659%" y="437" width="0.6907%" height="15" fill="rgb(232,36,49)"/><text x="1.6159%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (223 samples, 0.69%)</title><rect x="1.3659%" y="421" width="0.6907%" height="15" fill="rgb(209,103,24)"/><text x="1.6159%" y="431.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read::{{closure}} (223 samples, 0.69%)</title><rect x="1.3659%" y="405" width="0.6907%" height="15" fill="rgb(229,88,8)"/><text x="1.6159%" y="415.50"></text></g><g><title>&lt;tar::entry::EntryIo as std::io::Read&gt;::read (223 samples, 0.69%)</title><rect x="1.3659%" y="389" width="0.6907%" height="15" fill="rgb(213,181,19)"/><text x="1.6159%" y="399.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (223 samples, 0.69%)</title><rect x="1.3659%" y="373" width="0.6907%" height="15" fill="rgb(254,191,54)"/><text x="1.6159%" y="383.50"></text></g><g><title>&lt;&amp;tar::archive::ArchiveInner&lt;R&gt; as std::io::Read&gt;::read (223 samples, 0.69%)</title><rect x="1.3659%" y="357" width="0.6907%" height="15" fill="rgb(241,83,37)"/><text x="1.6159%" y="367.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (223 samples, 0.69%)</title><rect x="1.3659%" y="341" width="0.6907%" height="15" fill="rgb(233,36,39)"/><text x="1.6159%" y="351.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (223 samples, 0.69%)</title><rect x="1.3659%" y="325" width="0.6907%" height="15" fill="rgb(226,3,54)"/><text x="1.6159%" y="335.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (223 samples, 0.69%)</title><rect x="1.3659%" y="309" width="0.6907%" height="15" fill="rgb(245,192,40)"/><text x="1.6159%" y="319.50"></text></g><g><title>csv_core::reader::Dfa::get_output (44 samples, 0.14%)</title><rect x="2.5801%" y="437" width="0.1363%" height="15" fill="rgb(238,167,29)"/><text x="2.8301%" y="447.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (279 samples, 0.86%)</title><rect x="2.2920%" y="453" width="0.8642%" height="15" fill="rgb(232,182,51)"/><text x="2.5420%" y="463.50"></text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (134 samples, 0.42%)</title><rect x="2.7411%" y="437" width="0.4150%" height="15" fill="rgb(231,60,39)"/><text x="2.9911%" y="447.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (774 samples, 2.40%)</title><rect x="0.7805%" y="533" width="2.3973%" height="15" fill="rgb(208,69,12)"/><text x="1.0305%" y="543.50">cs..</text></g><g><title>csv::string_record::StringRecord::read (773 samples, 2.39%)</title><rect x="0.7836%" y="517" width="2.3942%" height="15" fill="rgb(235,93,37)"/><text x="1.0336%" y="527.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (678 samples, 2.10%)</title><rect x="1.0779%" y="501" width="2.1000%" height="15" fill="rgb(213,116,39)"/><text x="1.3279%" y="511.50">c..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (651 samples, 2.02%)</title><rect x="1.1615%" y="485" width="2.0164%" height="15" fill="rgb(222,207,29)"/><text x="1.4115%" y="495.50">c..</text></g><g><title>csv_core::reader::Reader::read_record (298 samples, 0.92%)</title><rect x="2.2548%" y="469" width="0.9230%" height="15" fill="rgb(206,96,30)"/><text x="2.5048%" y="479.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (43 samples, 0.13%)</title><rect x="3.4442%" y="341" width="0.1332%" height="15" fill="rgb(218,138,4)"/><text x="3.6942%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (80 samples, 0.25%)</title><rect x="3.6022%" y="341" width="0.2478%" height="15" fill="rgb(250,191,14)"/><text x="3.8522%" y="351.50"></text></g><g><title>core::num::dec2flt::num::from_str_unchecked (37 samples, 0.11%)</title><rect x="3.8716%" y="341" width="0.1146%" height="15" fill="rgb(239,60,40)"/><text x="4.1216%" y="351.50"></text></g><g><title>core::num::dec2flt::algorithm::fast_path (200 samples, 0.62%)</title><rect x="3.3947%" y="357" width="0.6195%" height="15" fill="rgb(206,27,48)"/><text x="3.6447%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (33 samples, 0.10%)</title><rect x="4.0637%" y="341" width="0.1022%" height="15" fill="rgb(225,35,8)"/><text x="4.3137%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.10%)</title><rect x="4.0637%" y="325" width="0.1022%" height="15" fill="rgb(250,213,24)"/><text x="4.3137%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (33 samples, 0.10%)</title><rect x="4.0637%" y="309" width="0.1022%" height="15" fill="rgb(247,123,22)"/><text x="4.3137%" y="319.50"></text></g><g><title>core::num::dec2flt::simplify (55 samples, 0.17%)</title><rect x="4.0141%" y="357" width="0.1704%" height="15" fill="rgb(231,138,38)"/><text x="4.2641%" y="367.50"></text></g><g><title>core::num::dec2flt::convert (271 samples, 0.84%)</title><rect x="3.3761%" y="373" width="0.8394%" height="15" fill="rgb(231,145,46)"/><text x="3.6261%" y="383.50"></text></g><g><title>mass_bench::load_series (1,213 samples, 3.76%)</title><rect x="0.6473%" y="677" width="3.7570%" height="15" fill="rgb(251,118,11)"/><text x="0.8973%" y="687.50">mass..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,213 samples, 3.76%)</title><rect x="0.6473%" y="661" width="3.7570%" height="15" fill="rgb(217,147,25)"/><text x="0.8973%" y="671.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,213 samples, 3.76%)</title><rect x="0.6473%" y="645" width="3.7570%" height="15" fill="rgb(247,81,37)"/><text x="0.8973%" y="655.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,213 samples, 3.76%)</title><rect x="0.6473%" y="629" width="3.7570%" height="15" fill="rgb(209,12,38)"/><text x="0.8973%" y="639.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,213 samples, 3.76%)</title><rect x="0.6473%" y="613" width="3.7570%" height="15" fill="rgb(227,1,9)"/><text x="0.8973%" y="623.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,213 samples, 3.76%)</title><rect x="0.6473%" y="597" width="3.7570%" height="15" fill="rgb(248,47,43)"/><text x="0.8973%" y="607.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1,213 samples, 3.76%)</title><rect x="0.6473%" y="581" width="3.7570%" height="15" fill="rgb(221,10,30)"/><text x="0.8973%" y="591.50">allo..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,213 samples, 3.76%)</title><rect x="0.6473%" y="565" width="3.7570%" height="15" fill="rgb(210,229,1)"/><text x="0.8973%" y="575.50">&lt;cor..</text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,180 samples, 3.65%)</title><rect x="0.7496%" y="549" width="3.6548%" height="15" fill="rgb(222,148,37)"/><text x="0.9996%" y="559.50">&lt;csv..</text></g><g><title>csv::string_record::StringRecord::deserialize (396 samples, 1.23%)</title><rect x="3.1778%" y="533" width="1.2265%" height="15" fill="rgb(234,67,33)"/><text x="3.4278%" y="543.50"></text></g><g><title>csv::deserializer::deserialize_string_record (396 samples, 1.23%)</title><rect x="3.1778%" y="517" width="1.2265%" height="15" fill="rgb(247,98,35)"/><text x="3.4278%" y="527.50"></text></g><g><title>mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize (380 samples, 1.18%)</title><rect x="3.2274%" y="501" width="1.1770%" height="15" fill="rgb(247,138,52)"/><text x="3.4774%" y="511.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (380 samples, 1.18%)</title><rect x="3.2274%" y="485" width="1.1770%" height="15" fill="rgb(213,79,30)"/><text x="3.4774%" y="495.50"></text></g><g><title>&lt;mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize::__Visitor&lt;T&gt; as serde::de::Visitor&gt;::visit_newtype_struct (380 samples, 1.18%)</title><rect x="3.2274%" y="469" width="1.1770%" height="15" fill="rgb(246,177,23)"/><text x="3.4774%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (380 samples, 1.18%)</title><rect x="3.2274%" y="453" width="1.1770%" height="15" fill="rgb(230,62,27)"/><text x="3.4774%" y="463.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (380 samples, 1.18%)</title><rect x="3.2274%" y="437" width="1.1770%" height="15" fill="rgb(216,154,8)"/><text x="3.4774%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (341 samples, 1.06%)</title><rect x="3.3482%" y="421" width="1.0562%" height="15" fill="rgb(244,35,45)"/><text x="3.5982%" y="431.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::FromStr for f64&gt;::from_str (341 samples, 1.06%)</title><rect x="3.3482%" y="405" width="1.0562%" height="15" fill="rgb(251,115,12)"/><text x="3.5982%" y="415.50"></text></g><g><title>core::num::dec2flt::dec2flt (341 samples, 1.06%)</title><rect x="3.3482%" y="389" width="1.0562%" height="15" fill="rgb(240,54,50)"/><text x="3.5982%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_decimal (54 samples, 0.17%)</title><rect x="4.2371%" y="373" width="0.1673%" height="15" fill="rgb(233,84,52)"/><text x="4.4871%" y="383.50"></text></g><g><title>[unknown] (1,384 samples, 4.29%)</title><rect x="0.1796%" y="693" width="4.2867%" height="15" fill="rgb(207,117,47)"/><text x="0.4296%" y="703.50">[unkn..</text></g><g><title>do_user_addr_fault (63 samples, 0.20%)</title><rect x="4.6274%" y="277" width="0.1951%" height="15" fill="rgb(249,43,39)"/><text x="4.8774%" y="287.50"></text></g><g><title>handle_mm_fault (61 samples, 0.19%)</title><rect x="4.6336%" y="261" width="0.1889%" height="15" fill="rgb(209,38,44)"/><text x="4.8836%" y="271.50"></text></g><g><title>__handle_mm_fault (60 samples, 0.19%)</title><rect x="4.6367%" y="245" width="0.1858%" height="15" fill="rgb(236,212,23)"/><text x="4.8867%" y="255.50"></text></g><g><title>do_anonymous_page (50 samples, 0.15%)</title><rect x="4.6677%" y="229" width="0.1549%" height="15" fill="rgb(242,79,21)"/><text x="4.9177%" y="239.50"></text></g><g><title>page_fault (65 samples, 0.20%)</title><rect x="4.6274%" y="325" width="0.2013%" height="15" fill="rgb(211,96,35)"/><text x="4.8774%" y="335.50"></text></g><g><title>do_page_fault (65 samples, 0.20%)</title><rect x="4.6274%" y="309" width="0.2013%" height="15" fill="rgb(253,215,40)"/><text x="4.8774%" y="319.50"></text></g><g><title>__do_page_fault (65 samples, 0.20%)</title><rect x="4.6274%" y="293" width="0.2013%" height="15" fill="rgb(211,81,21)"/><text x="4.8774%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_with (142 samples, 0.44%)</title><rect x="4.5035%" y="357" width="0.4398%" height="15" fill="rgb(208,190,38)"/><text x="4.7535%" y="367.50"></text></g><g><title>core::ptr::write (142 samples, 0.44%)</title><rect x="4.5035%" y="341" width="0.4398%" height="15" fill="rgb(235,213,38)"/><text x="4.7535%" y="351.50"></text></g><g><title>alloc::vec::from_elem (146 samples, 0.45%)</title><rect x="4.5035%" y="389" width="0.4522%" height="15" fill="rgb(237,122,38)"/><text x="4.7535%" y="399.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (146 samples, 0.45%)</title><rect x="4.5035%" y="373" width="0.4522%" height="15" fill="rgb(244,218,35)"/><text x="4.7535%" y="383.50"></text></g><g><title>clear_page_erms (51 samples, 0.16%)</title><rect x="5.4234%" y="37" width="0.1580%" height="15" fill="rgb(240,68,47)"/><text x="5.6734%" y="47.50"></text></g><g><title>get_page_from_freelist (69 samples, 0.21%)</title><rect x="5.4234%" y="53" width="0.2137%" height="15" fill="rgb(210,16,53)"/><text x="5.6734%" y="63.50"></text></g><g><title>__alloc_pages_nodemask (77 samples, 0.24%)</title><rect x="5.4017%" y="69" width="0.2385%" height="15" fill="rgb(235,124,12)"/><text x="5.6517%" y="79.50"></text></g><g><title>alloc_pages_vma (82 samples, 0.25%)</title><rect x="5.3893%" y="85" width="0.2540%" height="15" fill="rgb(224,169,11)"/><text x="5.6393%" y="95.50"></text></g><g><title>do_anonymous_page (137 samples, 0.42%)</title><rect x="5.3491%" y="101" width="0.4243%" height="15" fill="rgb(250,166,2)"/><text x="5.5991%" y="111.50"></text></g><g><title>do_user_addr_fault (167 samples, 0.52%)</title><rect x="5.2592%" y="149" width="0.5173%" height="15" fill="rgb(242,216,29)"/><text x="5.5092%" y="159.50"></text></g><g><title>handle_mm_fault (160 samples, 0.50%)</title><rect x="5.2809%" y="133" width="0.4956%" height="15" fill="rgb(230,116,27)"/><text x="5.5309%" y="143.50"></text></g><g><title>__handle_mm_fault (148 samples, 0.46%)</title><rect x="5.3181%" y="117" width="0.4584%" height="15" fill="rgb(228,99,48)"/><text x="5.5681%" y="127.50"></text></g><g><title>page_fault (173 samples, 0.54%)</title><rect x="5.2500%" y="197" width="0.5358%" height="15" fill="rgb(253,11,6)"/><text x="5.5000%" y="207.50"></text></g><g><title>do_page_fault (171 samples, 0.53%)</title><rect x="5.2561%" y="181" width="0.5296%" height="15" fill="rgb(247,143,39)"/><text x="5.5061%" y="191.50"></text></g><g><title>__do_page_fault (171 samples, 0.53%)</title><rect x="5.2561%" y="165" width="0.5296%" height="15" fill="rgb(236,97,10)"/><text x="5.5061%" y="175.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (50 samples, 0.15%)</title><rect x="5.7858%" y="197" width="0.1549%" height="15" fill="rgb(233,208,19)"/><text x="6.0358%" y="207.50"></text></g><g><title>prepare_exit_to_usermode (50 samples, 0.15%)</title><rect x="5.7858%" y="181" width="0.1549%" height="15" fill="rgb(216,164,2)"/><text x="6.0358%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (292 samples, 0.90%)</title><rect x="5.0796%" y="245" width="0.9044%" height="15" fill="rgb(220,129,5)"/><text x="5.3296%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (292 samples, 0.90%)</title><rect x="5.0796%" y="229" width="0.9044%" height="15" fill="rgb(242,17,10)"/><text x="5.3296%" y="239.50"></text></g><g><title>core::ptr::write (292 samples, 0.90%)</title><rect x="5.0796%" y="213" width="0.9044%" height="15" fill="rgb(242,107,0)"/><text x="5.3296%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (343 samples, 1.06%)</title><rect x="4.9557%" y="389" width="1.0624%" height="15" fill="rgb(251,28,31)"/><text x="5.2057%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (343 samples, 1.06%)</title><rect x="4.9557%" y="373" width="1.0624%" height="15" fill="rgb(233,223,10)"/><text x="5.2057%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (343 samples, 1.06%)</title><rect x="4.9557%" y="357" width="1.0624%" height="15" fill="rgb(215,21,27)"/><text x="5.2057%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (343 samples, 1.06%)</title><rect x="4.9557%" y="341" width="1.0624%" height="15" fill="rgb(232,23,21)"/><text x="5.2057%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (343 samples, 1.06%)</title><rect x="4.9557%" y="325" width="1.0624%" height="15" fill="rgb(244,5,23)"/><text x="5.2057%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (323 samples, 1.00%)</title><rect x="5.0177%" y="309" width="1.0004%" height="15" fill="rgb(226,81,46)"/><text x="5.2677%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (323 samples, 1.00%)</title><rect x="5.0177%" y="293" width="1.0004%" height="15" fill="rgb(247,70,30)"/><text x="5.2677%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (323 samples, 1.00%)</title><rect x="5.0177%" y="277" width="1.0004%" height="15" fill="rgb(212,68,19)"/><text x="5.2677%" y="287.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (303 samples, 0.94%)</title><rect x="5.0796%" y="261" width="0.9385%" height="15" fill="rgb(240,187,13)"/><text x="5.3296%" y="271.50"></text></g><g><title>tlb_finish_mmu (36 samples, 0.11%)</title><rect x="6.0336%" y="101" width="0.1115%" height="15" fill="rgb(223,113,26)"/><text x="6.2836%" y="111.50"></text></g><g><title>tlb_flush_mmu (36 samples, 0.11%)</title><rect x="6.0336%" y="85" width="0.1115%" height="15" fill="rgb(206,192,2)"/><text x="6.2836%" y="95.50"></text></g><g><title>free_pages_and_swap_cache (36 samples, 0.11%)</title><rect x="6.0336%" y="69" width="0.1115%" height="15" fill="rgb(241,108,4)"/><text x="6.2836%" y="79.50"></text></g><g><title>release_pages (36 samples, 0.11%)</title><rect x="6.0336%" y="53" width="0.1115%" height="15" fill="rgb(247,173,49)"/><text x="6.2836%" y="63.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (72 samples, 0.22%)</title><rect x="6.0181%" y="357" width="0.2230%" height="15" fill="rgb(224,114,35)"/><text x="6.2681%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (72 samples, 0.22%)</title><rect x="6.0181%" y="341" width="0.2230%" height="15" fill="rgb(245,159,27)"/><text x="6.2681%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (72 samples, 0.22%)</title><rect x="6.0181%" y="325" width="0.2230%" height="15" fill="rgb(245,172,44)"/><text x="6.2681%" y="335.50"></text></g><g><title>__rdl_dealloc (72 samples, 0.22%)</title><rect x="6.0181%" y="309" width="0.2230%" height="15" fill="rgb(236,23,11)"/><text x="6.2681%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (72 samples, 0.22%)</title><rect x="6.0181%" y="293" width="0.2230%" height="15" fill="rgb(205,117,38)"/><text x="6.2681%" y="303.50"></text></g><g><title>_int_free (71 samples, 0.22%)</title><rect x="6.0212%" y="277" width="0.2199%" height="15" fill="rgb(237,72,25)"/><text x="6.2712%" y="287.50"></text></g><g><title>systrim (71 samples, 0.22%)</title><rect x="6.0212%" y="261" width="0.2199%" height="15" fill="rgb(244,70,9)"/><text x="6.2712%" y="271.50"></text></g><g><title>__GI___default_morecore (71 samples, 0.22%)</title><rect x="6.0212%" y="245" width="0.2199%" height="15" fill="rgb(217,125,39)"/><text x="6.2712%" y="255.50"></text></g><g><title>__GI___sbrk (71 samples, 0.22%)</title><rect x="6.0212%" y="229" width="0.2199%" height="15" fill="rgb(235,36,10)"/><text x="6.2712%" y="239.50"></text></g><g><title>__GI___sbrk (71 samples, 0.22%)</title><rect x="6.0212%" y="213" width="0.2199%" height="15" fill="rgb(251,123,47)"/><text x="6.2712%" y="223.50"></text></g><g><title>__brk (71 samples, 0.22%)</title><rect x="6.0212%" y="197" width="0.2199%" height="15" fill="rgb(221,13,13)"/><text x="6.2712%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (71 samples, 0.22%)</title><rect x="6.0212%" y="181" width="0.2199%" height="15" fill="rgb(238,131,9)"/><text x="6.2712%" y="191.50"></text></g><g><title>do_syscall_64 (71 samples, 0.22%)</title><rect x="6.0212%" y="165" width="0.2199%" height="15" fill="rgb(211,50,8)"/><text x="6.2712%" y="175.50"></text></g><g><title>__x64_sys_brk (71 samples, 0.22%)</title><rect x="6.0212%" y="149" width="0.2199%" height="15" fill="rgb(245,182,24)"/><text x="6.2712%" y="159.50"></text></g><g><title>__do_munmap (71 samples, 0.22%)</title><rect x="6.0212%" y="133" width="0.2199%" height="15" fill="rgb(242,14,37)"/><text x="6.2712%" y="143.50"></text></g><g><title>unmap_region (67 samples, 0.21%)</title><rect x="6.0336%" y="117" width="0.2075%" height="15" fill="rgb(246,228,12)"/><text x="6.2836%" y="127.50"></text></g><g><title>__do_munmap (37 samples, 0.11%)</title><rect x="6.2442%" y="53" width="0.1146%" height="15" fill="rgb(213,55,15)"/><text x="6.4942%" y="63.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (39 samples, 0.12%)</title><rect x="6.2411%" y="309" width="0.1208%" height="15" fill="rgb(209,9,3)"/><text x="6.4911%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (39 samples, 0.12%)</title><rect x="6.2411%" y="293" width="0.1208%" height="15" fill="rgb(230,59,30)"/><text x="6.4911%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (39 samples, 0.12%)</title><rect x="6.2411%" y="277" width="0.1208%" height="15" fill="rgb(209,121,21)"/><text x="6.4911%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (39 samples, 0.12%)</title><rect x="6.2411%" y="261" width="0.1208%" height="15" fill="rgb(220,109,13)"/><text x="6.4911%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (39 samples, 0.12%)</title><rect x="6.2411%" y="245" width="0.1208%" height="15" fill="rgb(232,18,1)"/><text x="6.4911%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (39 samples, 0.12%)</title><rect x="6.2411%" y="229" width="0.1208%" height="15" fill="rgb(215,41,42)"/><text x="6.4911%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (38 samples, 0.12%)</title><rect x="6.2442%" y="213" width="0.1177%" height="15" fill="rgb(224,123,36)"/><text x="6.4942%" y="223.50"></text></g><g><title>_int_free (38 samples, 0.12%)</title><rect x="6.2442%" y="197" width="0.1177%" height="15" fill="rgb(240,125,3)"/><text x="6.4942%" y="207.50"></text></g><g><title>systrim (38 samples, 0.12%)</title><rect x="6.2442%" y="181" width="0.1177%" height="15" fill="rgb(205,98,50)"/><text x="6.4942%" y="191.50"></text></g><g><title>__GI___default_morecore (38 samples, 0.12%)</title><rect x="6.2442%" y="165" width="0.1177%" height="15" fill="rgb(205,185,37)"/><text x="6.4942%" y="175.50"></text></g><g><title>__GI___sbrk (38 samples, 0.12%)</title><rect x="6.2442%" y="149" width="0.1177%" height="15" fill="rgb(238,207,15)"/><text x="6.4942%" y="159.50"></text></g><g><title>__GI___sbrk (38 samples, 0.12%)</title><rect x="6.2442%" y="133" width="0.1177%" height="15" fill="rgb(213,199,42)"/><text x="6.4942%" y="143.50"></text></g><g><title>__brk (38 samples, 0.12%)</title><rect x="6.2442%" y="117" width="0.1177%" height="15" fill="rgb(235,201,11)"/><text x="6.4942%" y="127.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (38 samples, 0.12%)</title><rect x="6.2442%" y="101" width="0.1177%" height="15" fill="rgb(207,46,11)"/><text x="6.4942%" y="111.50"></text></g><g><title>do_syscall_64 (38 samples, 0.12%)</title><rect x="6.2442%" y="85" width="0.1177%" height="15" fill="rgb(241,35,35)"/><text x="6.4942%" y="95.50"></text></g><g><title>__x64_sys_brk (38 samples, 0.12%)</title><rect x="6.2442%" y="69" width="0.1177%" height="15" fill="rgb(243,32,47)"/><text x="6.4942%" y="79.50"></text></g><g><title>core::ptr::drop_in_place (112 samples, 0.35%)</title><rect x="6.0181%" y="389" width="0.3469%" height="15" fill="rgb(247,202,23)"/><text x="6.2681%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (112 samples, 0.35%)</title><rect x="6.0181%" y="373" width="0.3469%" height="15" fill="rgb(219,102,11)"/><text x="6.2681%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.12%)</title><rect x="6.2411%" y="357" width="0.1239%" height="15" fill="rgb(243,110,44)"/><text x="6.4911%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (40 samples, 0.12%)</title><rect x="6.2411%" y="341" width="0.1239%" height="15" fill="rgb(222,74,54)"/><text x="6.4911%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (40 samples, 0.12%)</title><rect x="6.2411%" y="325" width="0.1239%" height="15" fill="rgb(216,99,12)"/><text x="6.4911%" y="335.50"></text></g><g><title>mass::math::dist (47 samples, 0.15%)</title><rect x="6.3650%" y="389" width="0.1456%" height="15" fill="rgb(226,22,26)"/><text x="6.6150%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (47 samples, 0.15%)</title><rect x="6.3650%" y="373" width="0.1456%" height="15" fill="rgb(217,163,10)"/><text x="6.6150%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (47 samples, 0.15%)</title><rect x="6.3650%" y="357" width="0.1456%" height="15" fill="rgb(213,25,53)"/><text x="6.6150%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (47 samples, 0.15%)</title><rect x="6.3650%" y="341" width="0.1456%" height="15" fill="rgb(252,105,26)"/><text x="6.6150%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (47 samples, 0.15%)</title><rect x="6.3650%" y="325" width="0.1456%" height="15" fill="rgb(220,39,43)"/><text x="6.6150%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (47 samples, 0.15%)</title><rect x="6.3650%" y="309" width="0.1456%" height="15" fill="rgb(229,68,48)"/><text x="6.6150%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (47 samples, 0.15%)</title><rect x="6.3650%" y="293" width="0.1456%" height="15" fill="rgb(252,8,32)"/><text x="6.6150%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.15%)</title><rect x="6.3650%" y="277" width="0.1456%" height="15" fill="rgb(223,20,43)"/><text x="6.6150%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (47 samples, 0.15%)</title><rect x="6.3650%" y="261" width="0.1456%" height="15" fill="rgb(229,81,49)"/><text x="6.6150%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (47 samples, 0.15%)</title><rect x="6.3650%" y="245" width="0.1456%" height="15" fill="rgb(236,28,36)"/><text x="6.6150%" y="255.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (47 samples, 0.15%)</title><rect x="6.3650%" y="229" width="0.1456%" height="15" fill="rgb(249,185,26)"/><text x="6.6150%" y="239.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (47 samples, 0.15%)</title><rect x="6.3650%" y="213" width="0.1456%" height="15" fill="rgb(249,174,33)"/><text x="6.6150%" y="223.50"></text></g><g><title>mass::math::dist::{{closure}} (46 samples, 0.14%)</title><rect x="6.3681%" y="197" width="0.1425%" height="15" fill="rgb(233,201,37)"/><text x="6.6181%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (51 samples, 0.16%)</title><rect x="6.5106%" y="373" width="0.1580%" height="15" fill="rgb(221,78,26)"/><text x="6.7606%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (51 samples, 0.16%)</title><rect x="6.5106%" y="357" width="0.1580%" height="15" fill="rgb(250,127,30)"/><text x="6.7606%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (38 samples, 0.12%)</title><rect x="6.5508%" y="341" width="0.1177%" height="15" fill="rgb(230,49,44)"/><text x="6.8008%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (38 samples, 0.12%)</title><rect x="6.5508%" y="325" width="0.1177%" height="15" fill="rgb(229,67,23)"/><text x="6.8008%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (38 samples, 0.12%)</title><rect x="6.5508%" y="309" width="0.1177%" height="15" fill="rgb(249,83,47)"/><text x="6.8008%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (38 samples, 0.12%)</title><rect x="6.5508%" y="293" width="0.1177%" height="15" fill="rgb(215,43,3)"/><text x="6.8008%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (38 samples, 0.12%)</title><rect x="6.5508%" y="277" width="0.1177%" height="15" fill="rgb(238,154,13)"/><text x="6.8008%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (38 samples, 0.12%)</title><rect x="6.5508%" y="261" width="0.1177%" height="15" fill="rgb(219,56,2)"/><text x="6.8008%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (38 samples, 0.12%)</title><rect x="6.5508%" y="245" width="0.1177%" height="15" fill="rgb(233,0,4)"/><text x="6.8008%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (38 samples, 0.12%)</title><rect x="6.5508%" y="229" width="0.1177%" height="15" fill="rgb(235,30,7)"/><text x="6.8008%" y="239.50"></text></g><g><title>core::ptr::write (38 samples, 0.12%)</title><rect x="6.5508%" y="213" width="0.1177%" height="15" fill="rgb(250,79,13)"/><text x="6.8008%" y="223.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.14%)</title><rect x="6.6716%" y="245" width="0.1394%" height="15" fill="rgb(211,146,34)"/><text x="6.9216%" y="255.50"></text></g><g><title>core::ptr::read (44 samples, 0.14%)</title><rect x="6.6747%" y="229" width="0.1363%" height="15" fill="rgb(228,22,38)"/><text x="6.9247%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (44 samples, 0.14%)</title><rect x="6.6747%" y="213" width="0.1363%" height="15" fill="rgb(235,168,5)"/><text x="6.9247%" y="223.50"></text></g><g><title>mass::stats::append (106 samples, 0.33%)</title><rect x="6.5106%" y="389" width="0.3283%" height="15" fill="rgb(221,155,16)"/><text x="6.7606%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (55 samples, 0.17%)</title><rect x="6.6685%" y="373" width="0.1704%" height="15" fill="rgb(215,215,53)"/><text x="6.9185%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (55 samples, 0.17%)</title><rect x="6.6685%" y="357" width="0.1704%" height="15" fill="rgb(223,4,10)"/><text x="6.9185%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (55 samples, 0.17%)</title><rect x="6.6685%" y="341" width="0.1704%" height="15" fill="rgb(234,103,6)"/><text x="6.9185%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (55 samples, 0.17%)</title><rect x="6.6685%" y="325" width="0.1704%" height="15" fill="rgb(227,97,0)"/><text x="6.9185%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (55 samples, 0.17%)</title><rect x="6.6685%" y="309" width="0.1704%" height="15" fill="rgb(234,150,53)"/><text x="6.9185%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (54 samples, 0.17%)</title><rect x="6.6716%" y="293" width="0.1673%" height="15" fill="rgb(228,201,54)"/><text x="6.9216%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (54 samples, 0.17%)</title><rect x="6.6716%" y="277" width="0.1673%" height="15" fill="rgb(222,22,37)"/><text x="6.9216%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (54 samples, 0.17%)</title><rect x="6.6716%" y="261" width="0.1673%" height="15" fill="rgb(237,53,32)"/><text x="6.9216%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.14%)</title><rect x="7.0774%" y="181" width="0.1425%" height="15" fill="rgb(233,25,53)"/><text x="7.3274%" y="191.50"></text></g><g><title>mass::stats::moving_avg (8,275 samples, 25.63%)</title><rect x="6.8389%" y="389" width="25.6303%" height="15" fill="rgb(210,40,34)"/><text x="7.0889%" y="399.50">mass::stats::moving_avg</text></g><g><title>core::iter::traits::iterator::Iterator::collect (8,275 samples, 25.63%)</title><rect x="6.8389%" y="373" width="25.6303%" height="15" fill="rgb(241,220,44)"/><text x="7.0889%" y="383.50">core::iter::traits::iterator::Iterator::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8,275 samples, 25.63%)</title><rect x="6.8389%" y="357" width="25.6303%" height="15" fill="rgb(235,28,35)"/><text x="7.0889%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8,275 samples, 25.63%)</title><rect x="6.8389%" y="341" width="25.6303%" height="15" fill="rgb(210,56,17)"/><text x="7.0889%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8,275 samples, 25.63%)</title><rect x="6.8389%" y="325" width="25.6303%" height="15" fill="rgb(224,130,29)"/><text x="7.0889%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8,275 samples, 25.63%)</title><rect x="6.8389%" y="309" width="25.6303%" height="15" fill="rgb(235,212,8)"/><text x="7.0889%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecEx..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,275 samples, 25.63%)</title><rect x="6.8389%" y="293" width="25.6303%" height="15" fill="rgb(223,33,50)"/><text x="7.0889%" y="303.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,275 samples, 25.63%)</title><rect x="6.8389%" y="277" width="25.6303%" height="15" fill="rgb(219,149,13)"/><text x="7.0889%" y="287.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,275 samples, 25.63%)</title><rect x="6.8389%" y="261" width="25.6303%" height="15" fill="rgb(250,156,29)"/><text x="7.0889%" y="271.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8,267 samples, 25.61%)</title><rect x="6.8637%" y="245" width="25.6055%" height="15" fill="rgb(216,193,19)"/><text x="7.1137%" y="255.50">core::iter::adapters::map_fold::{{closure..</text></g><g><title>mass::stats::moving_avg::{{closure}} (8,261 samples, 25.59%)</title><rect x="6.8822%" y="229" width="25.5869%" height="15" fill="rgb(216,135,14)"/><text x="7.1322%" y="239.50">mass::stats::moving_avg::{{closure}}</text></g><g><title>mass::stats::mean (8,261 samples, 25.59%)</title><rect x="6.8822%" y="213" width="25.5869%" height="15" fill="rgb(241,47,5)"/><text x="7.1322%" y="223.50">mass::stats::mean</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,198 samples, 25.39%)</title><rect x="7.0774%" y="197" width="25.3918%" height="15" fill="rgb(233,42,35)"/><text x="7.3274%" y="207.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>mass::stats::mean::{{closure}} (8,152 samples, 25.25%)</title><rect x="7.2198%" y="181" width="25.2493%" height="15" fill="rgb(231,13,6)"/><text x="7.4698%" y="191.50">mass::stats::mean::{{closure}}</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.11%)</title><rect x="33.9001%" y="149" width="0.1146%" height="15" fill="rgb(207,181,40)"/><text x="34.1501%" y="159.50"></text></g><g><title>mass::stats::e_x2::{{closure}} (7,955 samples, 24.64%)</title><rect x="34.0302%" y="149" width="24.6392%" height="15" fill="rgb(254,173,49)"/><text x="34.2802%" y="159.50">mass::stats::e_x2::{{closure}}</text></g><g><title>mass::stats::e_x2 (8,382 samples, 25.96%)</title><rect x="32.7232%" y="181" width="25.9617%" height="15" fill="rgb(221,1,38)"/><text x="32.9732%" y="191.50">mass::stats::e_x2</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,298 samples, 25.70%)</title><rect x="32.9833%" y="165" width="25.7015%" height="15" fill="rgb(206,124,46)"/><text x="33.2333%" y="175.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.15%)</title><rect x="58.6849%" y="149" width="0.1456%" height="15" fill="rgb(249,21,11)"/><text x="58.9349%" y="159.50"></text></g><g><title>mass::stats::var (16,689 samples, 51.69%)</title><rect x="32.5311%" y="197" width="51.6911%" height="15" fill="rgb(222,201,40)"/><text x="32.7811%" y="207.50">mass::stats::var</text></g><g><title>mass::stats::mean (8,245 samples, 25.54%)</title><rect x="58.6849%" y="181" width="25.5374%" height="15" fill="rgb(235,61,29)"/><text x="58.9349%" y="191.50">mass::stats::mean</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,245 samples, 25.54%)</title><rect x="58.6849%" y="165" width="25.5374%" height="15" fill="rgb(219,207,3)"/><text x="58.9349%" y="175.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>mass::stats::mean::{{closure}} (8,198 samples, 25.39%)</title><rect x="58.8305%" y="149" width="25.3918%" height="15" fill="rgb(222,56,46)"/><text x="59.0805%" y="159.50">mass::stats::mean::{{closure}}</text></g><g><title>mass::stats::moving_std (16,816 samples, 52.08%)</title><rect x="32.4692%" y="389" width="52.0845%" height="15" fill="rgb(239,76,54)"/><text x="32.7192%" y="399.50">mass::stats::moving_std</text></g><g><title>core::iter::traits::iterator::Iterator::collect (16,816 samples, 52.08%)</title><rect x="32.4692%" y="373" width="52.0845%" height="15" fill="rgb(231,124,27)"/><text x="32.7192%" y="383.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16,816 samples, 52.08%)</title><rect x="32.4692%" y="357" width="52.0845%" height="15" fill="rgb(249,195,6)"/><text x="32.7192%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16,816 samples, 52.08%)</title><rect x="32.4692%" y="341" width="52.0845%" height="15" fill="rgb(237,174,47)"/><text x="32.7192%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16,816 samples, 52.08%)</title><rect x="32.4692%" y="325" width="52.0845%" height="15" fill="rgb(206,201,31)"/><text x="32.7192%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16,816 samples, 52.08%)</title><rect x="32.4692%" y="309" width="52.0845%" height="15" fill="rgb(231,57,52)"/><text x="32.7192%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16,816 samples, 52.08%)</title><rect x="32.4692%" y="293" width="52.0845%" height="15" fill="rgb(248,177,22)"/><text x="32.7192%" y="303.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,816 samples, 52.08%)</title><rect x="32.4692%" y="277" width="52.0845%" height="15" fill="rgb(215,211,37)"/><text x="32.7192%" y="287.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (16,816 samples, 52.08%)</title><rect x="32.4692%" y="261" width="52.0845%" height="15" fill="rgb(241,128,51)"/><text x="32.7192%" y="271.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (16,801 samples, 52.04%)</title><rect x="32.5156%" y="245" width="52.0380%" height="15" fill="rgb(227,165,31)"/><text x="32.7656%" y="255.50">core::iter::adapters::map_fold::{{closure}}</text></g><g><title>mass::stats::moving_std::{{closure}} (16,796 samples, 52.02%)</title><rect x="32.5311%" y="229" width="52.0225%" height="15" fill="rgb(228,167,24)"/><text x="32.7811%" y="239.50">mass::stats::moving_std::{{closure}}</text></g><g><title>mass::stats::std (16,796 samples, 52.02%)</title><rect x="32.5311%" y="213" width="52.0225%" height="15" fill="rgb(228,143,12)"/><text x="32.7811%" y="223.50">mass::stats::std</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (107 samples, 0.33%)</title><rect x="84.2223%" y="197" width="0.3314%" height="15" fill="rgb(249,149,8)"/><text x="84.4723%" y="207.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (53 samples, 0.16%)</title><rect x="85.0709%" y="325" width="0.1642%" height="15" fill="rgb(243,35,44)"/><text x="85.3209%" y="335.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (40 samples, 0.12%)</title><rect x="85.1112%" y="309" width="0.1239%" height="15" fill="rgb(246,89,9)"/><text x="85.3612%" y="319.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (94 samples, 0.29%)</title><rect x="85.0709%" y="341" width="0.2911%" height="15" fill="rgb(233,213,13)"/><text x="85.3209%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (41 samples, 0.13%)</title><rect x="85.2351%" y="325" width="0.1270%" height="15" fill="rgb(233,141,41)"/><text x="85.4851%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (41 samples, 0.13%)</title><rect x="85.2351%" y="309" width="0.1270%" height="15" fill="rgb(239,167,4)"/><text x="85.4851%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (41 samples, 0.13%)</title><rect x="85.2351%" y="293" width="0.1270%" height="15" fill="rgb(209,217,16)"/><text x="85.4851%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (57 samples, 0.18%)</title><rect x="86.4059%" y="309" width="0.1765%" height="15" fill="rgb(219,88,35)"/><text x="86.6559%" y="319.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::sum (57 samples, 0.18%)</title><rect x="86.4059%" y="293" width="0.1765%" height="15" fill="rgb(220,193,23)"/><text x="86.6559%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (57 samples, 0.18%)</title><rect x="86.4059%" y="277" width="0.1765%" height="15" fill="rgb(230,90,52)"/><text x="86.6559%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::sum::{{closure}} (55 samples, 0.17%)</title><rect x="86.4121%" y="261" width="0.1704%" height="15" fill="rgb(252,106,19)"/><text x="86.6621%" y="271.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::add (55 samples, 0.17%)</title><rect x="86.4121%" y="245" width="0.1704%" height="15" fill="rgb(206,74,20)"/><text x="86.6621%" y="255.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (55 samples, 0.17%)</title><rect x="86.4121%" y="229" width="0.1704%" height="15" fill="rgb(230,138,44)"/><text x="86.6621%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (55 samples, 0.17%)</title><rect x="86.4121%" y="213" width="0.1704%" height="15" fill="rgb(235,182,43)"/><text x="86.6621%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (38 samples, 0.12%)</title><rect x="86.9417%" y="293" width="0.1177%" height="15" fill="rgb(242,16,51)"/><text x="87.1917%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (38 samples, 0.12%)</title><rect x="86.9417%" y="277" width="0.1177%" height="15" fill="rgb(248,9,4)"/><text x="87.1917%" y="287.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (49 samples, 0.15%)</title><rect x="87.1214%" y="261" width="0.1518%" height="15" fill="rgb(210,31,22)"/><text x="87.3714%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (82 samples, 0.25%)</title><rect x="87.0594%" y="293" width="0.2540%" height="15" fill="rgb(239,54,39)"/><text x="87.3094%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (77 samples, 0.24%)</title><rect x="87.0749%" y="277" width="0.2385%" height="15" fill="rgb(230,99,41)"/><text x="87.3249%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (72 samples, 0.22%)</title><rect x="87.5240%" y="261" width="0.2230%" height="15" fill="rgb(253,106,12)"/><text x="87.7740%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (41 samples, 0.13%)</title><rect x="87.6200%" y="245" width="0.1270%" height="15" fill="rgb(213,46,41)"/><text x="87.8700%" y="255.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (51 samples, 0.16%)</title><rect x="87.7470%" y="229" width="0.1580%" height="15" fill="rgb(215,133,35)"/><text x="87.9970%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (51 samples, 0.16%)</title><rect x="87.7470%" y="213" width="0.1580%" height="15" fill="rgb(213,28,5)"/><text x="87.9970%" y="223.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (46 samples, 0.14%)</title><rect x="87.9329%" y="229" width="0.1425%" height="15" fill="rgb(215,77,49)"/><text x="88.1829%" y="239.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (44 samples, 0.14%)</title><rect x="88.0753%" y="213" width="0.1363%" height="15" fill="rgb(248,100,22)"/><text x="88.3253%" y="223.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (44 samples, 0.14%)</title><rect x="88.0753%" y="197" width="0.1363%" height="15" fill="rgb(208,67,9)"/><text x="88.3253%" y="207.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (170 samples, 0.53%)</title><rect x="87.7470%" y="245" width="0.5265%" height="15" fill="rgb(219,133,21)"/><text x="87.9970%" y="255.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly2 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (64 samples, 0.20%)</title><rect x="88.0753%" y="229" width="0.1982%" height="15" fill="rgb(246,46,29)"/><text x="88.3253%" y="239.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (344 samples, 1.07%)</title><rect x="87.3134%" y="293" width="1.0655%" height="15" fill="rgb(246,185,52)"/><text x="87.5634%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (337 samples, 1.04%)</title><rect x="87.3351%" y="277" width="1.0438%" height="15" fill="rgb(252,136,11)"/><text x="87.5851%" y="287.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (204 samples, 0.63%)</title><rect x="87.7470%" y="261" width="0.6319%" height="15" fill="rgb(219,138,53)"/><text x="87.9970%" y="271.50"></text></g><g><title>rustfft::algorithm::butterflies::Butterfly2::perform_fft_direct (34 samples, 0.11%)</title><rect x="88.2736%" y="245" width="0.1053%" height="15" fill="rgb(211,51,23)"/><text x="88.5236%" y="255.50"></text></g><g><title>rustfft::algorithm::good_thomas_algorithm::GoodThomasAlgorithmDoubleButterfly&lt;T&gt;::perform_fft (641 samples, 1.99%)</title><rect x="86.6134%" y="309" width="1.9854%" height="15" fill="rgb(247,221,28)"/><text x="86.8634%" y="319.50">r..</text></g><g><title>rustfft::array_utils::transpose_small (71 samples, 0.22%)</title><rect x="88.3789%" y="293" width="0.2199%" height="15" fill="rgb(251,222,45)"/><text x="88.6289%" y="303.50"></text></g><g><title>rustfft::algorithm::raders_algorithm::RadersAlgorithm&lt;T&gt;::perform_fft (1,224 samples, 3.79%)</title><rect x="85.3745%" y="325" width="3.7911%" height="15" fill="rgb(217,162,53)"/><text x="85.6245%" y="335.50">rust..</text></g><g><title>strength_reduce::&lt;impl core::ops::arith::Rem&lt;strength_reduce::StrengthReducedUsize&gt; for usize&gt;::rem (183 samples, 0.57%)</title><rect x="88.5988%" y="309" width="0.5668%" height="15" fill="rgb(229,93,14)"/><text x="88.8488%" y="319.50"></text></g><g><title>strength_reduce::&lt;impl core::ops::arith::Div&lt;strength_reduce::StrengthReducedUsize&gt; for usize&gt;::div (90 samples, 0.28%)</title><rect x="88.8868%" y="293" width="0.2788%" height="15" fill="rgb(209,67,49)"/><text x="89.1368%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::raders_algorithm::RadersAlgorithm&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (1,233 samples, 3.82%)</title><rect x="85.3621%" y="341" width="3.8190%" height="15" fill="rgb(213,87,29)"/><text x="85.6121%" y="351.50">&lt;rus..</text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt;::perform_fft (1,518 samples, 4.70%)</title><rect x="84.8355%" y="357" width="4.7017%" height="15" fill="rgb(205,151,52)"/><text x="85.0855%" y="367.50">rustf..</text></g><g><title>transpose::out_of_place::transpose (115 samples, 0.36%)</title><rect x="89.1811%" y="341" width="0.3562%" height="15" fill="rgb(253,215,39)"/><text x="89.4311%" y="351.50"></text></g><g><title>transpose::out_of_place::transpose_block (105 samples, 0.33%)</title><rect x="89.2120%" y="325" width="0.3252%" height="15" fill="rgb(221,220,41)"/><text x="89.4620%" y="335.50"></text></g><g><title>&lt;rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (1,534 samples, 4.75%)</title><rect x="84.8324%" y="373" width="4.7513%" height="15" fill="rgb(218,133,21)"/><text x="85.0824%" y="383.50">&lt;rustf..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (70 samples, 0.22%)</title><rect x="90.5315%" y="341" width="0.2168%" height="15" fill="rgb(221,193,43)"/><text x="90.7815%" y="351.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::sum (70 samples, 0.22%)</title><rect x="90.5315%" y="325" width="0.2168%" height="15" fill="rgb(240,128,52)"/><text x="90.7815%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (70 samples, 0.22%)</title><rect x="90.5315%" y="309" width="0.2168%" height="15" fill="rgb(253,114,12)"/><text x="90.7815%" y="319.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::sum::{{closure}} (69 samples, 0.21%)</title><rect x="90.5346%" y="293" width="0.2137%" height="15" fill="rgb(215,223,47)"/><text x="90.7846%" y="303.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::add (69 samples, 0.21%)</title><rect x="90.5346%" y="277" width="0.2137%" height="15" fill="rgb(248,225,23)"/><text x="90.7846%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (69 samples, 0.21%)</title><rect x="90.5346%" y="261" width="0.2137%" height="15" fill="rgb(250,108,0)"/><text x="90.7846%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (69 samples, 0.21%)</title><rect x="90.5346%" y="245" width="0.2137%" height="15" fill="rgb(228,208,7)"/><text x="90.7846%" y="255.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (39 samples, 0.12%)</title><rect x="91.0518%" y="325" width="0.1208%" height="15" fill="rgb(244,45,10)"/><text x="91.3018%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (35 samples, 0.11%)</title><rect x="91.3895%" y="261" width="0.1084%" height="15" fill="rgb(207,125,25)"/><text x="91.6395%" y="271.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (72 samples, 0.22%)</title><rect x="91.3895%" y="277" width="0.2230%" height="15" fill="rgb(210,195,18)"/><text x="91.6395%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (37 samples, 0.11%)</title><rect x="91.4979%" y="261" width="0.1146%" height="15" fill="rgb(249,80,12)"/><text x="91.7479%" y="271.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (48 samples, 0.15%)</title><rect x="91.6156%" y="245" width="0.1487%" height="15" fill="rgb(221,65,9)"/><text x="91.8656%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (48 samples, 0.15%)</title><rect x="91.6156%" y="229" width="0.1487%" height="15" fill="rgb(235,49,36)"/><text x="91.8656%" y="239.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (46 samples, 0.14%)</title><rect x="91.7890%" y="245" width="0.1425%" height="15" fill="rgb(225,32,20)"/><text x="92.0390%" y="255.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (44 samples, 0.14%)</title><rect x="91.9315%" y="229" width="0.1363%" height="15" fill="rgb(215,141,46)"/><text x="92.1815%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (44 samples, 0.14%)</title><rect x="91.9315%" y="213" width="0.1363%" height="15" fill="rgb(250,160,47)"/><text x="92.1815%" y="223.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (166 samples, 0.51%)</title><rect x="91.6125%" y="261" width="0.5142%" height="15" fill="rgb(216,222,40)"/><text x="91.8625%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly2 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (63 samples, 0.20%)</title><rect x="91.9315%" y="245" width="0.1951%" height="15" fill="rgb(234,217,39)"/><text x="92.1815%" y="255.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (354 samples, 1.10%)</title><rect x="91.1726%" y="309" width="1.0965%" height="15" fill="rgb(207,178,40)"/><text x="91.4226%" y="319.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (345 samples, 1.07%)</title><rect x="91.2005%" y="293" width="1.0686%" height="15" fill="rgb(221,136,13)"/><text x="91.4505%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (212 samples, 0.66%)</title><rect x="91.6125%" y="277" width="0.6566%" height="15" fill="rgb(249,199,10)"/><text x="91.8625%" y="287.50"></text></g><g><title>rustfft::algorithm::butterflies::Butterfly2::perform_fft_direct (46 samples, 0.14%)</title><rect x="92.1266%" y="261" width="0.1425%" height="15" fill="rgb(249,222,13)"/><text x="92.3766%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (63 samples, 0.20%)</title><rect x="92.2691%" y="309" width="0.1951%" height="15" fill="rgb(244,185,38)"/><text x="92.5191%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.20%)</title><rect x="92.2691%" y="293" width="0.1951%" height="15" fill="rgb(236,202,9)"/><text x="92.5191%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (63 samples, 0.20%)</title><rect x="92.2691%" y="277" width="0.1951%" height="15" fill="rgb(250,229,37)"/><text x="92.5191%" y="287.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (418 samples, 1.29%)</title><rect x="91.1726%" y="325" width="1.2947%" height="15" fill="rgb(206,174,23)"/><text x="91.4226%" y="335.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (94 samples, 0.29%)</title><rect x="92.9629%" y="293" width="0.2911%" height="15" fill="rgb(211,33,43)"/><text x="93.2129%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (78 samples, 0.24%)</title><rect x="93.0125%" y="277" width="0.2416%" height="15" fill="rgb(245,58,50)"/><text x="93.2625%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (42 samples, 0.13%)</title><rect x="93.4306%" y="245" width="0.1301%" height="15" fill="rgb(244,68,36)"/><text x="93.6806%" y="255.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (86 samples, 0.27%)</title><rect x="93.3532%" y="261" width="0.2664%" height="15" fill="rgb(232,229,15)"/><text x="93.6032%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (140 samples, 0.43%)</title><rect x="93.2540%" y="293" width="0.4336%" height="15" fill="rgb(254,30,23)"/><text x="93.5040%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (129 samples, 0.40%)</title><rect x="93.2881%" y="277" width="0.3996%" height="15" fill="rgb(235,160,14)"/><text x="93.5381%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (130 samples, 0.40%)</title><rect x="94.0996%" y="277" width="0.4027%" height="15" fill="rgb(212,155,44)"/><text x="94.3496%" y="287.50"></text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadixDoubleButterfly&lt;T&gt;::perform_fft (655 samples, 2.03%)</title><rect x="92.5138%" y="309" width="2.0287%" height="15" fill="rgb(226,2,50)"/><text x="92.7638%" y="319.50">r..</text></g><g><title>rustfft::array_utils::transpose_small (275 samples, 0.85%)</title><rect x="93.6908%" y="293" width="0.8518%" height="15" fill="rgb(234,177,6)"/><text x="93.9408%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::mixed_radix::MixedRadixDoubleButterfly&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (675 samples, 2.09%)</title><rect x="92.4673%" y="325" width="2.0907%" height="15" fill="rgb(217,24,9)"/><text x="92.7173%" y="335.50">&lt;..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (36 samples, 0.11%)</title><rect x="94.8554%" y="293" width="0.1115%" height="15" fill="rgb(220,13,46)"/><text x="95.1054%" y="303.50"></text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt;::perform_fft (1,354 samples, 4.19%)</title><rect x="90.7824%" y="341" width="4.1938%" height="15" fill="rgb(239,221,27)"/><text x="91.0324%" y="351.50">rustf..</text></g><g><title>transpose::out_of_place::transpose (135 samples, 0.42%)</title><rect x="94.5580%" y="325" width="0.4181%" height="15" fill="rgb(222,198,25)"/><text x="94.8080%" y="335.50"></text></g><g><title>transpose::out_of_place::transpose_block (123 samples, 0.38%)</title><rect x="94.5952%" y="309" width="0.3810%" height="15" fill="rgb(211,99,13)"/><text x="94.8452%" y="319.50"></text></g><g><title>strength_reduce::&lt;impl core::ops::arith::Rem&lt;strength_reduce::StrengthReducedUsize&gt; for usize&gt;::rem (175 samples, 0.54%)</title><rect x="94.9762%" y="341" width="0.5420%" height="15" fill="rgb(232,111,31)"/><text x="95.2262%" y="351.50"></text></g><g><title>strength_reduce::&lt;impl core::ops::arith::Div&lt;strength_reduce::StrengthReducedUsize&gt; for usize&gt;::div (93 samples, 0.29%)</title><rect x="95.2301%" y="325" width="0.2881%" height="15" fill="rgb(245,82,37)"/><text x="95.4801%" y="335.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (33 samples, 0.10%)</title><rect x="95.6947%" y="309" width="0.1022%" height="15" fill="rgb(227,149,46)"/><text x="95.9447%" y="319.50"></text></g><g><title>&lt;rustfft::algorithm::raders_algorithm::RadersAlgorithm&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (2,008 samples, 6.22%)</title><rect x="89.5837%" y="373" width="6.2194%" height="15" fill="rgb(218,36,50)"/><text x="89.8337%" y="383.50">&lt;rustfft..</text></g><g><title>rustfft::algorithm::raders_algorithm::RadersAlgorithm&lt;T&gt;::perform_fft (2,007 samples, 6.22%)</title><rect x="89.5868%" y="357" width="6.2163%" height="15" fill="rgb(226,80,48)"/><text x="89.8368%" y="367.50">rustfft:..</text></g><g><title>transpose::out_of_place::transpose (92 samples, 0.28%)</title><rect x="95.5182%" y="341" width="0.2850%" height="15" fill="rgb(238,224,15)"/><text x="95.7682%" y="351.50"></text></g><g><title>transpose::out_of_place::transpose_block (88 samples, 0.27%)</title><rect x="95.5306%" y="325" width="0.2726%" height="15" fill="rgb(241,136,10)"/><text x="95.7806%" y="335.50"></text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt;::perform_fft (3,768 samples, 11.67%)</title><rect x="84.5568%" y="389" width="11.6707%" height="15" fill="rgb(208,32,45)"/><text x="84.8068%" y="399.50">rustfft::algorith..</text></g><g><title>transpose::out_of_place::transpose (137 samples, 0.42%)</title><rect x="95.8031%" y="373" width="0.4243%" height="15" fill="rgb(207,135,9)"/><text x="96.0531%" y="383.50"></text></g><g><title>transpose::out_of_place::transpose_block (137 samples, 0.42%)</title><rect x="95.8031%" y="357" width="0.4243%" height="15" fill="rgb(206,86,44)"/><text x="96.0531%" y="367.50"></text></g><g><title>get_page_from_freelist (42 samples, 0.13%)</title><rect x="96.4195%" y="149" width="0.1301%" height="15" fill="rgb(245,177,15)"/><text x="96.6695%" y="159.50"></text></g><g><title>__alloc_pages_nodemask (46 samples, 0.14%)</title><rect x="96.4102%" y="165" width="0.1425%" height="15" fill="rgb(206,64,50)"/><text x="96.6602%" y="175.50"></text></g><g><title>alloc_pages_vma (49 samples, 0.15%)</title><rect x="96.4102%" y="181" width="0.1518%" height="15" fill="rgb(234,36,40)"/><text x="96.6602%" y="191.50"></text></g><g><title>handle_mm_fault (83 samples, 0.26%)</title><rect x="96.3699%" y="229" width="0.2571%" height="15" fill="rgb(213,64,8)"/><text x="96.6199%" y="239.50"></text></g><g><title>__handle_mm_fault (82 samples, 0.25%)</title><rect x="96.3730%" y="213" width="0.2540%" height="15" fill="rgb(210,75,36)"/><text x="96.6230%" y="223.50"></text></g><g><title>do_anonymous_page (74 samples, 0.23%)</title><rect x="96.3978%" y="197" width="0.2292%" height="15" fill="rgb(229,88,21)"/><text x="96.6478%" y="207.50"></text></g><g><title>do_user_addr_fault (92 samples, 0.28%)</title><rect x="96.3483%" y="245" width="0.2850%" height="15" fill="rgb(252,204,47)"/><text x="96.5983%" y="255.50"></text></g><g><title>page_fault (96 samples, 0.30%)</title><rect x="96.3452%" y="293" width="0.2973%" height="15" fill="rgb(208,77,27)"/><text x="96.5952%" y="303.50"></text></g><g><title>do_page_fault (95 samples, 0.29%)</title><rect x="96.3483%" y="277" width="0.2942%" height="15" fill="rgb(221,76,26)"/><text x="96.5983%" y="287.50"></text></g><g><title>__do_page_fault (95 samples, 0.29%)</title><rect x="96.3483%" y="261" width="0.2942%" height="15" fill="rgb(225,139,18)"/><text x="96.5983%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (164 samples, 0.51%)</title><rect x="96.2306%" y="325" width="0.5080%" height="15" fill="rgb(230,137,11)"/><text x="96.4806%" y="335.50"></text></g><g><title>core::ptr::write (163 samples, 0.50%)</title><rect x="96.2337%" y="309" width="0.5049%" height="15" fill="rgb(212,28,1)"/><text x="96.4837%" y="319.50"></text></g><g><title>do_cos (187 samples, 0.58%)</title><rect x="97.1660%" y="245" width="0.5792%" height="15" fill="rgb(248,164,17)"/><text x="97.4160%" y="255.50"></text></g><g><title>do_sin (345 samples, 1.07%)</title><rect x="97.7452%" y="245" width="1.0686%" height="15" fill="rgb(222,171,42)"/><text x="97.9952%" y="255.50"></text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt;::new (919 samples, 2.85%)</title><rect x="96.2306%" y="341" width="2.8464%" height="15" fill="rgb(243,84,45)"/><text x="96.4806%" y="351.50">ru..</text></g><g><title>rustfft::twiddles::single_twiddle (738 samples, 2.29%)</title><rect x="96.7912%" y="325" width="2.2858%" height="15" fill="rgb(252,49,23)"/><text x="97.0412%" y="335.50">r..</text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (703 samples, 2.18%)</title><rect x="96.8996%" y="309" width="2.1774%" height="15" fill="rgb(215,19,7)"/><text x="97.1496%" y="319.50">n..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (703 samples, 2.18%)</title><rect x="96.8996%" y="293" width="2.1774%" height="15" fill="rgb(238,81,41)"/><text x="97.1496%" y="303.50">&lt;..</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (703 samples, 2.18%)</title><rect x="96.8996%" y="277" width="2.1774%" height="15" fill="rgb(210,199,37)"/><text x="97.1496%" y="287.50">s..</text></g><g><title>__sincos (694 samples, 2.15%)</title><rect x="96.9275%" y="261" width="2.1495%" height="15" fill="rgb(244,192,49)"/><text x="97.1775%" y="271.50">_..</text></g><g><title>reduce_sincos (44 samples, 0.14%)</title><rect x="98.9407%" y="245" width="0.1363%" height="15" fill="rgb(226,211,11)"/><text x="99.1907%" y="255.50"></text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft (966 samples, 2.99%)</title><rect x="96.2275%" y="389" width="2.9920%" height="15" fill="rgb(236,162,54)"/><text x="96.4775%" y="399.50">rus..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (966 samples, 2.99%)</title><rect x="96.2275%" y="373" width="2.9920%" height="15" fill="rgb(220,229,9)"/><text x="96.4775%" y="383.50">rus..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_mixed_radix (965 samples, 2.99%)</title><rect x="96.2306%" y="357" width="2.9889%" height="15" fill="rgb(250,87,22)"/><text x="96.4806%" y="367.50">rus..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (46 samples, 0.14%)</title><rect x="99.0770%" y="341" width="0.1425%" height="15" fill="rgb(239,43,17)"/><text x="99.3270%" y="351.50"></text></g><g><title>mass::mass2 (30,632 samples, 94.88%)</title><rect x="4.5004%" y="405" width="94.8770%" height="15" fill="rgb(231,177,25)"/><text x="4.7504%" y="415.50">mass::mass2</text></g><g><title>transpose::out_of_place::transpose (51 samples, 0.16%)</title><rect x="99.2195%" y="389" width="0.1580%" height="15" fill="rgb(219,179,1)"/><text x="99.4695%" y="399.50"></text></g><g><title>transpose::out_of_place::transpose_block (51 samples, 0.16%)</title><rect x="99.2195%" y="373" width="0.1580%" height="15" fill="rgb(238,219,53)"/><text x="99.4695%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (30,660 samples, 94.96%)</title><rect x="4.4973%" y="517" width="94.9638%" height="15" fill="rgb(232,167,36)"/><text x="4.7473%" y="527.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (30,660 samples, 94.96%)</title><rect x="4.4973%" y="501" width="94.9638%" height="15" fill="rgb(244,19,51)"/><text x="4.7473%" y="511.50">alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30,659 samples, 94.96%)</title><rect x="4.5004%" y="485" width="94.9607%" height="15" fill="rgb(224,6,22)"/><text x="4.7504%" y="495.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (30,659 samples, 94.96%)</title><rect x="4.5004%" y="469" width="94.9607%" height="15" fill="rgb(224,145,5)"/><text x="4.7504%" y="479.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (30,659 samples, 94.96%)</title><rect x="4.5004%" y="453" width="94.9607%" height="15" fill="rgb(234,130,49)"/><text x="4.7504%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>mass::mass_batch::{{closure}} (30,659 samples, 94.96%)</title><rect x="4.5004%" y="437" width="94.9607%" height="15" fill="rgb(254,6,2)"/><text x="4.7504%" y="447.50">mass::mass_batch::{{closure}}</text></g><g><title>mass::min_subsequence_distance (30,659 samples, 94.96%)</title><rect x="4.5004%" y="421" width="94.9607%" height="15" fill="rgb(208,96,46)"/><text x="4.7504%" y="431.50">mass::min_subsequence_distance</text></g><g><title>__libc_start_main (30,691 samples, 95.06%)</title><rect x="4.4756%" y="677" width="95.0598%" height="15" fill="rgb(239,3,39)"/><text x="4.7256%" y="687.50">__libc_start_main</text></g><g><title>main (30,691 samples, 95.06%)</title><rect x="4.4756%" y="661" width="95.0598%" height="15" fill="rgb(233,210,1)"/><text x="4.7256%" y="671.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (30,691 samples, 95.06%)</title><rect x="4.4756%" y="645" width="95.0598%" height="15" fill="rgb(244,137,37)"/><text x="4.7256%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (30,691 samples, 95.06%)</title><rect x="4.4756%" y="629" width="95.0598%" height="15" fill="rgb(240,136,2)"/><text x="4.7256%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (30,691 samples, 95.06%)</title><rect x="4.4756%" y="613" width="95.0598%" height="15" fill="rgb(239,18,37)"/><text x="4.7256%" y="623.50">main::main</text></g><g><title>mass::mass_batch (30,684 samples, 95.04%)</title><rect x="4.4973%" y="597" width="95.0381%" height="15" fill="rgb(218,185,22)"/><text x="4.7473%" y="607.50">mass::mass_batch</text></g><g><title>core::iter::traits::iterator::Iterator::collect (30,684 samples, 95.04%)</title><rect x="4.4973%" y="581" width="95.0381%" height="15" fill="rgb(225,218,4)"/><text x="4.7473%" y="591.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30,684 samples, 95.04%)</title><rect x="4.4973%" y="565" width="95.0381%" height="15" fill="rgb(230,182,32)"/><text x="4.7473%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30,684 samples, 95.04%)</title><rect x="4.4973%" y="549" width="95.0381%" height="15" fill="rgb(242,56,43)"/><text x="4.7473%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30,684 samples, 95.04%)</title><rect x="4.4973%" y="533" width="95.0381%" height="15" fill="rgb(233,99,24)"/><text x="4.7473%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>_start (30,692 samples, 95.06%)</title><rect x="4.4756%" y="693" width="95.0629%" height="15" fill="rgb(234,209,42)"/><text x="4.7256%" y="703.50">_start</text></g><g><title>page_fault (114 samples, 0.35%)</title><rect x="99.5973%" y="693" width="0.3531%" height="15" fill="rgb(227,7,12)"/><text x="99.8473%" y="703.50"></text></g><g><title>main (32,281 samples, 99.98%)</title><rect x="0.0000%" y="709" width="99.9845%" height="15" fill="rgb(245,203,43)"/><text x="0.2500%" y="719.50">main</text></g><g><title>all (32,286 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(238,205,33)"/><text x="0.2500%" y="735.50"></text></g></svg></svg>