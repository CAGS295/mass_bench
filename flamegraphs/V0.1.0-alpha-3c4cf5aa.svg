<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="725.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="725.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.13%)</title><rect x="0.1452%" y="645" width="0.1310%" height="15" fill="rgb(227,0,7)"/><text x="0.3952%" y="655.50"></text></g><g><title>main::main (52 samples, 0.18%)</title><rect x="0.4284%" y="645" width="0.1841%" height="15" fill="rgb(217,0,24)"/><text x="0.6784%" y="655.50"></text></g><g><title>mass_bench::input_pair (52 samples, 0.18%)</title><rect x="0.4284%" y="629" width="0.1841%" height="15" fill="rgb(221,193,54)"/><text x="0.6784%" y="639.50"></text></g><g><title>mass_bench::load_series (52 samples, 0.18%)</title><rect x="0.4284%" y="613" width="0.1841%" height="15" fill="rgb(248,212,6)"/><text x="0.6784%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (52 samples, 0.18%)</title><rect x="0.4284%" y="597" width="0.1841%" height="15" fill="rgb(208,68,35)"/><text x="0.6784%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (52 samples, 0.18%)</title><rect x="0.4284%" y="581" width="0.1841%" height="15" fill="rgb(232,128,0)"/><text x="0.6784%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (52 samples, 0.18%)</title><rect x="0.4284%" y="565" width="0.1841%" height="15" fill="rgb(207,160,47)"/><text x="0.6784%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (52 samples, 0.18%)</title><rect x="0.4284%" y="549" width="0.1841%" height="15" fill="rgb(228,23,34)"/><text x="0.6784%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (52 samples, 0.18%)</title><rect x="0.4284%" y="533" width="0.1841%" height="15" fill="rgb(218,30,26)"/><text x="0.6784%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (52 samples, 0.18%)</title><rect x="0.4284%" y="517" width="0.1841%" height="15" fill="rgb(220,122,19)"/><text x="0.6784%" y="527.50"></text></g><g><title>core::ptr::write (42 samples, 0.15%)</title><rect x="0.4638%" y="501" width="0.1487%" height="15" fill="rgb(250,228,42)"/><text x="0.7138%" y="511.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (65 samples, 0.23%)</title><rect x="0.9028%" y="453" width="0.2301%" height="15" fill="rgb(240,193,28)"/><text x="1.1528%" y="463.50"></text></g><g><title>core::slice::ascii::is_ascii (65 samples, 0.23%)</title><rect x="0.9028%" y="437" width="0.2301%" height="15" fill="rgb(216,20,37)"/><text x="1.1528%" y="447.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (64 samples, 0.23%)</title><rect x="0.9063%" y="421" width="0.2266%" height="15" fill="rgb(206,188,39)"/><text x="1.1563%" y="431.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (83 samples, 0.29%)</title><rect x="0.8922%" y="469" width="0.2938%" height="15" fill="rgb(217,207,13)"/><text x="1.1422%" y="479.50"></text></g><g><title>__memmove_avx_unaligned_erms (38 samples, 0.13%)</title><rect x="1.9366%" y="117" width="0.1345%" height="15" fill="rgb(231,73,38)"/><text x="2.1866%" y="127.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (192 samples, 0.68%)</title><rect x="1.6108%" y="133" width="0.6797%" height="15" fill="rgb(225,20,46)"/><text x="1.8608%" y="143.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (227 samples, 0.80%)</title><rect x="1.6002%" y="165" width="0.8037%" height="15" fill="rgb(210,31,41)"/><text x="1.8502%" y="175.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (227 samples, 0.80%)</title><rect x="1.6002%" y="149" width="0.8037%" height="15" fill="rgb(221,200,47)"/><text x="1.8502%" y="159.50"></text></g><g><title>miniz_oxide::shared::update_adler32 (32 samples, 0.11%)</title><rect x="2.2906%" y="133" width="0.1133%" height="15" fill="rgb(226,26,5)"/><text x="2.5406%" y="143.50"></text></g><g><title>adler::Adler32::write_slice (32 samples, 0.11%)</title><rect x="2.2906%" y="117" width="0.1133%" height="15" fill="rgb(249,33,26)"/><text x="2.5406%" y="127.50"></text></g><g><title>adler::algo::&lt;impl adler::Adler32&gt;::compute (32 samples, 0.11%)</title><rect x="2.2906%" y="101" width="0.1133%" height="15" fill="rgb(235,183,28)"/><text x="2.5406%" y="111.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (236 samples, 0.84%)</title><rect x="1.5790%" y="261" width="0.8355%" height="15" fill="rgb(221,5,38)"/><text x="1.8290%" y="271.50"></text></g><g><title>flate2::zio::read (236 samples, 0.84%)</title><rect x="1.5790%" y="245" width="0.8355%" height="15" fill="rgb(247,18,42)"/><text x="1.8290%" y="255.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (230 samples, 0.81%)</title><rect x="1.6002%" y="229" width="0.8143%" height="15" fill="rgb(241,131,45)"/><text x="1.8502%" y="239.50"></text></g><g><title>flate2::mem::Decompress::decompress (230 samples, 0.81%)</title><rect x="1.6002%" y="213" width="0.8143%" height="15" fill="rgb(249,31,29)"/><text x="1.8502%" y="223.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (230 samples, 0.81%)</title><rect x="1.6002%" y="197" width="0.8143%" height="15" fill="rgb(225,111,53)"/><text x="1.8502%" y="207.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (230 samples, 0.81%)</title><rect x="1.6002%" y="181" width="0.8143%" height="15" fill="rgb(238,160,17)"/><text x="1.8502%" y="191.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (245 samples, 0.87%)</title><rect x="1.5613%" y="437" width="0.8674%" height="15" fill="rgb(214,148,48)"/><text x="1.8113%" y="447.50"></text></g><g><title>&lt;tar::entry::Entry&lt;R&gt; as std::io::Read&gt;::read (240 samples, 0.85%)</title><rect x="1.5790%" y="421" width="0.8497%" height="15" fill="rgb(232,36,49)"/><text x="1.8290%" y="431.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read (240 samples, 0.85%)</title><rect x="1.5790%" y="405" width="0.8497%" height="15" fill="rgb(209,103,24)"/><text x="1.8290%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (240 samples, 0.85%)</title><rect x="1.5790%" y="389" width="0.8497%" height="15" fill="rgb(229,88,8)"/><text x="1.8290%" y="399.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read::{{closure}} (240 samples, 0.85%)</title><rect x="1.5790%" y="373" width="0.8497%" height="15" fill="rgb(213,181,19)"/><text x="1.8290%" y="383.50"></text></g><g><title>&lt;tar::entry::EntryIo as std::io::Read&gt;::read (240 samples, 0.85%)</title><rect x="1.5790%" y="357" width="0.8497%" height="15" fill="rgb(254,191,54)"/><text x="1.8290%" y="367.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (240 samples, 0.85%)</title><rect x="1.5790%" y="341" width="0.8497%" height="15" fill="rgb(241,83,37)"/><text x="1.8290%" y="351.50"></text></g><g><title>&lt;&amp;tar::archive::ArchiveInner&lt;R&gt; as std::io::Read&gt;::read (240 samples, 0.85%)</title><rect x="1.5790%" y="325" width="0.8497%" height="15" fill="rgb(233,36,39)"/><text x="1.8290%" y="335.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (240 samples, 0.85%)</title><rect x="1.5790%" y="309" width="0.8497%" height="15" fill="rgb(226,3,54)"/><text x="1.8290%" y="319.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (240 samples, 0.85%)</title><rect x="1.5790%" y="293" width="0.8497%" height="15" fill="rgb(245,192,40)"/><text x="1.8290%" y="303.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (240 samples, 0.85%)</title><rect x="1.5790%" y="277" width="0.8497%" height="15" fill="rgb(238,167,29)"/><text x="1.8290%" y="287.50"></text></g><g><title>csv_core::reader::Dfa::get_output (44 samples, 0.16%)</title><rect x="3.1367%" y="405" width="0.1558%" height="15" fill="rgb(232,182,51)"/><text x="3.3867%" y="415.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (281 samples, 0.99%)</title><rect x="2.7898%" y="421" width="0.9948%" height="15" fill="rgb(231,60,39)"/><text x="3.0398%" y="431.50"></text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (127 samples, 0.45%)</title><rect x="3.3350%" y="405" width="0.4496%" height="15" fill="rgb(208,69,12)"/><text x="3.5850%" y="415.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (856 samples, 3.03%)</title><rect x="0.7824%" y="501" width="3.0305%" height="15" fill="rgb(235,93,37)"/><text x="1.0324%" y="511.50">csv..</text></g><g><title>csv::string_record::StringRecord::read (848 samples, 3.00%)</title><rect x="0.8107%" y="485" width="3.0022%" height="15" fill="rgb(213,116,39)"/><text x="1.0607%" y="495.50">csv..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (742 samples, 2.63%)</title><rect x="1.1860%" y="469" width="2.6269%" height="15" fill="rgb(222,207,29)"/><text x="1.4360%" y="479.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (708 samples, 2.51%)</title><rect x="1.3064%" y="453" width="2.5065%" height="15" fill="rgb(206,96,30)"/><text x="1.5564%" y="463.50">cs..</text></g><g><title>csv_core::reader::Reader::read_record (307 samples, 1.09%)</title><rect x="2.7260%" y="437" width="1.0869%" height="15" fill="rgb(218,138,4)"/><text x="2.9760%" y="447.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (35 samples, 0.12%)</title><rect x="3.8731%" y="389" width="0.1239%" height="15" fill="rgb(250,191,14)"/><text x="4.1231%" y="399.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (29 samples, 0.10%)</title><rect x="4.1351%" y="309" width="0.1027%" height="15" fill="rgb(239,60,40)"/><text x="4.3851%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (69 samples, 0.24%)</title><rect x="4.2626%" y="309" width="0.2443%" height="15" fill="rgb(206,27,48)"/><text x="4.5126%" y="319.50"></text></g><g><title>core::num::dec2flt::num::from_str_unchecked (35 samples, 0.12%)</title><rect x="4.5281%" y="309" width="0.1239%" height="15" fill="rgb(225,35,8)"/><text x="4.7781%" y="319.50"></text></g><g><title>core::num::dec2flt::algorithm::fast_path (166 samples, 0.59%)</title><rect x="4.0855%" y="325" width="0.5877%" height="15" fill="rgb(250,213,24)"/><text x="4.3355%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (43 samples, 0.15%)</title><rect x="4.7122%" y="309" width="0.1522%" height="15" fill="rgb(247,123,22)"/><text x="4.9622%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (43 samples, 0.15%)</title><rect x="4.7122%" y="293" width="0.1522%" height="15" fill="rgb(231,138,38)"/><text x="4.9622%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (43 samples, 0.15%)</title><rect x="4.7122%" y="277" width="0.1522%" height="15" fill="rgb(231,145,46)"/><text x="4.9622%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (32 samples, 0.11%)</title><rect x="4.7511%" y="261" width="0.1133%" height="15" fill="rgb(251,118,11)"/><text x="5.0011%" y="271.50"></text></g><g><title>core::num::dec2flt::simplify (59 samples, 0.21%)</title><rect x="4.6732%" y="325" width="0.2089%" height="15" fill="rgb(217,147,25)"/><text x="4.9232%" y="335.50"></text></g><g><title>core::num::dec2flt::convert (241 samples, 0.85%)</title><rect x="4.0537%" y="341" width="0.8532%" height="15" fill="rgb(247,81,37)"/><text x="4.3037%" y="351.50"></text></g><g><title>core::num::dec2flt::parse::eat_digits (40 samples, 0.14%)</title><rect x="4.9742%" y="325" width="0.1416%" height="15" fill="rgb(209,12,38)"/><text x="5.2242%" y="335.50"></text></g><g><title>mass_bench::load_series (1,278 samples, 4.52%)</title><rect x="0.6125%" y="645" width="4.5245%" height="15" fill="rgb(227,1,9)"/><text x="0.8625%" y="655.50">mass_..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,278 samples, 4.52%)</title><rect x="0.6125%" y="629" width="4.5245%" height="15" fill="rgb(248,47,43)"/><text x="0.8625%" y="639.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,278 samples, 4.52%)</title><rect x="0.6125%" y="613" width="4.5245%" height="15" fill="rgb(221,10,30)"/><text x="0.8625%" y="623.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,278 samples, 4.52%)</title><rect x="0.6125%" y="597" width="4.5245%" height="15" fill="rgb(210,229,1)"/><text x="0.8625%" y="607.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,278 samples, 4.52%)</title><rect x="0.6125%" y="581" width="4.5245%" height="15" fill="rgb(222,148,37)"/><text x="0.8625%" y="591.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,278 samples, 4.52%)</title><rect x="0.6125%" y="565" width="4.5245%" height="15" fill="rgb(234,67,33)"/><text x="0.8625%" y="575.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1,278 samples, 4.52%)</title><rect x="0.6125%" y="549" width="4.5245%" height="15" fill="rgb(247,98,35)"/><text x="0.8625%" y="559.50">alloc..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,278 samples, 4.52%)</title><rect x="0.6125%" y="533" width="4.5245%" height="15" fill="rgb(247,138,52)"/><text x="0.8625%" y="543.50">&lt;core..</text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,240 samples, 4.39%)</title><rect x="0.7470%" y="517" width="4.3900%" height="15" fill="rgb(213,79,30)"/><text x="0.9970%" y="527.50">&lt;csv:..</text></g><g><title>csv::string_record::StringRecord::deserialize (374 samples, 1.32%)</title><rect x="3.8129%" y="501" width="1.3241%" height="15" fill="rgb(246,177,23)"/><text x="4.0629%" y="511.50"></text></g><g><title>csv::deserializer::deserialize_string_record (374 samples, 1.32%)</title><rect x="3.8129%" y="485" width="1.3241%" height="15" fill="rgb(230,62,27)"/><text x="4.0629%" y="495.50"></text></g><g><title>mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize (357 samples, 1.26%)</title><rect x="3.8731%" y="469" width="1.2639%" height="15" fill="rgb(216,154,8)"/><text x="4.1231%" y="479.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (357 samples, 1.26%)</title><rect x="3.8731%" y="453" width="1.2639%" height="15" fill="rgb(244,35,45)"/><text x="4.1231%" y="463.50"></text></g><g><title>&lt;mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize::__Visitor&lt;T&gt; as serde::de::Visitor&gt;::visit_newtype_struct (357 samples, 1.26%)</title><rect x="3.8731%" y="437" width="1.2639%" height="15" fill="rgb(251,115,12)"/><text x="4.1231%" y="447.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (357 samples, 1.26%)</title><rect x="3.8731%" y="421" width="1.2639%" height="15" fill="rgb(240,54,50)"/><text x="4.1231%" y="431.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (357 samples, 1.26%)</title><rect x="3.8731%" y="405" width="1.2639%" height="15" fill="rgb(233,84,52)"/><text x="4.1231%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (318 samples, 1.13%)</title><rect x="4.0112%" y="389" width="1.1258%" height="15" fill="rgb(207,117,47)"/><text x="4.2612%" y="399.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::FromStr for f64&gt;::from_str (318 samples, 1.13%)</title><rect x="4.0112%" y="373" width="1.1258%" height="15" fill="rgb(249,43,39)"/><text x="4.2612%" y="383.50"></text></g><g><title>core::num::dec2flt::dec2flt (318 samples, 1.13%)</title><rect x="4.0112%" y="357" width="1.1258%" height="15" fill="rgb(209,38,44)"/><text x="4.2612%" y="367.50"></text></g><g><title>core::num::dec2flt::parse::parse_decimal (59 samples, 0.21%)</title><rect x="4.9281%" y="341" width="0.2089%" height="15" fill="rgb(236,212,23)"/><text x="5.1781%" y="351.50"></text></g><g><title>[unknown] (1,415 samples, 5.01%)</title><rect x="0.1452%" y="661" width="5.0096%" height="15" fill="rgb(242,79,21)"/><text x="0.3952%" y="671.50">[unkno..</text></g><g><title>core::ptr::drop_in_place (38 samples, 0.13%)</title><rect x="5.2220%" y="373" width="0.1345%" height="15" fill="rgb(211,96,35)"/><text x="5.4720%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (38 samples, 0.13%)</title><rect x="5.2220%" y="357" width="0.1345%" height="15" fill="rgb(253,215,40)"/><text x="5.4720%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.13%)</title><rect x="5.2220%" y="341" width="0.1345%" height="15" fill="rgb(211,81,21)"/><text x="5.4720%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (38 samples, 0.13%)</title><rect x="5.2220%" y="325" width="0.1345%" height="15" fill="rgb(208,190,38)"/><text x="5.4720%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.13%)</title><rect x="5.2220%" y="309" width="0.1345%" height="15" fill="rgb(235,213,38)"/><text x="5.4720%" y="319.50"></text></g><g><title>__rdl_dealloc (38 samples, 0.13%)</title><rect x="5.2220%" y="293" width="0.1345%" height="15" fill="rgb(237,122,38)"/><text x="5.4720%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (38 samples, 0.13%)</title><rect x="5.2220%" y="277" width="0.1345%" height="15" fill="rgb(244,218,35)"/><text x="5.4720%" y="287.50"></text></g><g><title>_int_free (38 samples, 0.13%)</title><rect x="5.2220%" y="261" width="0.1345%" height="15" fill="rgb(240,68,47)"/><text x="5.4720%" y="271.50"></text></g><g><title>systrim (38 samples, 0.13%)</title><rect x="5.2220%" y="245" width="0.1345%" height="15" fill="rgb(210,16,53)"/><text x="5.4720%" y="255.50"></text></g><g><title>__GI___default_morecore (38 samples, 0.13%)</title><rect x="5.2220%" y="229" width="0.1345%" height="15" fill="rgb(235,124,12)"/><text x="5.4720%" y="239.50"></text></g><g><title>__GI___sbrk (38 samples, 0.13%)</title><rect x="5.2220%" y="213" width="0.1345%" height="15" fill="rgb(224,169,11)"/><text x="5.4720%" y="223.50"></text></g><g><title>__GI___sbrk (38 samples, 0.13%)</title><rect x="5.2220%" y="197" width="0.1345%" height="15" fill="rgb(250,166,2)"/><text x="5.4720%" y="207.50"></text></g><g><title>__brk (38 samples, 0.13%)</title><rect x="5.2220%" y="181" width="0.1345%" height="15" fill="rgb(242,216,29)"/><text x="5.4720%" y="191.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (38 samples, 0.13%)</title><rect x="5.2220%" y="165" width="0.1345%" height="15" fill="rgb(230,116,27)"/><text x="5.4720%" y="175.50"></text></g><g><title>do_syscall_64 (38 samples, 0.13%)</title><rect x="5.2220%" y="149" width="0.1345%" height="15" fill="rgb(228,99,48)"/><text x="5.4720%" y="159.50"></text></g><g><title>__x64_sys_brk (37 samples, 0.13%)</title><rect x="5.2255%" y="133" width="0.1310%" height="15" fill="rgb(253,11,6)"/><text x="5.4755%" y="143.50"></text></g><g><title>__do_munmap (37 samples, 0.13%)</title><rect x="5.2255%" y="117" width="0.1310%" height="15" fill="rgb(247,143,39)"/><text x="5.4755%" y="127.50"></text></g><g><title>unmap_region (36 samples, 0.13%)</title><rect x="5.2291%" y="101" width="0.1275%" height="15" fill="rgb(236,97,10)"/><text x="5.4791%" y="111.50"></text></g><g><title>mass::math::dist (30 samples, 0.11%)</title><rect x="5.3565%" y="357" width="0.1062%" height="15" fill="rgb(233,208,19)"/><text x="5.6065%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (30 samples, 0.11%)</title><rect x="5.3565%" y="341" width="0.1062%" height="15" fill="rgb(216,164,2)"/><text x="5.6065%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30 samples, 0.11%)</title><rect x="5.3565%" y="325" width="0.1062%" height="15" fill="rgb(220,129,5)"/><text x="5.6065%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30 samples, 0.11%)</title><rect x="5.3565%" y="309" width="0.1062%" height="15" fill="rgb(242,17,10)"/><text x="5.6065%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30 samples, 0.11%)</title><rect x="5.3565%" y="293" width="0.1062%" height="15" fill="rgb(242,107,0)"/><text x="5.6065%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (30 samples, 0.11%)</title><rect x="5.3565%" y="277" width="0.1062%" height="15" fill="rgb(251,28,31)"/><text x="5.6065%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (29 samples, 0.10%)</title><rect x="5.3601%" y="261" width="0.1027%" height="15" fill="rgb(233,223,10)"/><text x="5.6101%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29 samples, 0.10%)</title><rect x="5.3601%" y="245" width="0.1027%" height="15" fill="rgb(215,21,27)"/><text x="5.6101%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (29 samples, 0.10%)</title><rect x="5.3601%" y="229" width="0.1027%" height="15" fill="rgb(232,23,21)"/><text x="5.6101%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (29 samples, 0.10%)</title><rect x="5.3601%" y="213" width="0.1027%" height="15" fill="rgb(244,5,23)"/><text x="5.6101%" y="223.50"></text></g><g><title>alloc_pages_vma (30 samples, 0.11%)</title><rect x="5.6362%" y="165" width="0.1062%" height="15" fill="rgb(226,81,46)"/><text x="5.8862%" y="175.50"></text></g><g><title>__alloc_pages_nodemask (30 samples, 0.11%)</title><rect x="5.6362%" y="149" width="0.1062%" height="15" fill="rgb(247,70,30)"/><text x="5.8862%" y="159.50"></text></g><g><title>page_fault (72 samples, 0.25%)</title><rect x="5.5866%" y="277" width="0.2549%" height="15" fill="rgb(212,68,19)"/><text x="5.8366%" y="287.50"></text></g><g><title>do_page_fault (71 samples, 0.25%)</title><rect x="5.5902%" y="261" width="0.2514%" height="15" fill="rgb(240,187,13)"/><text x="5.8402%" y="271.50"></text></g><g><title>__do_page_fault (70 samples, 0.25%)</title><rect x="5.5937%" y="245" width="0.2478%" height="15" fill="rgb(223,113,26)"/><text x="5.8437%" y="255.50"></text></g><g><title>do_user_addr_fault (70 samples, 0.25%)</title><rect x="5.5937%" y="229" width="0.2478%" height="15" fill="rgb(206,192,2)"/><text x="5.8437%" y="239.50"></text></g><g><title>handle_mm_fault (67 samples, 0.24%)</title><rect x="5.6043%" y="213" width="0.2372%" height="15" fill="rgb(241,108,4)"/><text x="5.8543%" y="223.50"></text></g><g><title>__handle_mm_fault (66 samples, 0.23%)</title><rect x="5.6079%" y="197" width="0.2337%" height="15" fill="rgb(247,173,49)"/><text x="5.8579%" y="207.50"></text></g><g><title>do_anonymous_page (59 samples, 0.21%)</title><rect x="5.6327%" y="181" width="0.2089%" height="15" fill="rgb(224,114,35)"/><text x="5.8827%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_with (144 samples, 0.51%)</title><rect x="5.4627%" y="309" width="0.5098%" height="15" fill="rgb(245,159,27)"/><text x="5.7127%" y="319.50"></text></g><g><title>core::ptr::write (144 samples, 0.51%)</title><rect x="5.4627%" y="293" width="0.5098%" height="15" fill="rgb(245,172,44)"/><text x="5.7127%" y="303.50"></text></g><g><title>alloc::vec::from_elem (152 samples, 0.54%)</title><rect x="5.4627%" y="341" width="0.5381%" height="15" fill="rgb(236,23,11)"/><text x="5.7127%" y="351.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (152 samples, 0.54%)</title><rect x="5.4627%" y="325" width="0.5381%" height="15" fill="rgb(205,117,38)"/><text x="5.7127%" y="335.50"></text></g><g><title>alloc_pages_vma (29 samples, 0.10%)</title><rect x="6.2593%" y="37" width="0.1027%" height="15" fill="rgb(237,72,25)"/><text x="6.5093%" y="47.50"></text></g><g><title>__handle_mm_fault (57 samples, 0.20%)</title><rect x="6.2274%" y="69" width="0.2018%" height="15" fill="rgb(244,70,9)"/><text x="6.4774%" y="79.50"></text></g><g><title>do_anonymous_page (52 samples, 0.18%)</title><rect x="6.2451%" y="53" width="0.1841%" height="15" fill="rgb(217,125,39)"/><text x="6.4951%" y="63.50"></text></g><g><title>handle_mm_fault (59 samples, 0.21%)</title><rect x="6.2239%" y="85" width="0.2089%" height="15" fill="rgb(235,36,10)"/><text x="6.4739%" y="95.50"></text></g><g><title>page_fault (66 samples, 0.23%)</title><rect x="6.2026%" y="149" width="0.2337%" height="15" fill="rgb(251,123,47)"/><text x="6.4526%" y="159.50"></text></g><g><title>do_page_fault (64 samples, 0.23%)</title><rect x="6.2097%" y="133" width="0.2266%" height="15" fill="rgb(221,13,13)"/><text x="6.4597%" y="143.50"></text></g><g><title>__do_page_fault (64 samples, 0.23%)</title><rect x="6.2097%" y="117" width="0.2266%" height="15" fill="rgb(238,131,9)"/><text x="6.4597%" y="127.50"></text></g><g><title>do_user_addr_fault (63 samples, 0.22%)</title><rect x="6.2133%" y="101" width="0.2230%" height="15" fill="rgb(211,50,8)"/><text x="6.4633%" y="111.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (33 samples, 0.12%)</title><rect x="6.4363%" y="149" width="0.1168%" height="15" fill="rgb(245,182,24)"/><text x="6.6863%" y="159.50"></text></g><g><title>prepare_exit_to_usermode (33 samples, 0.12%)</title><rect x="6.4363%" y="133" width="0.1168%" height="15" fill="rgb(242,14,37)"/><text x="6.6863%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (147 samples, 0.52%)</title><rect x="6.0717%" y="197" width="0.5204%" height="15" fill="rgb(246,228,12)"/><text x="6.3217%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (147 samples, 0.52%)</title><rect x="6.0717%" y="181" width="0.5204%" height="15" fill="rgb(213,55,15)"/><text x="6.3217%" y="191.50"></text></g><g><title>core::ptr::write (147 samples, 0.52%)</title><rect x="6.0717%" y="165" width="0.5204%" height="15" fill="rgb(209,9,3)"/><text x="6.3217%" y="175.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (171 samples, 0.61%)</title><rect x="6.0008%" y="293" width="0.6054%" height="15" fill="rgb(230,59,30)"/><text x="6.2508%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (171 samples, 0.61%)</title><rect x="6.0008%" y="277" width="0.6054%" height="15" fill="rgb(209,121,21)"/><text x="6.2508%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (166 samples, 0.59%)</title><rect x="6.0186%" y="261" width="0.5877%" height="15" fill="rgb(220,109,13)"/><text x="6.2686%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (165 samples, 0.58%)</title><rect x="6.0221%" y="245" width="0.5842%" height="15" fill="rgb(232,18,1)"/><text x="6.2721%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (165 samples, 0.58%)</title><rect x="6.0221%" y="229" width="0.5842%" height="15" fill="rgb(215,41,42)"/><text x="6.2721%" y="239.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (151 samples, 0.53%)</title><rect x="6.0717%" y="213" width="0.5346%" height="15" fill="rgb(224,123,36)"/><text x="6.3217%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (194 samples, 0.69%)</title><rect x="6.0008%" y="341" width="0.6868%" height="15" fill="rgb(240,125,3)"/><text x="6.2508%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (194 samples, 0.69%)</title><rect x="6.0008%" y="325" width="0.6868%" height="15" fill="rgb(205,98,50)"/><text x="6.2508%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (194 samples, 0.69%)</title><rect x="6.0008%" y="309" width="0.6868%" height="15" fill="rgb(205,185,37)"/><text x="6.2508%" y="319.50"></text></g><g><title>core::ptr::drop_in_place (37 samples, 0.13%)</title><rect x="6.6877%" y="341" width="0.1310%" height="15" fill="rgb(238,207,15)"/><text x="6.9377%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (37 samples, 0.13%)</title><rect x="6.6877%" y="325" width="0.1310%" height="15" fill="rgb(213,199,42)"/><text x="6.9377%" y="335.50"></text></g><g><title>mass::stats::append (44 samples, 0.16%)</title><rect x="6.8187%" y="341" width="0.1558%" height="15" fill="rgb(235,201,11)"/><text x="7.0687%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (44 samples, 0.16%)</title><rect x="6.8187%" y="325" width="0.1558%" height="15" fill="rgb(207,46,11)"/><text x="7.0687%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (44 samples, 0.16%)</title><rect x="6.8187%" y="309" width="0.1558%" height="15" fill="rgb(241,35,35)"/><text x="7.0687%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (43 samples, 0.15%)</title><rect x="6.8222%" y="293" width="0.1522%" height="15" fill="rgb(243,32,47)"/><text x="7.0722%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (43 samples, 0.15%)</title><rect x="6.8222%" y="277" width="0.1522%" height="15" fill="rgb(247,202,23)"/><text x="7.0722%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (43 samples, 0.15%)</title><rect x="6.8222%" y="261" width="0.1522%" height="15" fill="rgb(219,102,11)"/><text x="7.0722%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (43 samples, 0.15%)</title><rect x="6.8222%" y="245" width="0.1522%" height="15" fill="rgb(243,110,44)"/><text x="7.0722%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (43 samples, 0.15%)</title><rect x="6.8222%" y="229" width="0.1522%" height="15" fill="rgb(222,74,54)"/><text x="7.0722%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (43 samples, 0.15%)</title><rect x="6.8222%" y="213" width="0.1522%" height="15" fill="rgb(216,99,12)"/><text x="7.0722%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (43 samples, 0.15%)</title><rect x="6.8222%" y="197" width="0.1522%" height="15" fill="rgb(226,22,26)"/><text x="7.0722%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (43 samples, 0.15%)</title><rect x="6.8222%" y="181" width="0.1522%" height="15" fill="rgb(217,163,10)"/><text x="7.0722%" y="191.50"></text></g><g><title>core::ptr::write (43 samples, 0.15%)</title><rect x="6.8222%" y="165" width="0.1522%" height="15" fill="rgb(213,25,53)"/><text x="7.0722%" y="175.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (97 samples, 0.34%)</title><rect x="7.4311%" y="325" width="0.3434%" height="15" fill="rgb(252,105,26)"/><text x="7.6811%" y="335.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (96 samples, 0.34%)</title><rect x="7.4347%" y="309" width="0.3399%" height="15" fill="rgb(220,39,43)"/><text x="7.6847%" y="319.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::mul (55 samples, 0.19%)</title><rect x="8.2065%" y="309" width="0.1947%" height="15" fill="rgb(229,68,48)"/><text x="8.4565%" y="319.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (55 samples, 0.19%)</title><rect x="8.2065%" y="293" width="0.1947%" height="15" fill="rgb(252,8,32)"/><text x="8.4565%" y="303.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::sub (33 samples, 0.12%)</title><rect x="8.4012%" y="309" width="0.1168%" height="15" fill="rgb(223,20,43)"/><text x="8.6512%" y="319.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (33 samples, 0.12%)</title><rect x="8.4012%" y="293" width="0.1168%" height="15" fill="rgb(229,81,49)"/><text x="8.6512%" y="303.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (33 samples, 0.12%)</title><rect x="8.4012%" y="277" width="0.1168%" height="15" fill="rgb(236,28,36)"/><text x="8.6512%" y="287.50"></text></g><g><title>rustfft::algorithm::radix4::butterfly_4 (284 samples, 1.01%)</title><rect x="7.7781%" y="325" width="1.0055%" height="15" fill="rgb(249,185,26)"/><text x="8.0281%" y="335.50"></text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::perform_fft (624 samples, 2.21%)</title><rect x="6.9815%" y="341" width="2.2092%" height="15" fill="rgb(249,174,33)"/><text x="7.2315%" y="351.50">r..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (115 samples, 0.41%)</title><rect x="8.7835%" y="325" width="0.4071%" height="15" fill="rgb(233,201,37)"/><text x="9.0335%" y="335.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (115 samples, 0.41%)</title><rect x="8.7835%" y="309" width="0.4071%" height="15" fill="rgb(221,78,26)"/><text x="9.0335%" y="319.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (112 samples, 0.40%)</title><rect x="8.7942%" y="293" width="0.3965%" height="15" fill="rgb(250,127,30)"/><text x="9.0442%" y="303.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (107 samples, 0.38%)</title><rect x="8.8119%" y="277" width="0.3788%" height="15" fill="rgb(230,49,44)"/><text x="9.0619%" y="287.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (73 samples, 0.26%)</title><rect x="8.9322%" y="261" width="0.2584%" height="15" fill="rgb(229,67,23)"/><text x="9.1822%" y="271.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (34 samples, 0.12%)</title><rect x="9.0703%" y="245" width="0.1204%" height="15" fill="rgb(249,83,47)"/><text x="9.3203%" y="255.50"></text></g><g><title>alloc_pages_vma (39 samples, 0.14%)</title><rect x="9.4704%" y="149" width="0.1381%" height="15" fill="rgb(215,43,3)"/><text x="9.7204%" y="159.50"></text></g><g><title>__alloc_pages_nodemask (37 samples, 0.13%)</title><rect x="9.4774%" y="133" width="0.1310%" height="15" fill="rgb(238,154,13)"/><text x="9.7274%" y="143.50"></text></g><g><title>get_page_from_freelist (35 samples, 0.12%)</title><rect x="9.4845%" y="117" width="0.1239%" height="15" fill="rgb(219,56,2)"/><text x="9.7345%" y="127.50"></text></g><g><title>handle_mm_fault (71 samples, 0.25%)</title><rect x="9.4137%" y="197" width="0.2514%" height="15" fill="rgb(233,0,4)"/><text x="9.6637%" y="207.50"></text></g><g><title>__handle_mm_fault (66 samples, 0.23%)</title><rect x="9.4314%" y="181" width="0.2337%" height="15" fill="rgb(235,30,7)"/><text x="9.6814%" y="191.50"></text></g><g><title>do_anonymous_page (59 samples, 0.21%)</title><rect x="9.4562%" y="165" width="0.2089%" height="15" fill="rgb(250,79,13)"/><text x="9.7062%" y="175.50"></text></g><g><title>page_fault (77 samples, 0.27%)</title><rect x="9.3960%" y="261" width="0.2726%" height="15" fill="rgb(211,146,34)"/><text x="9.6460%" y="271.50"></text></g><g><title>do_page_fault (76 samples, 0.27%)</title><rect x="9.3996%" y="245" width="0.2691%" height="15" fill="rgb(228,22,38)"/><text x="9.6496%" y="255.50"></text></g><g><title>__do_page_fault (76 samples, 0.27%)</title><rect x="9.3996%" y="229" width="0.2691%" height="15" fill="rgb(235,168,5)"/><text x="9.6496%" y="239.50"></text></g><g><title>do_user_addr_fault (76 samples, 0.27%)</title><rect x="9.3996%" y="213" width="0.2691%" height="15" fill="rgb(221,155,16)"/><text x="9.6496%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (163 samples, 0.58%)</title><rect x="9.2261%" y="293" width="0.5771%" height="15" fill="rgb(215,215,53)"/><text x="9.4761%" y="303.50"></text></g><g><title>core::ptr::write (150 samples, 0.53%)</title><rect x="9.2721%" y="277" width="0.5310%" height="15" fill="rgb(223,4,10)"/><text x="9.5221%" y="287.50"></text></g><g><title>do_cos (237 samples, 0.84%)</title><rect x="10.2563%" y="213" width="0.8391%" height="15" fill="rgb(234,103,6)"/><text x="10.5063%" y="223.50"></text></g><g><title>do_sin (324 samples, 1.15%)</title><rect x="11.0954%" y="213" width="1.1471%" height="15" fill="rgb(227,97,0)"/><text x="11.3454%" y="223.50"></text></g><g><title>mass::math::fft_mult (1,991 samples, 7.05%)</title><rect x="5.4627%" y="357" width="7.0488%" height="15" fill="rgb(234,150,53)"/><text x="5.7127%" y="367.50">mass::mat..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft (938 samples, 3.32%)</title><rect x="9.1907%" y="341" width="3.3208%" height="15" fill="rgb(228,201,54)"/><text x="9.4407%" y="351.50">rus..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (937 samples, 3.32%)</title><rect x="9.1942%" y="325" width="3.3173%" height="15" fill="rgb(222,22,37)"/><text x="9.4442%" y="335.50">rus..</text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::new (937 samples, 3.32%)</title><rect x="9.1942%" y="309" width="3.3173%" height="15" fill="rgb(237,53,32)"/><text x="9.4442%" y="319.50">rus..</text></g><g><title>rustfft::twiddles::single_twiddle (751 samples, 2.66%)</title><rect x="9.8527%" y="293" width="2.6588%" height="15" fill="rgb(233,25,53)"/><text x="10.1027%" y="303.50">ru..</text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (730 samples, 2.58%)</title><rect x="9.9271%" y="277" width="2.5844%" height="15" fill="rgb(210,40,34)"/><text x="10.1771%" y="287.50">nu..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (730 samples, 2.58%)</title><rect x="9.9271%" y="261" width="2.5844%" height="15" fill="rgb(241,220,44)"/><text x="10.1771%" y="271.50">&lt;f..</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (730 samples, 2.58%)</title><rect x="9.9271%" y="245" width="2.5844%" height="15" fill="rgb(235,28,35)"/><text x="10.1771%" y="255.50">st..</text></g><g><title>__sincos (723 samples, 2.56%)</title><rect x="9.9519%" y="229" width="2.5597%" height="15" fill="rgb(210,56,17)"/><text x="10.2019%" y="239.50">__..</text></g><g><title>reduce_sincos (41 samples, 0.15%)</title><rect x="12.3664%" y="213" width="0.1452%" height="15" fill="rgb(224,130,29)"/><text x="12.6164%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (57 samples, 0.20%)</title><rect x="12.7806%" y="149" width="0.2018%" height="15" fill="rgb(235,212,8)"/><text x="13.0306%" y="159.50"></text></g><g><title>mass::stats::moving_avg (8,046 samples, 28.49%)</title><rect x="12.5150%" y="357" width="28.4854%" height="15" fill="rgb(223,33,50)"/><text x="12.7650%" y="367.50">mass::stats::moving_avg</text></g><g><title>core::iter::traits::iterator::Iterator::collect (8,046 samples, 28.49%)</title><rect x="12.5150%" y="341" width="28.4854%" height="15" fill="rgb(219,149,13)"/><text x="12.7650%" y="351.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8,046 samples, 28.49%)</title><rect x="12.5150%" y="325" width="28.4854%" height="15" fill="rgb(250,156,29)"/><text x="12.7650%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::col..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8,046 samples, 28.49%)</title><rect x="12.5150%" y="309" width="28.4854%" height="15" fill="rgb(216,193,19)"/><text x="12.7650%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIte..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8,046 samples, 28.49%)</title><rect x="12.5150%" y="293" width="28.4854%" height="15" fill="rgb(216,135,14)"/><text x="12.7650%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIte..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8,046 samples, 28.49%)</title><rect x="12.5150%" y="277" width="28.4854%" height="15" fill="rgb(241,47,5)"/><text x="12.7650%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,046 samples, 28.49%)</title><rect x="12.5150%" y="261" width="28.4854%" height="15" fill="rgb(233,42,35)"/><text x="12.7650%" y="271.50">core::iter::traits::iterator::Iterator::for_ea..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,046 samples, 28.49%)</title><rect x="12.5150%" y="245" width="28.4854%" height="15" fill="rgb(231,13,6)"/><text x="12.7650%" y="255.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,046 samples, 28.49%)</title><rect x="12.5150%" y="229" width="28.4854%" height="15" fill="rgb(207,181,40)"/><text x="12.7650%" y="239.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8,042 samples, 28.47%)</title><rect x="12.5292%" y="213" width="28.4713%" height="15" fill="rgb(254,173,49)"/><text x="12.7792%" y="223.50">core::iter::adapters::map_fold::{{closure}}</text></g><g><title>mass::stats::moving_avg::{{closure}} (8,035 samples, 28.45%)</title><rect x="12.5540%" y="197" width="28.4465%" height="15" fill="rgb(221,1,38)"/><text x="12.8040%" y="207.50">mass::stats::moving_avg::{{closure}}</text></g><g><title>mass::stats::mean (8,035 samples, 28.45%)</title><rect x="12.5540%" y="181" width="28.4465%" height="15" fill="rgb(206,124,46)"/><text x="12.8040%" y="191.50">mass::stats::mean</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7,971 samples, 28.22%)</title><rect x="12.7806%" y="165" width="28.2199%" height="15" fill="rgb(249,21,11)"/><text x="13.0306%" y="175.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>mass::stats::mean::{{closure}} (7,914 samples, 28.02%)</title><rect x="12.9824%" y="149" width="28.0181%" height="15" fill="rgb(222,201,40)"/><text x="13.2324%" y="159.50">mass::stats::mean::{{closure}}</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (49 samples, 0.17%)</title><rect x="41.0678%" y="197" width="0.1735%" height="15" fill="rgb(235,61,29)"/><text x="41.3178%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (49 samples, 0.17%)</title><rect x="41.0678%" y="181" width="0.1735%" height="15" fill="rgb(219,207,3)"/><text x="41.3178%" y="191.50"></text></g><g><title>core::ptr::write (49 samples, 0.17%)</title><rect x="41.0678%" y="165" width="0.1735%" height="15" fill="rgb(222,56,46)"/><text x="41.3178%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.21%)</title><rect x="42.8910%" y="117" width="0.2089%" height="15" fill="rgb(239,76,54)"/><text x="43.1410%" y="127.50"></text></g><g><title>mass::stats::e_x2::{{closure}} (7,827 samples, 27.71%)</title><rect x="43.1211%" y="117" width="27.7101%" height="15" fill="rgb(231,124,27)"/><text x="43.3711%" y="127.50">mass::stats::e_x2::{{closure}}</text></g><g><title>mass::stats::e_x2 (8,308 samples, 29.41%)</title><rect x="41.4218%" y="149" width="29.4130%" height="15" fill="rgb(249,195,6)"/><text x="41.6718%" y="159.50">mass::stats::e_x2</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,225 samples, 29.12%)</title><rect x="41.7156%" y="133" width="29.1192%" height="15" fill="rgb(237,174,47)"/><text x="41.9656%" y="143.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (51 samples, 0.18%)</title><rect x="70.8348%" y="117" width="0.1806%" height="15" fill="rgb(206,201,31)"/><text x="71.0848%" y="127.50"></text></g><g><title>mass::stats::var (16,337 samples, 57.84%)</title><rect x="41.2412%" y="165" width="57.8383%" height="15" fill="rgb(231,57,52)"/><text x="41.4912%" y="175.50">mass::stats::var</text></g><g><title>mass::stats::mean (7,978 samples, 28.24%)</title><rect x="70.8348%" y="149" width="28.2447%" height="15" fill="rgb(248,177,22)"/><text x="71.0848%" y="159.50">mass::stats::mean</text></g><g><title>core::iter::traits::iterator::Iterator::fold (7,978 samples, 28.24%)</title><rect x="70.8348%" y="133" width="28.2447%" height="15" fill="rgb(215,211,37)"/><text x="71.0848%" y="143.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>mass::stats::mean::{{closure}} (7,927 samples, 28.06%)</title><rect x="71.0154%" y="117" width="28.0642%" height="15" fill="rgb(241,128,51)"/><text x="71.2654%" y="127.50">mass::stats::mean::{{closure}}</text></g><g><title>mass::stats::moving_std (16,505 samples, 58.43%)</title><rect x="41.0005%" y="357" width="58.4331%" height="15" fill="rgb(227,165,31)"/><text x="41.2505%" y="367.50">mass::stats::moving_std</text></g><g><title>core::iter::traits::iterator::Iterator::collect (16,505 samples, 58.43%)</title><rect x="41.0005%" y="341" width="58.4331%" height="15" fill="rgb(228,167,24)"/><text x="41.2505%" y="351.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16,505 samples, 58.43%)</title><rect x="41.0005%" y="325" width="58.4331%" height="15" fill="rgb(228,143,12)"/><text x="41.2505%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16,505 samples, 58.43%)</title><rect x="41.0005%" y="309" width="58.4331%" height="15" fill="rgb(249,149,8)"/><text x="41.2505%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16,505 samples, 58.43%)</title><rect x="41.0005%" y="293" width="58.4331%" height="15" fill="rgb(243,35,44)"/><text x="41.2505%" y="303.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16,505 samples, 58.43%)</title><rect x="41.0005%" y="277" width="58.4331%" height="15" fill="rgb(246,89,9)"/><text x="41.2505%" y="287.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16,495 samples, 58.40%)</title><rect x="41.0359%" y="261" width="58.3976%" height="15" fill="rgb(233,213,13)"/><text x="41.2859%" y="271.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,495 samples, 58.40%)</title><rect x="41.0359%" y="245" width="58.3976%" height="15" fill="rgb(233,141,41)"/><text x="41.2859%" y="255.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (16,495 samples, 58.40%)</title><rect x="41.0359%" y="229" width="58.3976%" height="15" fill="rgb(239,167,4)"/><text x="41.2859%" y="239.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (16,486 samples, 58.37%)</title><rect x="41.0678%" y="213" width="58.3658%" height="15" fill="rgb(209,217,16)"/><text x="41.3178%" y="223.50">core::iter::adapters::map_fold::{{closure}}</text></g><g><title>mass::stats::moving_std::{{closure}} (16,437 samples, 58.19%)</title><rect x="41.2412%" y="197" width="58.1923%" height="15" fill="rgb(219,88,35)"/><text x="41.4912%" y="207.50">mass::stats::moving_std::{{closure}}</text></g><g><title>mass::stats::std (16,437 samples, 58.19%)</title><rect x="41.2412%" y="181" width="58.1923%" height="15" fill="rgb(220,193,23)"/><text x="41.4912%" y="191.50">mass::stats::std</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (100 samples, 0.35%)</title><rect x="99.0795%" y="165" width="0.3540%" height="15" fill="rgb(230,90,52)"/><text x="99.3295%" y="175.50"></text></g><g><title>mass::mass2 (26,574 samples, 94.08%)</title><rect x="5.3565%" y="373" width="94.0806%" height="15" fill="rgb(252,106,19)"/><text x="5.6065%" y="383.50">mass::mass2</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (26,641 samples, 94.32%)</title><rect x="5.2220%" y="485" width="94.3178%" height="15" fill="rgb(206,74,20)"/><text x="5.4720%" y="495.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (26,641 samples, 94.32%)</title><rect x="5.2220%" y="469" width="94.3178%" height="15" fill="rgb(230,138,44)"/><text x="5.4720%" y="479.50">alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (26,641 samples, 94.32%)</title><rect x="5.2220%" y="453" width="94.3178%" height="15" fill="rgb(235,182,43)"/><text x="5.4720%" y="463.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (26,641 samples, 94.32%)</title><rect x="5.2220%" y="437" width="94.3178%" height="15" fill="rgb(242,16,51)"/><text x="5.4720%" y="447.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (26,641 samples, 94.32%)</title><rect x="5.2220%" y="421" width="94.3178%" height="15" fill="rgb(248,9,4)"/><text x="5.4720%" y="431.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>mass::mass_batch::{{closure}} (26,641 samples, 94.32%)</title><rect x="5.2220%" y="405" width="94.3178%" height="15" fill="rgb(210,31,22)"/><text x="5.4720%" y="415.50">mass::mass_batch::{{closure}}</text></g><g><title>mass::min_subsequence_distance (26,641 samples, 94.32%)</title><rect x="5.2220%" y="389" width="94.3178%" height="15" fill="rgb(239,54,39)"/><text x="5.4720%" y="399.50">mass::min_subsequence_distance</text></g><g><title>mass::math::argmin (29 samples, 0.10%)</title><rect x="99.4371%" y="373" width="0.1027%" height="15" fill="rgb(230,99,41)"/><text x="99.6871%" y="383.50"></text></g><g><title>__libc_start_main (26,669 samples, 94.42%)</title><rect x="5.1972%" y="645" width="94.4169%" height="15" fill="rgb(253,106,12)"/><text x="5.4472%" y="655.50">__libc_start_main</text></g><g><title>main (26,669 samples, 94.42%)</title><rect x="5.1972%" y="629" width="94.4169%" height="15" fill="rgb(213,46,41)"/><text x="5.4472%" y="639.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (26,669 samples, 94.42%)</title><rect x="5.1972%" y="613" width="94.4169%" height="15" fill="rgb(215,133,35)"/><text x="5.4472%" y="623.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (26,669 samples, 94.42%)</title><rect x="5.1972%" y="597" width="94.4169%" height="15" fill="rgb(213,28,5)"/><text x="5.4472%" y="607.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (26,669 samples, 94.42%)</title><rect x="5.1972%" y="581" width="94.4169%" height="15" fill="rgb(215,77,49)"/><text x="5.4472%" y="591.50">main::main</text></g><g><title>mass::mass_batch (26,662 samples, 94.39%)</title><rect x="5.2220%" y="565" width="94.3921%" height="15" fill="rgb(248,100,22)"/><text x="5.4720%" y="575.50">mass::mass_batch</text></g><g><title>core::iter::traits::iterator::Iterator::collect (26,662 samples, 94.39%)</title><rect x="5.2220%" y="549" width="94.3921%" height="15" fill="rgb(208,67,9)"/><text x="5.4720%" y="559.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (26,662 samples, 94.39%)</title><rect x="5.2220%" y="533" width="94.3921%" height="15" fill="rgb(219,133,21)"/><text x="5.4720%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (26,662 samples, 94.39%)</title><rect x="5.2220%" y="517" width="94.3921%" height="15" fill="rgb(246,46,29)"/><text x="5.4720%" y="527.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (26,662 samples, 94.39%)</title><rect x="5.2220%" y="501" width="94.3921%" height="15" fill="rgb(246,185,52)"/><text x="5.4720%" y="511.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>_start (26,670 samples, 94.42%)</title><rect x="5.1972%" y="661" width="94.4204%" height="15" fill="rgb(252,136,11)"/><text x="5.4472%" y="671.50">_start</text></g><g><title>main (28,240 samples, 99.98%)</title><rect x="0.0000%" y="677" width="99.9788%" height="15" fill="rgb(219,138,53)"/><text x="0.2500%" y="687.50">main</text></g><g><title>page_fault (89 samples, 0.32%)</title><rect x="99.6637%" y="661" width="0.3151%" height="15" fill="rgb(211,51,23)"/><text x="99.9137%" y="671.50"></text></g><g><title>all (28,246 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(247,221,28)"/><text x="0.2500%" y="703.50"></text></g></svg></svg>