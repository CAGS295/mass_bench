<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="774" onload="init(evt)" viewBox="0 0 1200 774" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="774" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="757.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="757.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (32 samples, 0.10%)</title><rect x="0.1597%" y="677" width="0.1002%" height="15" fill="rgb(227,0,7)"/><text x="0.4097%" y="687.50"></text></g><g><title>__sincos (41 samples, 0.13%)</title><rect x="0.2724%" y="677" width="0.1284%" height="15" fill="rgb(217,0,24)"/><text x="0.5224%" y="687.50"></text></g><g><title>main::main (54 samples, 0.17%)</title><rect x="0.4602%" y="677" width="0.1691%" height="15" fill="rgb(221,193,54)"/><text x="0.7102%" y="687.50"></text></g><g><title>mass_bench::input_pair (52 samples, 0.16%)</title><rect x="0.4665%" y="661" width="0.1628%" height="15" fill="rgb(248,212,6)"/><text x="0.7165%" y="671.50"></text></g><g><title>mass_bench::load_series (52 samples, 0.16%)</title><rect x="0.4665%" y="645" width="0.1628%" height="15" fill="rgb(208,68,35)"/><text x="0.7165%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (52 samples, 0.16%)</title><rect x="0.4665%" y="629" width="0.1628%" height="15" fill="rgb(232,128,0)"/><text x="0.7165%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (52 samples, 0.16%)</title><rect x="0.4665%" y="613" width="0.1628%" height="15" fill="rgb(207,160,47)"/><text x="0.7165%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (52 samples, 0.16%)</title><rect x="0.4665%" y="597" width="0.1628%" height="15" fill="rgb(228,23,34)"/><text x="0.7165%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (52 samples, 0.16%)</title><rect x="0.4665%" y="581" width="0.1628%" height="15" fill="rgb(218,30,26)"/><text x="0.7165%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (52 samples, 0.16%)</title><rect x="0.4665%" y="565" width="0.1628%" height="15" fill="rgb(220,122,19)"/><text x="0.7165%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (52 samples, 0.16%)</title><rect x="0.4665%" y="549" width="0.1628%" height="15" fill="rgb(250,228,42)"/><text x="0.7165%" y="559.50"></text></g><g><title>core::ptr::write (44 samples, 0.14%)</title><rect x="0.4915%" y="533" width="0.1377%" height="15" fill="rgb(240,193,28)"/><text x="0.7415%" y="543.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (53 samples, 0.17%)</title><rect x="0.8829%" y="485" width="0.1659%" height="15" fill="rgb(216,20,37)"/><text x="1.1329%" y="495.50"></text></g><g><title>core::slice::ascii::is_ascii (53 samples, 0.17%)</title><rect x="0.8829%" y="469" width="0.1659%" height="15" fill="rgb(206,188,39)"/><text x="1.1329%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (52 samples, 0.16%)</title><rect x="0.8860%" y="453" width="0.1628%" height="15" fill="rgb(217,207,13)"/><text x="1.1360%" y="463.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (75 samples, 0.23%)</title><rect x="0.8578%" y="501" width="0.2348%" height="15" fill="rgb(231,73,38)"/><text x="1.1078%" y="511.50"></text></g><g><title>__memmove_avx_unaligned_erms (33 samples, 0.10%)</title><rect x="1.7438%" y="149" width="0.1033%" height="15" fill="rgb(225,20,46)"/><text x="1.9938%" y="159.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (186 samples, 0.58%)</title><rect x="1.5152%" y="165" width="0.5823%" height="15" fill="rgb(210,31,41)"/><text x="1.7652%" y="175.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (222 samples, 0.70%)</title><rect x="1.5059%" y="197" width="0.6950%" height="15" fill="rgb(221,200,47)"/><text x="1.7559%" y="207.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (222 samples, 0.70%)</title><rect x="1.5059%" y="181" width="0.6950%" height="15" fill="rgb(226,26,5)"/><text x="1.7559%" y="191.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (226 samples, 0.71%)</title><rect x="1.4996%" y="293" width="0.7075%" height="15" fill="rgb(249,33,26)"/><text x="1.7496%" y="303.50"></text></g><g><title>flate2::zio::read (226 samples, 0.71%)</title><rect x="1.4996%" y="277" width="0.7075%" height="15" fill="rgb(235,183,28)"/><text x="1.7496%" y="287.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (224 samples, 0.70%)</title><rect x="1.5059%" y="261" width="0.7013%" height="15" fill="rgb(221,5,38)"/><text x="1.7559%" y="271.50"></text></g><g><title>flate2::mem::Decompress::decompress (224 samples, 0.70%)</title><rect x="1.5059%" y="245" width="0.7013%" height="15" fill="rgb(247,18,42)"/><text x="1.7559%" y="255.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (224 samples, 0.70%)</title><rect x="1.5059%" y="229" width="0.7013%" height="15" fill="rgb(241,131,45)"/><text x="1.7559%" y="239.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (224 samples, 0.70%)</title><rect x="1.5059%" y="213" width="0.7013%" height="15" fill="rgb(249,31,29)"/><text x="1.7559%" y="223.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (239 samples, 0.75%)</title><rect x="1.4777%" y="469" width="0.7482%" height="15" fill="rgb(225,111,53)"/><text x="1.7277%" y="479.50"></text></g><g><title>&lt;tar::entry::Entry&lt;R&gt; as std::io::Read&gt;::read (233 samples, 0.73%)</title><rect x="1.4965%" y="453" width="0.7294%" height="15" fill="rgb(238,160,17)"/><text x="1.7465%" y="463.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read (233 samples, 0.73%)</title><rect x="1.4965%" y="437" width="0.7294%" height="15" fill="rgb(214,148,48)"/><text x="1.7465%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (233 samples, 0.73%)</title><rect x="1.4965%" y="421" width="0.7294%" height="15" fill="rgb(232,36,49)"/><text x="1.7465%" y="431.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read::{{closure}} (232 samples, 0.73%)</title><rect x="1.4996%" y="405" width="0.7263%" height="15" fill="rgb(209,103,24)"/><text x="1.7496%" y="415.50"></text></g><g><title>&lt;tar::entry::EntryIo as std::io::Read&gt;::read (232 samples, 0.73%)</title><rect x="1.4996%" y="389" width="0.7263%" height="15" fill="rgb(229,88,8)"/><text x="1.7496%" y="399.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (232 samples, 0.73%)</title><rect x="1.4996%" y="373" width="0.7263%" height="15" fill="rgb(213,181,19)"/><text x="1.7496%" y="383.50"></text></g><g><title>&lt;&amp;tar::archive::ArchiveInner&lt;R&gt; as std::io::Read&gt;::read (232 samples, 0.73%)</title><rect x="1.4996%" y="357" width="0.7263%" height="15" fill="rgb(254,191,54)"/><text x="1.7496%" y="367.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (232 samples, 0.73%)</title><rect x="1.4996%" y="341" width="0.7263%" height="15" fill="rgb(241,83,37)"/><text x="1.7496%" y="351.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (232 samples, 0.73%)</title><rect x="1.4996%" y="325" width="0.7263%" height="15" fill="rgb(233,36,39)"/><text x="1.7496%" y="335.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (232 samples, 0.73%)</title><rect x="1.4996%" y="309" width="0.7263%" height="15" fill="rgb(226,3,54)"/><text x="1.7496%" y="319.50"></text></g><g><title>csv_core::reader::Dfa::get_output (47 samples, 0.15%)</title><rect x="2.7957%" y="437" width="0.1471%" height="15" fill="rgb(245,192,40)"/><text x="3.0457%" y="447.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (311 samples, 0.97%)</title><rect x="2.4357%" y="453" width="0.9736%" height="15" fill="rgb(238,167,29)"/><text x="2.6857%" y="463.50"></text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (144 samples, 0.45%)</title><rect x="2.9585%" y="437" width="0.4508%" height="15" fill="rgb(232,182,51)"/><text x="3.2085%" y="447.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (857 samples, 2.68%)</title><rect x="0.7388%" y="533" width="2.6830%" height="15" fill="rgb(231,60,39)"/><text x="0.9888%" y="543.50">cs..</text></g><g><title>csv::string_record::StringRecord::read (848 samples, 2.65%)</title><rect x="0.7670%" y="517" width="2.6548%" height="15" fill="rgb(208,69,12)"/><text x="1.0170%" y="527.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (744 samples, 2.33%)</title><rect x="1.0926%" y="501" width="2.3292%" height="15" fill="rgb(235,93,37)"/><text x="1.3426%" y="511.50">c..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (714 samples, 2.24%)</title><rect x="1.1865%" y="485" width="2.2353%" height="15" fill="rgb(213,116,39)"/><text x="1.4365%" y="495.50">c..</text></g><g><title>csv_core::reader::Reader::read_record (338 samples, 1.06%)</title><rect x="2.3637%" y="469" width="1.0582%" height="15" fill="rgb(222,207,29)"/><text x="2.6137%" y="479.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (58 samples, 0.18%)</title><rect x="3.7819%" y="341" width="0.1816%" height="15" fill="rgb(206,96,30)"/><text x="4.0319%" y="351.50"></text></g><g><title>core::num::dec2flt::num::from_str_unchecked (32 samples, 0.10%)</title><rect x="3.9760%" y="341" width="0.1002%" height="15" fill="rgb(218,138,4)"/><text x="4.2260%" y="351.50"></text></g><g><title>core::num::dec2flt::algorithm::fast_path (141 samples, 0.44%)</title><rect x="3.6472%" y="357" width="0.4414%" height="15" fill="rgb(250,191,14)"/><text x="3.8972%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (44 samples, 0.14%)</title><rect x="4.1168%" y="341" width="0.1377%" height="15" fill="rgb(239,60,40)"/><text x="4.3668%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.14%)</title><rect x="4.1168%" y="325" width="0.1377%" height="15" fill="rgb(206,27,48)"/><text x="4.3668%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (44 samples, 0.14%)</title><rect x="4.1168%" y="309" width="0.1377%" height="15" fill="rgb(225,35,8)"/><text x="4.3668%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (33 samples, 0.10%)</title><rect x="4.1513%" y="293" width="0.1033%" height="15" fill="rgb(250,213,24)"/><text x="4.4013%" y="303.50"></text></g><g><title>core::num::dec2flt::simplify (56 samples, 0.18%)</title><rect x="4.0887%" y="357" width="0.1753%" height="15" fill="rgb(247,123,22)"/><text x="4.3387%" y="367.50"></text></g><g><title>core::num::dec2flt::convert (209 samples, 0.65%)</title><rect x="3.6285%" y="373" width="0.6543%" height="15" fill="rgb(231,138,38)"/><text x="3.8785%" y="383.50"></text></g><g><title>core::num::dec2flt::parse::eat_digits (41 samples, 0.13%)</title><rect x="4.3360%" y="357" width="0.1284%" height="15" fill="rgb(231,145,46)"/><text x="4.5860%" y="367.50"></text></g><g><title>mass_bench::load_series (1,221 samples, 3.82%)</title><rect x="0.6480%" y="677" width="3.8226%" height="15" fill="rgb(251,118,11)"/><text x="0.8980%" y="687.50">mass..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,221 samples, 3.82%)</title><rect x="0.6480%" y="661" width="3.8226%" height="15" fill="rgb(217,147,25)"/><text x="0.8980%" y="671.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,221 samples, 3.82%)</title><rect x="0.6480%" y="645" width="3.8226%" height="15" fill="rgb(247,81,37)"/><text x="0.8980%" y="655.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,221 samples, 3.82%)</title><rect x="0.6480%" y="629" width="3.8226%" height="15" fill="rgb(209,12,38)"/><text x="0.8980%" y="639.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,221 samples, 3.82%)</title><rect x="0.6480%" y="613" width="3.8226%" height="15" fill="rgb(227,1,9)"/><text x="0.8980%" y="623.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,221 samples, 3.82%)</title><rect x="0.6480%" y="597" width="3.8226%" height="15" fill="rgb(248,47,43)"/><text x="0.8980%" y="607.50">&lt;all..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1,221 samples, 3.82%)</title><rect x="0.6480%" y="581" width="3.8226%" height="15" fill="rgb(221,10,30)"/><text x="0.8980%" y="591.50">allo..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,221 samples, 3.82%)</title><rect x="0.6480%" y="565" width="3.8226%" height="15" fill="rgb(210,229,1)"/><text x="0.8980%" y="575.50">&lt;cor..</text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,203 samples, 3.77%)</title><rect x="0.7044%" y="549" width="3.7662%" height="15" fill="rgb(222,148,37)"/><text x="0.9544%" y="559.50">&lt;csv..</text></g><g><title>csv::string_record::StringRecord::deserialize (335 samples, 1.05%)</title><rect x="3.4218%" y="533" width="1.0488%" height="15" fill="rgb(234,67,33)"/><text x="3.6718%" y="543.50"></text></g><g><title>csv::deserializer::deserialize_string_record (335 samples, 1.05%)</title><rect x="3.4218%" y="517" width="1.0488%" height="15" fill="rgb(247,98,35)"/><text x="3.6718%" y="527.50"></text></g><g><title>mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize (323 samples, 1.01%)</title><rect x="3.4594%" y="501" width="1.0112%" height="15" fill="rgb(247,138,52)"/><text x="3.7094%" y="511.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (323 samples, 1.01%)</title><rect x="3.4594%" y="485" width="1.0112%" height="15" fill="rgb(213,79,30)"/><text x="3.7094%" y="495.50"></text></g><g><title>&lt;mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize::__Visitor&lt;T&gt; as serde::de::Visitor&gt;::visit_newtype_struct (323 samples, 1.01%)</title><rect x="3.4594%" y="469" width="1.0112%" height="15" fill="rgb(246,177,23)"/><text x="3.7094%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (323 samples, 1.01%)</title><rect x="3.4594%" y="453" width="1.0112%" height="15" fill="rgb(230,62,27)"/><text x="3.7094%" y="463.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (323 samples, 1.01%)</title><rect x="3.4594%" y="437" width="1.0112%" height="15" fill="rgb(216,154,8)"/><text x="3.7094%" y="447.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (287 samples, 0.90%)</title><rect x="3.5721%" y="421" width="0.8985%" height="15" fill="rgb(244,35,45)"/><text x="3.8221%" y="431.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::FromStr for f64&gt;::from_str (287 samples, 0.90%)</title><rect x="3.5721%" y="405" width="0.8985%" height="15" fill="rgb(251,115,12)"/><text x="3.8221%" y="415.50"></text></g><g><title>core::num::dec2flt::dec2flt (287 samples, 0.90%)</title><rect x="3.5721%" y="389" width="0.8985%" height="15" fill="rgb(240,54,50)"/><text x="3.8221%" y="399.50"></text></g><g><title>core::num::dec2flt::parse::parse_decimal (56 samples, 0.18%)</title><rect x="4.2953%" y="373" width="0.1753%" height="15" fill="rgb(233,84,52)"/><text x="4.5453%" y="383.50"></text></g><g><title>[unknown] (1,406 samples, 4.40%)</title><rect x="0.1597%" y="693" width="4.4017%" height="15" fill="rgb(207,117,47)"/><text x="0.4097%" y="703.50">[unkn..</text></g><g><title>do_anonymous_page (49 samples, 0.15%)</title><rect x="4.7054%" y="229" width="0.1534%" height="15" fill="rgb(249,43,39)"/><text x="4.9554%" y="239.50"></text></g><g><title>do_user_addr_fault (62 samples, 0.19%)</title><rect x="4.6710%" y="277" width="0.1941%" height="15" fill="rgb(209,38,44)"/><text x="4.9210%" y="287.50"></text></g><g><title>handle_mm_fault (59 samples, 0.18%)</title><rect x="4.6804%" y="261" width="0.1847%" height="15" fill="rgb(236,212,23)"/><text x="4.9304%" y="271.50"></text></g><g><title>__handle_mm_fault (57 samples, 0.18%)</title><rect x="4.6866%" y="245" width="0.1784%" height="15" fill="rgb(242,79,21)"/><text x="4.9366%" y="255.50"></text></g><g><title>page_fault (67 samples, 0.21%)</title><rect x="4.6584%" y="325" width="0.2098%" height="15" fill="rgb(211,96,35)"/><text x="4.9084%" y="335.50"></text></g><g><title>do_page_fault (64 samples, 0.20%)</title><rect x="4.6678%" y="309" width="0.2004%" height="15" fill="rgb(253,215,40)"/><text x="4.9178%" y="319.50"></text></g><g><title>__do_page_fault (64 samples, 0.20%)</title><rect x="4.6678%" y="293" width="0.2004%" height="15" fill="rgb(211,81,21)"/><text x="4.9178%" y="303.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (34 samples, 0.11%)</title><rect x="4.8682%" y="325" width="0.1064%" height="15" fill="rgb(208,190,38)"/><text x="5.1182%" y="335.50"></text></g><g><title>prepare_exit_to_usermode (34 samples, 0.11%)</title><rect x="4.8682%" y="309" width="0.1064%" height="15" fill="rgb(235,213,38)"/><text x="5.1182%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_with (131 samples, 0.41%)</title><rect x="4.5896%" y="357" width="0.4101%" height="15" fill="rgb(237,122,38)"/><text x="4.8396%" y="367.50"></text></g><g><title>core::ptr::write (131 samples, 0.41%)</title><rect x="4.5896%" y="341" width="0.4101%" height="15" fill="rgb(244,218,35)"/><text x="4.8396%" y="351.50"></text></g><g><title>alloc::vec::from_elem (139 samples, 0.44%)</title><rect x="4.5896%" y="389" width="0.4352%" height="15" fill="rgb(240,68,47)"/><text x="4.8396%" y="399.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (139 samples, 0.44%)</title><rect x="4.5896%" y="373" width="0.4352%" height="15" fill="rgb(210,16,53)"/><text x="4.8396%" y="383.50"></text></g><g><title>clear_page_erms (46 samples, 0.14%)</title><rect x="5.4286%" y="37" width="0.1440%" height="15" fill="rgb(235,124,12)"/><text x="5.6786%" y="47.50"></text></g><g><title>__alloc_pages_nodemask (63 samples, 0.20%)</title><rect x="5.4192%" y="69" width="0.1972%" height="15" fill="rgb(224,169,11)"/><text x="5.6692%" y="79.50"></text></g><g><title>get_page_from_freelist (61 samples, 0.19%)</title><rect x="5.4255%" y="53" width="0.1910%" height="15" fill="rgb(250,166,2)"/><text x="5.6755%" y="63.50"></text></g><g><title>alloc_pages_vma (68 samples, 0.21%)</title><rect x="5.4161%" y="85" width="0.2129%" height="15" fill="rgb(242,216,29)"/><text x="5.6661%" y="95.50"></text></g><g><title>do_anonymous_page (112 samples, 0.35%)</title><rect x="5.4035%" y="101" width="0.3506%" height="15" fill="rgb(230,116,27)"/><text x="5.6535%" y="111.50"></text></g><g><title>handle_mm_fault (128 samples, 0.40%)</title><rect x="5.3597%" y="133" width="0.4007%" height="15" fill="rgb(228,99,48)"/><text x="5.6097%" y="143.50"></text></g><g><title>__handle_mm_fault (125 samples, 0.39%)</title><rect x="5.3691%" y="117" width="0.3913%" height="15" fill="rgb(253,11,6)"/><text x="5.6191%" y="127.50"></text></g><g><title>do_user_addr_fault (133 samples, 0.42%)</title><rect x="5.3472%" y="149" width="0.4164%" height="15" fill="rgb(247,143,39)"/><text x="5.5972%" y="159.50"></text></g><g><title>page_fault (138 samples, 0.43%)</title><rect x="5.3378%" y="197" width="0.4320%" height="15" fill="rgb(236,97,10)"/><text x="5.5878%" y="207.50"></text></g><g><title>do_page_fault (136 samples, 0.43%)</title><rect x="5.3441%" y="181" width="0.4258%" height="15" fill="rgb(233,208,19)"/><text x="5.5941%" y="191.50"></text></g><g><title>__do_page_fault (135 samples, 0.42%)</title><rect x="5.3472%" y="165" width="0.4226%" height="15" fill="rgb(216,164,2)"/><text x="5.5972%" y="175.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (52 samples, 0.16%)</title><rect x="5.7698%" y="197" width="0.1628%" height="15" fill="rgb(220,129,5)"/><text x="6.0198%" y="207.50"></text></g><g><title>prepare_exit_to_usermode (50 samples, 0.16%)</title><rect x="5.7761%" y="181" width="0.1565%" height="15" fill="rgb(242,17,10)"/><text x="6.0261%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (287 samples, 0.90%)</title><rect x="5.0905%" y="245" width="0.8985%" height="15" fill="rgb(242,107,0)"/><text x="5.3405%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (287 samples, 0.90%)</title><rect x="5.0905%" y="229" width="0.8985%" height="15" fill="rgb(251,28,31)"/><text x="5.3405%" y="239.50"></text></g><g><title>core::ptr::write (287 samples, 0.90%)</title><rect x="5.0905%" y="213" width="0.8985%" height="15" fill="rgb(233,223,10)"/><text x="5.3405%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (328 samples, 1.03%)</title><rect x="5.0247%" y="389" width="1.0269%" height="15" fill="rgb(215,21,27)"/><text x="5.2747%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (328 samples, 1.03%)</title><rect x="5.0247%" y="373" width="1.0269%" height="15" fill="rgb(232,23,21)"/><text x="5.2747%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (328 samples, 1.03%)</title><rect x="5.0247%" y="357" width="1.0269%" height="15" fill="rgb(244,5,23)"/><text x="5.2747%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (328 samples, 1.03%)</title><rect x="5.0247%" y="341" width="1.0269%" height="15" fill="rgb(226,81,46)"/><text x="5.2747%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (328 samples, 1.03%)</title><rect x="5.0247%" y="325" width="1.0269%" height="15" fill="rgb(247,70,30)"/><text x="5.2747%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (316 samples, 0.99%)</title><rect x="5.0623%" y="309" width="0.9893%" height="15" fill="rgb(212,68,19)"/><text x="5.3123%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (316 samples, 0.99%)</title><rect x="5.0623%" y="293" width="0.9893%" height="15" fill="rgb(240,187,13)"/><text x="5.3123%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (316 samples, 0.99%)</title><rect x="5.0623%" y="277" width="0.9893%" height="15" fill="rgb(223,113,26)"/><text x="5.3123%" y="287.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (307 samples, 0.96%)</title><rect x="5.0905%" y="261" width="0.9611%" height="15" fill="rgb(206,192,2)"/><text x="5.3405%" y="271.50"></text></g><g><title>tlb_finish_mmu (34 samples, 0.11%)</title><rect x="6.0735%" y="101" width="0.1064%" height="15" fill="rgb(241,108,4)"/><text x="6.3235%" y="111.50"></text></g><g><title>tlb_flush_mmu (34 samples, 0.11%)</title><rect x="6.0735%" y="85" width="0.1064%" height="15" fill="rgb(247,173,49)"/><text x="6.3235%" y="95.50"></text></g><g><title>free_pages_and_swap_cache (34 samples, 0.11%)</title><rect x="6.0735%" y="69" width="0.1064%" height="15" fill="rgb(224,114,35)"/><text x="6.3235%" y="79.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (67 samples, 0.21%)</title><rect x="6.0547%" y="357" width="0.2098%" height="15" fill="rgb(245,159,27)"/><text x="6.3047%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (67 samples, 0.21%)</title><rect x="6.0547%" y="341" width="0.2098%" height="15" fill="rgb(245,172,44)"/><text x="6.3047%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (67 samples, 0.21%)</title><rect x="6.0547%" y="325" width="0.2098%" height="15" fill="rgb(236,23,11)"/><text x="6.3047%" y="335.50"></text></g><g><title>__rdl_dealloc (67 samples, 0.21%)</title><rect x="6.0547%" y="309" width="0.2098%" height="15" fill="rgb(205,117,38)"/><text x="6.3047%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (67 samples, 0.21%)</title><rect x="6.0547%" y="293" width="0.2098%" height="15" fill="rgb(237,72,25)"/><text x="6.3047%" y="303.50"></text></g><g><title>_int_free (67 samples, 0.21%)</title><rect x="6.0547%" y="277" width="0.2098%" height="15" fill="rgb(244,70,9)"/><text x="6.3047%" y="287.50"></text></g><g><title>systrim (66 samples, 0.21%)</title><rect x="6.0579%" y="261" width="0.2066%" height="15" fill="rgb(217,125,39)"/><text x="6.3079%" y="271.50"></text></g><g><title>__GI___default_morecore (66 samples, 0.21%)</title><rect x="6.0579%" y="245" width="0.2066%" height="15" fill="rgb(235,36,10)"/><text x="6.3079%" y="255.50"></text></g><g><title>__GI___sbrk (66 samples, 0.21%)</title><rect x="6.0579%" y="229" width="0.2066%" height="15" fill="rgb(251,123,47)"/><text x="6.3079%" y="239.50"></text></g><g><title>__GI___sbrk (66 samples, 0.21%)</title><rect x="6.0579%" y="213" width="0.2066%" height="15" fill="rgb(221,13,13)"/><text x="6.3079%" y="223.50"></text></g><g><title>__brk (66 samples, 0.21%)</title><rect x="6.0579%" y="197" width="0.2066%" height="15" fill="rgb(238,131,9)"/><text x="6.3079%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (65 samples, 0.20%)</title><rect x="6.0610%" y="181" width="0.2035%" height="15" fill="rgb(211,50,8)"/><text x="6.3110%" y="191.50"></text></g><g><title>do_syscall_64 (65 samples, 0.20%)</title><rect x="6.0610%" y="165" width="0.2035%" height="15" fill="rgb(245,182,24)"/><text x="6.3110%" y="175.50"></text></g><g><title>__x64_sys_brk (64 samples, 0.20%)</title><rect x="6.0641%" y="149" width="0.2004%" height="15" fill="rgb(242,14,37)"/><text x="6.3141%" y="159.50"></text></g><g><title>__do_munmap (64 samples, 0.20%)</title><rect x="6.0641%" y="133" width="0.2004%" height="15" fill="rgb(246,228,12)"/><text x="6.3141%" y="143.50"></text></g><g><title>unmap_region (61 samples, 0.19%)</title><rect x="6.0735%" y="117" width="0.1910%" height="15" fill="rgb(213,55,15)"/><text x="6.3235%" y="127.50"></text></g><g><title>_int_free (40 samples, 0.13%)</title><rect x="6.2707%" y="197" width="0.1252%" height="15" fill="rgb(209,9,3)"/><text x="6.5207%" y="207.50"></text></g><g><title>systrim (38 samples, 0.12%)</title><rect x="6.2770%" y="181" width="0.1190%" height="15" fill="rgb(230,59,30)"/><text x="6.5270%" y="191.50"></text></g><g><title>__GI___default_morecore (37 samples, 0.12%)</title><rect x="6.2801%" y="165" width="0.1158%" height="15" fill="rgb(209,121,21)"/><text x="6.5301%" y="175.50"></text></g><g><title>__GI___sbrk (36 samples, 0.11%)</title><rect x="6.2833%" y="149" width="0.1127%" height="15" fill="rgb(220,109,13)"/><text x="6.5333%" y="159.50"></text></g><g><title>__GI___sbrk (36 samples, 0.11%)</title><rect x="6.2833%" y="133" width="0.1127%" height="15" fill="rgb(232,18,1)"/><text x="6.5333%" y="143.50"></text></g><g><title>__brk (36 samples, 0.11%)</title><rect x="6.2833%" y="117" width="0.1127%" height="15" fill="rgb(215,41,42)"/><text x="6.5333%" y="127.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (36 samples, 0.11%)</title><rect x="6.2833%" y="101" width="0.1127%" height="15" fill="rgb(224,123,36)"/><text x="6.5333%" y="111.50"></text></g><g><title>do_syscall_64 (36 samples, 0.11%)</title><rect x="6.2833%" y="85" width="0.1127%" height="15" fill="rgb(240,125,3)"/><text x="6.5333%" y="95.50"></text></g><g><title>__x64_sys_brk (35 samples, 0.11%)</title><rect x="6.2864%" y="69" width="0.1096%" height="15" fill="rgb(205,98,50)"/><text x="6.5364%" y="79.50"></text></g><g><title>__do_munmap (35 samples, 0.11%)</title><rect x="6.2864%" y="53" width="0.1096%" height="15" fill="rgb(205,185,37)"/><text x="6.5364%" y="63.50"></text></g><g><title>core::ptr::drop_in_place (111 samples, 0.35%)</title><rect x="6.0516%" y="389" width="0.3475%" height="15" fill="rgb(238,207,15)"/><text x="6.3016%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (110 samples, 0.34%)</title><rect x="6.0547%" y="373" width="0.3444%" height="15" fill="rgb(213,199,42)"/><text x="6.3047%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (43 samples, 0.13%)</title><rect x="6.2645%" y="357" width="0.1346%" height="15" fill="rgb(235,201,11)"/><text x="6.5145%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (43 samples, 0.13%)</title><rect x="6.2645%" y="341" width="0.1346%" height="15" fill="rgb(207,46,11)"/><text x="6.5145%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.13%)</title><rect x="6.2645%" y="325" width="0.1346%" height="15" fill="rgb(241,35,35)"/><text x="6.5145%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (43 samples, 0.13%)</title><rect x="6.2645%" y="309" width="0.1346%" height="15" fill="rgb(243,32,47)"/><text x="6.5145%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (43 samples, 0.13%)</title><rect x="6.2645%" y="293" width="0.1346%" height="15" fill="rgb(247,202,23)"/><text x="6.5145%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (43 samples, 0.13%)</title><rect x="6.2645%" y="277" width="0.1346%" height="15" fill="rgb(219,102,11)"/><text x="6.5145%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (43 samples, 0.13%)</title><rect x="6.2645%" y="261" width="0.1346%" height="15" fill="rgb(243,110,44)"/><text x="6.5145%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (43 samples, 0.13%)</title><rect x="6.2645%" y="245" width="0.1346%" height="15" fill="rgb(222,74,54)"/><text x="6.5145%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (41 samples, 0.13%)</title><rect x="6.2707%" y="229" width="0.1284%" height="15" fill="rgb(216,99,12)"/><text x="6.5207%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 0.13%)</title><rect x="6.2707%" y="213" width="0.1284%" height="15" fill="rgb(226,22,26)"/><text x="6.5207%" y="223.50"></text></g><g><title>mass::math::dist (35 samples, 0.11%)</title><rect x="6.3991%" y="389" width="0.1096%" height="15" fill="rgb(217,163,10)"/><text x="6.6491%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (35 samples, 0.11%)</title><rect x="6.3991%" y="373" width="0.1096%" height="15" fill="rgb(213,25,53)"/><text x="6.6491%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (35 samples, 0.11%)</title><rect x="6.3991%" y="357" width="0.1096%" height="15" fill="rgb(252,105,26)"/><text x="6.6491%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 0.11%)</title><rect x="6.3991%" y="341" width="0.1096%" height="15" fill="rgb(220,39,43)"/><text x="6.6491%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (35 samples, 0.11%)</title><rect x="6.3991%" y="325" width="0.1096%" height="15" fill="rgb(229,68,48)"/><text x="6.6491%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (35 samples, 0.11%)</title><rect x="6.3991%" y="309" width="0.1096%" height="15" fill="rgb(252,8,32)"/><text x="6.6491%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (35 samples, 0.11%)</title><rect x="6.3991%" y="293" width="0.1096%" height="15" fill="rgb(223,20,43)"/><text x="6.6491%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.11%)</title><rect x="6.3991%" y="277" width="0.1096%" height="15" fill="rgb(229,81,49)"/><text x="6.6491%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.11%)</title><rect x="6.3991%" y="261" width="0.1096%" height="15" fill="rgb(236,28,36)"/><text x="6.6491%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (35 samples, 0.11%)</title><rect x="6.3991%" y="245" width="0.1096%" height="15" fill="rgb(249,185,26)"/><text x="6.6491%" y="255.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (34 samples, 0.11%)</title><rect x="6.4022%" y="229" width="0.1064%" height="15" fill="rgb(249,174,33)"/><text x="6.6522%" y="239.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (34 samples, 0.11%)</title><rect x="6.4022%" y="213" width="0.1064%" height="15" fill="rgb(233,201,37)"/><text x="6.6522%" y="223.50"></text></g><g><title>mass::math::dist::{{closure}} (34 samples, 0.11%)</title><rect x="6.4022%" y="197" width="0.1064%" height="15" fill="rgb(221,78,26)"/><text x="6.6522%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (50 samples, 0.16%)</title><rect x="6.5087%" y="373" width="0.1565%" height="15" fill="rgb(250,127,30)"/><text x="6.7587%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (50 samples, 0.16%)</title><rect x="6.5087%" y="357" width="0.1565%" height="15" fill="rgb(230,49,44)"/><text x="6.7587%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (32 samples, 0.10%)</title><rect x="6.5650%" y="341" width="0.1002%" height="15" fill="rgb(229,67,23)"/><text x="6.8150%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (32 samples, 0.10%)</title><rect x="6.5650%" y="325" width="0.1002%" height="15" fill="rgb(249,83,47)"/><text x="6.8150%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (32 samples, 0.10%)</title><rect x="6.5650%" y="309" width="0.1002%" height="15" fill="rgb(215,43,3)"/><text x="6.8150%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (32 samples, 0.10%)</title><rect x="6.5650%" y="293" width="0.1002%" height="15" fill="rgb(238,154,13)"/><text x="6.8150%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (32 samples, 0.10%)</title><rect x="6.5650%" y="277" width="0.1002%" height="15" fill="rgb(219,56,2)"/><text x="6.8150%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (32 samples, 0.10%)</title><rect x="6.5650%" y="261" width="0.1002%" height="15" fill="rgb(233,0,4)"/><text x="6.8150%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (32 samples, 0.10%)</title><rect x="6.5650%" y="245" width="0.1002%" height="15" fill="rgb(235,30,7)"/><text x="6.8150%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (32 samples, 0.10%)</title><rect x="6.5650%" y="229" width="0.1002%" height="15" fill="rgb(250,79,13)"/><text x="6.8150%" y="239.50"></text></g><g><title>core::ptr::write (32 samples, 0.10%)</title><rect x="6.5650%" y="213" width="0.1002%" height="15" fill="rgb(211,146,34)"/><text x="6.8150%" y="223.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.11%)</title><rect x="6.6652%" y="245" width="0.1127%" height="15" fill="rgb(228,22,38)"/><text x="6.9152%" y="255.50"></text></g><g><title>core::ptr::read (36 samples, 0.11%)</title><rect x="6.6652%" y="229" width="0.1127%" height="15" fill="rgb(235,168,5)"/><text x="6.9152%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (36 samples, 0.11%)</title><rect x="6.6652%" y="213" width="0.1127%" height="15" fill="rgb(221,155,16)"/><text x="6.9152%" y="223.50"></text></g><g><title>mass::stats::append (89 samples, 0.28%)</title><rect x="6.5087%" y="389" width="0.2786%" height="15" fill="rgb(215,215,53)"/><text x="6.7587%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (39 samples, 0.12%)</title><rect x="6.6652%" y="373" width="0.1221%" height="15" fill="rgb(223,4,10)"/><text x="6.9152%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (39 samples, 0.12%)</title><rect x="6.6652%" y="357" width="0.1221%" height="15" fill="rgb(234,103,6)"/><text x="6.9152%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (39 samples, 0.12%)</title><rect x="6.6652%" y="341" width="0.1221%" height="15" fill="rgb(227,97,0)"/><text x="6.9152%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (39 samples, 0.12%)</title><rect x="6.6652%" y="325" width="0.1221%" height="15" fill="rgb(234,150,53)"/><text x="6.9152%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (39 samples, 0.12%)</title><rect x="6.6652%" y="309" width="0.1221%" height="15" fill="rgb(228,201,54)"/><text x="6.9152%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (39 samples, 0.12%)</title><rect x="6.6652%" y="293" width="0.1221%" height="15" fill="rgb(222,22,37)"/><text x="6.9152%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 0.12%)</title><rect x="6.6652%" y="277" width="0.1221%" height="15" fill="rgb(237,53,32)"/><text x="6.9152%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (39 samples, 0.12%)</title><rect x="6.6652%" y="261" width="0.1221%" height="15" fill="rgb(233,25,53)"/><text x="6.9152%" y="271.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (37 samples, 0.12%)</title><rect x="7.1098%" y="181" width="0.1158%" height="15" fill="rgb(210,40,34)"/><text x="7.3598%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8,166 samples, 25.57%)</title><rect x="6.7936%" y="293" width="25.5651%" height="15" fill="rgb(241,220,44)"/><text x="7.0436%" y="303.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8,166 samples, 25.57%)</title><rect x="6.7936%" y="277" width="25.5651%" height="15" fill="rgb(235,28,35)"/><text x="7.0436%" y="287.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,166 samples, 25.57%)</title><rect x="6.7936%" y="261" width="25.5651%" height="15" fill="rgb(210,56,17)"/><text x="7.0436%" y="271.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8,157 samples, 25.54%)</title><rect x="6.8217%" y="245" width="25.5369%" height="15" fill="rgb(224,130,29)"/><text x="7.0717%" y="255.50">core::iter::adapters::map_fold::{{closure..</text></g><g><title>mass::stats::moving_avg::{{closure}} (8,151 samples, 25.52%)</title><rect x="6.8405%" y="229" width="25.5181%" height="15" fill="rgb(235,212,8)"/><text x="7.0905%" y="239.50">mass::stats::moving_avg::{{closure}}</text></g><g><title>mass::stats::mean (8,151 samples, 25.52%)</title><rect x="6.8405%" y="213" width="25.5181%" height="15" fill="rgb(223,33,50)"/><text x="7.0905%" y="223.50">mass::stats::mean</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,065 samples, 25.25%)</title><rect x="7.1098%" y="197" width="25.2489%" height="15" fill="rgb(219,149,13)"/><text x="7.3598%" y="207.50">core::iter::traits::iterator::Iterator::..</text></g><g><title>mass::stats::mean::{{closure}} (8,028 samples, 25.13%)</title><rect x="7.2256%" y="181" width="25.1331%" height="15" fill="rgb(250,156,29)"/><text x="7.4756%" y="191.50">mass::stats::mean::{{closure}}</text></g><g><title>mass::stats::moving_avg (8,168 samples, 25.57%)</title><rect x="6.7904%" y="389" width="25.5713%" height="15" fill="rgb(216,193,19)"/><text x="7.0404%" y="399.50">mass::stats::moving_avg</text></g><g><title>core::iter::traits::iterator::Iterator::collect (8,168 samples, 25.57%)</title><rect x="6.7904%" y="373" width="25.5713%" height="15" fill="rgb(216,135,14)"/><text x="7.0404%" y="383.50">core::iter::traits::iterator::Iterator::c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8,168 samples, 25.57%)</title><rect x="6.7904%" y="357" width="25.5713%" height="15" fill="rgb(241,47,5)"/><text x="7.0404%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8,168 samples, 25.57%)</title><rect x="6.7904%" y="341" width="25.5713%" height="15" fill="rgb(233,42,35)"/><text x="7.0404%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8,168 samples, 25.57%)</title><rect x="6.7904%" y="325" width="25.5713%" height="15" fill="rgb(231,13,6)"/><text x="7.0404%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8,168 samples, 25.57%)</title><rect x="6.7904%" y="309" width="25.5713%" height="15" fill="rgb(207,181,40)"/><text x="7.0404%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecEx..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (48 samples, 0.15%)</title><rect x="33.9929%" y="149" width="0.1503%" height="15" fill="rgb(254,173,49)"/><text x="34.2429%" y="159.50"></text></g><g><title>mass::stats::e_x2::{{closure}} (7,887 samples, 24.69%)</title><rect x="34.1463%" y="149" width="24.6916%" height="15" fill="rgb(221,1,38)"/><text x="34.3963%" y="159.50">mass::stats::e_x2::{{closure}}</text></g><g><title>mass::stats::e_x2 (8,395 samples, 26.28%)</title><rect x="32.5841%" y="181" width="26.2820%" height="15" fill="rgb(206,124,46)"/><text x="32.8341%" y="191.50">mass::stats::e_x2</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,305 samples, 26.00%)</title><rect x="32.8658%" y="165" width="26.0003%" height="15" fill="rgb(249,21,11)"/><text x="33.1158%" y="175.50">core::iter::traits::iterator::Iterator::fo..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (47 samples, 0.15%)</title><rect x="58.8661%" y="149" width="0.1471%" height="15" fill="rgb(222,201,40)"/><text x="59.1161%" y="159.50"></text></g><g><title>mass::stats::var (16,566 samples, 51.86%)</title><rect x="32.4150%" y="197" width="51.8628%" height="15" fill="rgb(235,61,29)"/><text x="32.6650%" y="207.50">mass::stats::var</text></g><g><title>mass::stats::mean (8,117 samples, 25.41%)</title><rect x="58.8661%" y="181" width="25.4117%" height="15" fill="rgb(219,207,3)"/><text x="59.1161%" y="191.50">mass::stats::mean</text></g><g><title>core::iter::traits::iterator::Iterator::fold (8,117 samples, 25.41%)</title><rect x="58.8661%" y="165" width="25.4117%" height="15" fill="rgb(222,56,46)"/><text x="59.1161%" y="175.50">core::iter::traits::iterator::Iterator::f..</text></g><g><title>mass::stats::mean::{{closure}} (8,070 samples, 25.26%)</title><rect x="59.0132%" y="149" width="25.2645%" height="15" fill="rgb(239,76,54)"/><text x="59.2632%" y="159.50">mass::stats::mean::{{closure}}</text></g><g><title>mass::stats::moving_std (16,681 samples, 52.22%)</title><rect x="32.3618%" y="389" width="52.2228%" height="15" fill="rgb(231,124,27)"/><text x="32.6118%" y="399.50">mass::stats::moving_std</text></g><g><title>core::iter::traits::iterator::Iterator::collect (16,681 samples, 52.22%)</title><rect x="32.3618%" y="373" width="52.2228%" height="15" fill="rgb(249,195,6)"/><text x="32.6118%" y="383.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (16,681 samples, 52.22%)</title><rect x="32.3618%" y="357" width="52.2228%" height="15" fill="rgb(237,174,47)"/><text x="32.6118%" y="367.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16,681 samples, 52.22%)</title><rect x="32.3618%" y="341" width="52.2228%" height="15" fill="rgb(206,201,31)"/><text x="32.6118%" y="351.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (16,681 samples, 52.22%)</title><rect x="32.3618%" y="325" width="52.2228%" height="15" fill="rgb(231,57,52)"/><text x="32.6118%" y="335.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16,681 samples, 52.22%)</title><rect x="32.3618%" y="309" width="52.2228%" height="15" fill="rgb(248,177,22)"/><text x="32.6118%" y="319.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (16,681 samples, 52.22%)</title><rect x="32.3618%" y="293" width="52.2228%" height="15" fill="rgb(215,211,37)"/><text x="32.6118%" y="303.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16,681 samples, 52.22%)</title><rect x="32.3618%" y="277" width="52.2228%" height="15" fill="rgb(241,128,51)"/><text x="32.6118%" y="287.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>core::iter::traits::iterator::Iterator::fold (16,681 samples, 52.22%)</title><rect x="32.3618%" y="261" width="52.2228%" height="15" fill="rgb(227,165,31)"/><text x="32.6118%" y="271.50">core::iter::traits::iterator::Iterator::fold</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (16,672 samples, 52.19%)</title><rect x="32.3900%" y="245" width="52.1946%" height="15" fill="rgb(228,167,24)"/><text x="32.6400%" y="255.50">core::iter::adapters::map_fold::{{closure}}</text></g><g><title>mass::stats::moving_std::{{closure}} (16,664 samples, 52.17%)</title><rect x="32.4150%" y="229" width="52.1696%" height="15" fill="rgb(228,143,12)"/><text x="32.6650%" y="239.50">mass::stats::moving_std::{{closure}}</text></g><g><title>mass::stats::std (16,664 samples, 52.17%)</title><rect x="32.4150%" y="213" width="52.1696%" height="15" fill="rgb(249,149,8)"/><text x="32.6650%" y="223.50">mass::stats::std</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (98 samples, 0.31%)</title><rect x="84.2778%" y="197" width="0.3068%" height="15" fill="rgb(243,35,44)"/><text x="84.5278%" y="207.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (64 samples, 0.20%)</title><rect x="85.1324%" y="325" width="0.2004%" height="15" fill="rgb(246,89,9)"/><text x="85.3824%" y="335.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (47 samples, 0.15%)</title><rect x="85.1856%" y="309" width="0.1471%" height="15" fill="rgb(233,213,13)"/><text x="85.4356%" y="319.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (99 samples, 0.31%)</title><rect x="85.1324%" y="341" width="0.3099%" height="15" fill="rgb(233,141,41)"/><text x="85.3824%" y="351.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (35 samples, 0.11%)</title><rect x="85.3328%" y="325" width="0.1096%" height="15" fill="rgb(239,167,4)"/><text x="85.5828%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (35 samples, 0.11%)</title><rect x="85.3328%" y="309" width="0.1096%" height="15" fill="rgb(209,217,16)"/><text x="85.5828%" y="319.50"></text></g><g><title>__memmove_avx_unaligned_erms (35 samples, 0.11%)</title><rect x="85.3328%" y="293" width="0.1096%" height="15" fill="rgb(219,88,35)"/><text x="85.5828%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (55 samples, 0.17%)</title><rect x="86.4536%" y="309" width="0.1722%" height="15" fill="rgb(220,193,23)"/><text x="86.7036%" y="319.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::sum (55 samples, 0.17%)</title><rect x="86.4536%" y="293" width="0.1722%" height="15" fill="rgb(230,90,52)"/><text x="86.7036%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (55 samples, 0.17%)</title><rect x="86.4536%" y="277" width="0.1722%" height="15" fill="rgb(252,106,19)"/><text x="86.7036%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::sum::{{closure}} (53 samples, 0.17%)</title><rect x="86.4598%" y="261" width="0.1659%" height="15" fill="rgb(206,74,20)"/><text x="86.7098%" y="271.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::add (53 samples, 0.17%)</title><rect x="86.4598%" y="245" width="0.1659%" height="15" fill="rgb(230,138,44)"/><text x="86.7098%" y="255.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (53 samples, 0.17%)</title><rect x="86.4598%" y="229" width="0.1659%" height="15" fill="rgb(235,182,43)"/><text x="86.7098%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (53 samples, 0.17%)</title><rect x="86.4598%" y="213" width="0.1659%" height="15" fill="rgb(242,16,51)"/><text x="86.7098%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (36 samples, 0.11%)</title><rect x="86.9889%" y="293" width="0.1127%" height="15" fill="rgb(248,9,4)"/><text x="87.2389%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (36 samples, 0.11%)</title><rect x="86.9889%" y="277" width="0.1127%" height="15" fill="rgb(210,31,22)"/><text x="87.2389%" y="287.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (46 samples, 0.14%)</title><rect x="87.1987%" y="261" width="0.1440%" height="15" fill="rgb(239,54,39)"/><text x="87.4487%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (95 samples, 0.30%)</title><rect x="87.1016%" y="293" width="0.2974%" height="15" fill="rgb(230,99,41)"/><text x="87.3516%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (84 samples, 0.26%)</title><rect x="87.1361%" y="277" width="0.2630%" height="15" fill="rgb(253,106,12)"/><text x="87.3861%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (70 samples, 0.22%)</title><rect x="87.6182%" y="261" width="0.2191%" height="15" fill="rgb(213,46,41)"/><text x="87.8682%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (40 samples, 0.13%)</title><rect x="87.7121%" y="245" width="0.1252%" height="15" fill="rgb(215,133,35)"/><text x="87.9621%" y="255.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (51 samples, 0.16%)</title><rect x="87.8373%" y="229" width="0.1597%" height="15" fill="rgb(213,28,5)"/><text x="88.0873%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (51 samples, 0.16%)</title><rect x="87.8373%" y="213" width="0.1597%" height="15" fill="rgb(215,77,49)"/><text x="88.0873%" y="223.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (41 samples, 0.13%)</title><rect x="88.0158%" y="229" width="0.1284%" height="15" fill="rgb(248,100,22)"/><text x="88.2658%" y="239.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (45 samples, 0.14%)</title><rect x="88.1441%" y="213" width="0.1409%" height="15" fill="rgb(208,67,9)"/><text x="88.3941%" y="223.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (45 samples, 0.14%)</title><rect x="88.1441%" y="197" width="0.1409%" height="15" fill="rgb(219,133,21)"/><text x="88.3941%" y="207.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (162 samples, 0.51%)</title><rect x="87.8373%" y="245" width="0.5072%" height="15" fill="rgb(246,46,29)"/><text x="88.0873%" y="255.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly2 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (64 samples, 0.20%)</title><rect x="88.1441%" y="229" width="0.2004%" height="15" fill="rgb(246,185,52)"/><text x="88.3941%" y="239.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (334 samples, 1.05%)</title><rect x="87.3990%" y="293" width="1.0456%" height="15" fill="rgb(252,136,11)"/><text x="87.6490%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (326 samples, 1.02%)</title><rect x="87.4241%" y="277" width="1.0206%" height="15" fill="rgb(219,138,53)"/><text x="87.6741%" y="287.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (194 samples, 0.61%)</title><rect x="87.8373%" y="261" width="0.6074%" height="15" fill="rgb(211,51,23)"/><text x="88.0873%" y="271.50"></text></g><g><title>rustfft::algorithm::butterflies::Butterfly2::perform_fft_direct (32 samples, 0.10%)</title><rect x="88.3445%" y="245" width="0.1002%" height="15" fill="rgb(247,221,28)"/><text x="88.5945%" y="255.50"></text></g><g><title>rustfft::algorithm::good_thomas_algorithm::GoodThomasAlgorithmDoubleButterfly&lt;T&gt;::perform_fft (631 samples, 1.98%)</title><rect x="86.6508%" y="309" width="1.9755%" height="15" fill="rgb(251,222,45)"/><text x="86.9008%" y="319.50">r..</text></g><g><title>rustfft::array_utils::transpose_small (56 samples, 0.18%)</title><rect x="88.4509%" y="293" width="0.1753%" height="15" fill="rgb(217,162,53)"/><text x="88.7009%" y="303.50"></text></g><g><title>rustfft::algorithm::raders_algorithm::RadersAlgorithm&lt;T&gt;::perform_fft (1,202 samples, 3.76%)</title><rect x="85.4486%" y="325" width="3.7631%" height="15" fill="rgb(229,93,14)"/><text x="85.6986%" y="335.50">rust..</text></g><g><title>strength_reduce::&lt;impl core::ops::arith::Rem&lt;strength_reduce::StrengthReducedUsize&gt; for usize&gt;::rem (187 samples, 0.59%)</title><rect x="88.6263%" y="309" width="0.5854%" height="15" fill="rgb(209,67,49)"/><text x="88.8763%" y="319.50"></text></g><g><title>strength_reduce::&lt;impl core::ops::arith::Div&lt;strength_reduce::StrengthReducedUsize&gt; for usize&gt;::div (95 samples, 0.30%)</title><rect x="88.9143%" y="293" width="0.2974%" height="15" fill="rgb(213,87,29)"/><text x="89.1643%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::raders_algorithm::RadersAlgorithm&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (1,208 samples, 3.78%)</title><rect x="85.4424%" y="341" width="3.7819%" height="15" fill="rgb(205,151,52)"/><text x="85.6924%" y="351.50">&lt;rus..</text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt;::perform_fft (1,497 samples, 4.69%)</title><rect x="84.9008%" y="357" width="4.6866%" height="15" fill="rgb(253,215,39)"/><text x="85.1508%" y="367.50">rustf..</text></g><g><title>transpose::out_of_place::transpose (116 samples, 0.36%)</title><rect x="89.2242%" y="341" width="0.3632%" height="15" fill="rgb(221,220,41)"/><text x="89.4742%" y="351.50"></text></g><g><title>transpose::out_of_place::transpose_block (111 samples, 0.35%)</title><rect x="89.2399%" y="325" width="0.3475%" height="15" fill="rgb(218,133,21)"/><text x="89.4899%" y="335.50"></text></g><g><title>&lt;rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (1,533 samples, 4.80%)</title><rect x="84.8914%" y="373" width="4.7993%" height="15" fill="rgb(221,193,43)"/><text x="85.1414%" y="383.50">&lt;rustf..</text></g><g><title>transpose::out_of_place::transpose (33 samples, 0.10%)</title><rect x="89.5874%" y="357" width="0.1033%" height="15" fill="rgb(240,128,52)"/><text x="89.8374%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (78 samples, 0.24%)</title><rect x="90.7426%" y="341" width="0.2442%" height="15" fill="rgb(253,114,12)"/><text x="90.9926%" y="351.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::sum (78 samples, 0.24%)</title><rect x="90.7426%" y="325" width="0.2442%" height="15" fill="rgb(215,223,47)"/><text x="90.9926%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (78 samples, 0.24%)</title><rect x="90.7426%" y="309" width="0.2442%" height="15" fill="rgb(248,225,23)"/><text x="90.9926%" y="319.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::iter::traits::accum::Sum&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::sum::{{closure}} (70 samples, 0.22%)</title><rect x="90.7676%" y="293" width="0.2191%" height="15" fill="rgb(250,108,0)"/><text x="91.0176%" y="303.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&lt;&amp;num_complex::Complex&lt;T&gt;&gt;&gt;::add (70 samples, 0.22%)</title><rect x="90.7676%" y="277" width="0.2191%" height="15" fill="rgb(228,208,7)"/><text x="91.0176%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (70 samples, 0.22%)</title><rect x="90.7676%" y="261" width="0.2191%" height="15" fill="rgb(244,45,10)"/><text x="91.0176%" y="271.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (70 samples, 0.22%)</title><rect x="90.7676%" y="245" width="0.2191%" height="15" fill="rgb(207,125,25)"/><text x="91.0176%" y="255.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (37 samples, 0.12%)</title><rect x="91.2435%" y="325" width="0.1158%" height="15" fill="rgb(210,195,18)"/><text x="91.4935%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (43 samples, 0.13%)</title><rect x="91.5378%" y="261" width="0.1346%" height="15" fill="rgb(249,80,12)"/><text x="91.7878%" y="271.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (77 samples, 0.24%)</title><rect x="91.5378%" y="277" width="0.2411%" height="15" fill="rgb(221,65,9)"/><text x="91.7878%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (34 samples, 0.11%)</title><rect x="91.6724%" y="261" width="0.1064%" height="15" fill="rgb(235,49,36)"/><text x="91.9224%" y="271.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (50 samples, 0.16%)</title><rect x="91.7788%" y="245" width="0.1565%" height="15" fill="rgb(225,32,20)"/><text x="92.0288%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (50 samples, 0.16%)</title><rect x="91.7788%" y="229" width="0.1565%" height="15" fill="rgb(215,141,46)"/><text x="92.0288%" y="239.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (54 samples, 0.17%)</title><rect x="91.9573%" y="245" width="0.1691%" height="15" fill="rgb(250,160,47)"/><text x="92.2073%" y="255.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (37 samples, 0.12%)</title><rect x="92.0105%" y="229" width="0.1158%" height="15" fill="rgb(216,222,40)"/><text x="92.2605%" y="239.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (49 samples, 0.15%)</title><rect x="92.1264%" y="229" width="0.1534%" height="15" fill="rgb(234,217,39)"/><text x="92.3764%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (49 samples, 0.15%)</title><rect x="92.1264%" y="213" width="0.1534%" height="15" fill="rgb(207,178,40)"/><text x="92.3764%" y="223.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (183 samples, 0.57%)</title><rect x="91.7788%" y="261" width="0.5729%" height="15" fill="rgb(221,136,13)"/><text x="92.0288%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly2 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (72 samples, 0.23%)</title><rect x="92.1264%" y="245" width="0.2254%" height="15" fill="rgb(249,199,10)"/><text x="92.3764%" y="255.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (363 samples, 1.14%)</title><rect x="91.3593%" y="309" width="1.1364%" height="15" fill="rgb(249,222,13)"/><text x="91.6093%" y="319.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (350 samples, 1.10%)</title><rect x="91.4000%" y="293" width="1.0957%" height="15" fill="rgb(244,185,38)"/><text x="91.6500%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (229 samples, 0.72%)</title><rect x="91.7788%" y="277" width="0.7169%" height="15" fill="rgb(236,202,9)"/><text x="92.0288%" y="287.50"></text></g><g><title>rustfft::algorithm::butterflies::Butterfly2::perform_fft_direct (46 samples, 0.14%)</title><rect x="92.3518%" y="261" width="0.1440%" height="15" fill="rgb(250,229,37)"/><text x="92.6018%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly7&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (426 samples, 1.33%)</title><rect x="91.3593%" y="325" width="1.3337%" height="15" fill="rgb(206,174,23)"/><text x="91.6093%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (63 samples, 0.20%)</title><rect x="92.4958%" y="309" width="0.1972%" height="15" fill="rgb(211,33,43)"/><text x="92.7458%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (63 samples, 0.20%)</title><rect x="92.4958%" y="293" width="0.1972%" height="15" fill="rgb(245,58,50)"/><text x="92.7458%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (63 samples, 0.20%)</title><rect x="92.4958%" y="277" width="0.1972%" height="15" fill="rgb(244,68,36)"/><text x="92.7458%" y="287.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (37 samples, 0.12%)</title><rect x="93.2534%" y="261" width="0.1158%" height="15" fill="rgb(232,229,15)"/><text x="93.5034%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (117 samples, 0.37%)</title><rect x="93.1313%" y="293" width="0.3663%" height="15" fill="rgb(254,30,23)"/><text x="93.3813%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (104 samples, 0.33%)</title><rect x="93.1720%" y="277" width="0.3256%" height="15" fill="rgb(235,160,14)"/><text x="93.4220%" y="287.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly2 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (41 samples, 0.13%)</title><rect x="93.3692%" y="261" width="0.1284%" height="15" fill="rgb(212,155,44)"/><text x="93.6192%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly3&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (64 samples, 0.20%)</title><rect x="93.6197%" y="261" width="0.2004%" height="15" fill="rgb(226,2,50)"/><text x="93.8697%" y="271.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (117 samples, 0.37%)</title><rect x="93.4976%" y="293" width="0.3663%" height="15" fill="rgb(234,177,6)"/><text x="93.7476%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly6&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (107 samples, 0.33%)</title><rect x="93.5289%" y="277" width="0.3350%" height="15" fill="rgb(217,24,9)"/><text x="93.7789%" y="287.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (111 samples, 0.35%)</title><rect x="94.2928%" y="277" width="0.3475%" height="15" fill="rgb(220,13,46)"/><text x="94.5428%" y="287.50"></text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadixDoubleButterfly&lt;T&gt;::perform_fft (621 samples, 1.94%)</title><rect x="92.7212%" y="309" width="1.9441%" height="15" fill="rgb(239,221,27)"/><text x="92.9712%" y="319.50">r..</text></g><g><title>rustfft::array_utils::transpose_small (254 samples, 0.80%)</title><rect x="93.8701%" y="293" width="0.7952%" height="15" fill="rgb(222,198,25)"/><text x="94.1201%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::mixed_radix::MixedRadixDoubleButterfly&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (637 samples, 1.99%)</title><rect x="92.6930%" y="325" width="1.9942%" height="15" fill="rgb(211,99,13)"/><text x="92.9430%" y="335.50">&lt;..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (40 samples, 0.13%)</title><rect x="94.9753%" y="293" width="0.1252%" height="15" fill="rgb(232,111,31)"/><text x="95.2253%" y="303.50"></text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt;::perform_fft (1,314 samples, 4.11%)</title><rect x="91.0181%" y="341" width="4.1137%" height="15" fill="rgb(245,82,37)"/><text x="91.2681%" y="351.50">rust..</text></g><g><title>transpose::out_of_place::transpose (140 samples, 0.44%)</title><rect x="94.6935%" y="325" width="0.4383%" height="15" fill="rgb(227,149,46)"/><text x="94.9435%" y="335.50"></text></g><g><title>transpose::out_of_place::transpose_block (121 samples, 0.38%)</title><rect x="94.7530%" y="309" width="0.3788%" height="15" fill="rgb(218,36,50)"/><text x="95.0030%" y="319.50"></text></g><g><title>strength_reduce::&lt;impl core::ops::arith::Rem&lt;strength_reduce::StrengthReducedUsize&gt; for usize&gt;::rem (197 samples, 0.62%)</title><rect x="95.1318%" y="341" width="0.6167%" height="15" fill="rgb(226,80,48)"/><text x="95.3818%" y="351.50"></text></g><g><title>strength_reduce::&lt;impl core::ops::arith::Div&lt;strength_reduce::StrengthReducedUsize&gt; for usize&gt;::div (94 samples, 0.29%)</title><rect x="95.4543%" y="325" width="0.2943%" height="15" fill="rgb(238,224,15)"/><text x="95.7043%" y="335.50"></text></g><g><title>&lt;rustfft::algorithm::raders_algorithm::RadersAlgorithm&lt;T&gt; as rustfft::FFT&lt;T&gt;&gt;::process_multi (2,011 samples, 6.30%)</title><rect x="89.6907%" y="373" width="6.2958%" height="15" fill="rgb(241,136,10)"/><text x="89.9407%" y="383.50">&lt;rustfft..</text></g><g><title>rustfft::algorithm::raders_algorithm::RadersAlgorithm&lt;T&gt;::perform_fft (2,010 samples, 6.29%)</title><rect x="89.6938%" y="357" width="6.2927%" height="15" fill="rgb(208,32,45)"/><text x="89.9438%" y="367.50">rustfft:..</text></g><g><title>transpose::out_of_place::transpose (76 samples, 0.24%)</title><rect x="95.7485%" y="341" width="0.2379%" height="15" fill="rgb(207,135,9)"/><text x="95.9985%" y="351.50"></text></g><g><title>transpose::out_of_place::transpose_block (71 samples, 0.22%)</title><rect x="95.7642%" y="325" width="0.2223%" height="15" fill="rgb(206,86,44)"/><text x="96.0142%" y="335.50"></text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt;::perform_fft (3,748 samples, 11.73%)</title><rect x="84.5877%" y="389" width="11.7338%" height="15" fill="rgb(245,177,15)"/><text x="84.8377%" y="399.50">rustfft::algorith..</text></g><g><title>transpose::out_of_place::transpose (107 samples, 0.33%)</title><rect x="95.9865%" y="373" width="0.3350%" height="15" fill="rgb(206,64,50)"/><text x="96.2365%" y="383.50"></text></g><g><title>transpose::out_of_place::transpose_block (106 samples, 0.33%)</title><rect x="95.9896%" y="357" width="0.3319%" height="15" fill="rgb(234,36,40)"/><text x="96.2396%" y="367.50"></text></g><g><title>alloc_pages_vma (32 samples, 0.10%)</title><rect x="96.5030%" y="181" width="0.1002%" height="15" fill="rgb(213,64,8)"/><text x="96.7530%" y="191.50"></text></g><g><title>__alloc_pages_nodemask (32 samples, 0.10%)</title><rect x="96.5030%" y="165" width="0.1002%" height="15" fill="rgb(210,75,36)"/><text x="96.7530%" y="175.50"></text></g><g><title>do_anonymous_page (43 samples, 0.13%)</title><rect x="96.5030%" y="197" width="0.1346%" height="15" fill="rgb(229,88,21)"/><text x="96.7530%" y="207.50"></text></g><g><title>handle_mm_fault (53 samples, 0.17%)</title><rect x="96.4749%" y="229" width="0.1659%" height="15" fill="rgb(252,204,47)"/><text x="96.7249%" y="239.50"></text></g><g><title>__handle_mm_fault (53 samples, 0.17%)</title><rect x="96.4749%" y="213" width="0.1659%" height="15" fill="rgb(208,77,27)"/><text x="96.7249%" y="223.50"></text></g><g><title>page_fault (63 samples, 0.20%)</title><rect x="96.4529%" y="293" width="0.1972%" height="15" fill="rgb(221,76,26)"/><text x="96.7029%" y="303.50"></text></g><g><title>do_page_fault (60 samples, 0.19%)</title><rect x="96.4623%" y="277" width="0.1878%" height="15" fill="rgb(225,139,18)"/><text x="96.7123%" y="287.50"></text></g><g><title>__do_page_fault (60 samples, 0.19%)</title><rect x="96.4623%" y="261" width="0.1878%" height="15" fill="rgb(230,137,11)"/><text x="96.7123%" y="271.50"></text></g><g><title>do_user_addr_fault (58 samples, 0.18%)</title><rect x="96.4686%" y="245" width="0.1816%" height="15" fill="rgb(212,28,1)"/><text x="96.7186%" y="255.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (32 samples, 0.10%)</title><rect x="96.6502%" y="293" width="0.1002%" height="15" fill="rgb(248,164,17)"/><text x="96.9002%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (140 samples, 0.44%)</title><rect x="96.3277%" y="325" width="0.4383%" height="15" fill="rgb(222,171,42)"/><text x="96.5777%" y="335.50"></text></g><g><title>core::ptr::write (139 samples, 0.44%)</title><rect x="96.3308%" y="309" width="0.4352%" height="15" fill="rgb(243,84,45)"/><text x="96.5808%" y="319.50"></text></g><g><title>do_cos (181 samples, 0.57%)</title><rect x="97.2763%" y="245" width="0.5667%" height="15" fill="rgb(252,49,23)"/><text x="97.5263%" y="255.50"></text></g><g><title>do_sin (336 samples, 1.05%)</title><rect x="97.8430%" y="245" width="1.0519%" height="15" fill="rgb(215,19,7)"/><text x="98.0930%" y="255.50"></text></g><g><title>rustfft::algorithm::mixed_radix::MixedRadix&lt;T&gt;::new (900 samples, 2.82%)</title><rect x="96.3277%" y="341" width="2.8176%" height="15" fill="rgb(238,81,41)"/><text x="96.5777%" y="351.50">ru..</text></g><g><title>rustfft::twiddles::single_twiddle (743 samples, 2.33%)</title><rect x="96.8192%" y="325" width="2.3261%" height="15" fill="rgb(210,199,37)"/><text x="97.0692%" y="335.50">r..</text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (716 samples, 2.24%)</title><rect x="96.9038%" y="309" width="2.2416%" height="15" fill="rgb(244,192,49)"/><text x="97.1538%" y="319.50">n..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (716 samples, 2.24%)</title><rect x="96.9038%" y="293" width="2.2416%" height="15" fill="rgb(226,211,11)"/><text x="97.1538%" y="303.50">&lt;..</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (716 samples, 2.24%)</title><rect x="96.9038%" y="277" width="2.2416%" height="15" fill="rgb(236,162,54)"/><text x="97.1538%" y="287.50">s..</text></g><g><title>__sincos (711 samples, 2.23%)</title><rect x="96.9194%" y="261" width="2.2259%" height="15" fill="rgb(220,229,9)"/><text x="97.1694%" y="271.50">_..</text></g><g><title>reduce_sincos (43 samples, 0.13%)</title><rect x="99.0107%" y="245" width="0.1346%" height="15" fill="rgb(250,87,22)"/><text x="99.2607%" y="255.50"></text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_mixed_radix (953 samples, 2.98%)</title><rect x="96.3246%" y="357" width="2.9835%" height="15" fill="rgb(239,43,17)"/><text x="96.5746%" y="367.50">rus..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (52 samples, 0.16%)</title><rect x="99.1453%" y="341" width="0.1628%" height="15" fill="rgb(231,177,25)"/><text x="99.3953%" y="351.50"></text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft (956 samples, 2.99%)</title><rect x="96.3215%" y="389" width="2.9929%" height="15" fill="rgb(219,179,1)"/><text x="96.5715%" y="399.50">rus..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (955 samples, 2.99%)</title><rect x="96.3246%" y="373" width="2.9898%" height="15" fill="rgb(238,219,53)"/><text x="96.5746%" y="383.50">rus..</text></g><g><title>mass::mass2 (30,301 samples, 94.86%)</title><rect x="4.5896%" y="405" width="94.8626%" height="15" fill="rgb(232,167,36)"/><text x="4.8396%" y="415.50">mass::mass2</text></g><g><title>transpose::out_of_place::transpose (44 samples, 0.14%)</title><rect x="99.3144%" y="389" width="0.1377%" height="15" fill="rgb(244,19,51)"/><text x="99.5644%" y="399.50"></text></g><g><title>transpose::out_of_place::transpose_block (44 samples, 0.14%)</title><rect x="99.3144%" y="373" width="0.1377%" height="15" fill="rgb(224,6,22)"/><text x="99.5644%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (30,318 samples, 94.92%)</title><rect x="4.5896%" y="517" width="94.9158%" height="15" fill="rgb(224,145,5)"/><text x="4.8396%" y="527.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (30,318 samples, 94.92%)</title><rect x="4.5896%" y="501" width="94.9158%" height="15" fill="rgb(234,130,49)"/><text x="4.8396%" y="511.50">alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (30,318 samples, 94.92%)</title><rect x="4.5896%" y="485" width="94.9158%" height="15" fill="rgb(254,6,2)"/><text x="4.8396%" y="495.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (30,318 samples, 94.92%)</title><rect x="4.5896%" y="469" width="94.9158%" height="15" fill="rgb(208,96,46)"/><text x="4.8396%" y="479.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (30,318 samples, 94.92%)</title><rect x="4.5896%" y="453" width="94.9158%" height="15" fill="rgb(239,3,39)"/><text x="4.8396%" y="463.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>mass::mass_batch::{{closure}} (30,318 samples, 94.92%)</title><rect x="4.5896%" y="437" width="94.9158%" height="15" fill="rgb(233,210,1)"/><text x="4.8396%" y="447.50">mass::mass_batch::{{closure}}</text></g><g><title>mass::min_subsequence_distance (30,318 samples, 94.92%)</title><rect x="4.5896%" y="421" width="94.9158%" height="15" fill="rgb(244,137,37)"/><text x="4.8396%" y="431.50">mass::min_subsequence_distance</text></g><g><title>__libc_start_main (30,347 samples, 95.01%)</title><rect x="4.5708%" y="677" width="95.0066%" height="15" fill="rgb(240,136,2)"/><text x="4.8208%" y="687.50">__libc_start_main</text></g><g><title>main (30,347 samples, 95.01%)</title><rect x="4.5708%" y="661" width="95.0066%" height="15" fill="rgb(239,18,37)"/><text x="4.8208%" y="671.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (30,347 samples, 95.01%)</title><rect x="4.5708%" y="645" width="95.0066%" height="15" fill="rgb(218,185,22)"/><text x="4.8208%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (30,347 samples, 95.01%)</title><rect x="4.5708%" y="629" width="95.0066%" height="15" fill="rgb(225,218,4)"/><text x="4.8208%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (30,347 samples, 95.01%)</title><rect x="4.5708%" y="613" width="95.0066%" height="15" fill="rgb(230,182,32)"/><text x="4.8208%" y="623.50">main::main</text></g><g><title>mass::mass_batch (30,341 samples, 94.99%)</title><rect x="4.5896%" y="597" width="94.9878%" height="15" fill="rgb(242,56,43)"/><text x="4.8396%" y="607.50">mass::mass_batch</text></g><g><title>core::iter::traits::iterator::Iterator::collect (30,341 samples, 94.99%)</title><rect x="4.5896%" y="581" width="94.9878%" height="15" fill="rgb(233,99,24)"/><text x="4.8396%" y="591.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (30,341 samples, 94.99%)</title><rect x="4.5896%" y="565" width="94.9878%" height="15" fill="rgb(234,209,42)"/><text x="4.8396%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (30,341 samples, 94.99%)</title><rect x="4.5896%" y="549" width="94.9878%" height="15" fill="rgb(227,7,12)"/><text x="4.8396%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (30,341 samples, 94.99%)</title><rect x="4.5896%" y="533" width="94.9878%" height="15" fill="rgb(245,203,43)"/><text x="4.8396%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>_start (30,348 samples, 95.01%)</title><rect x="4.5708%" y="693" width="95.0097%" height="15" fill="rgb(238,205,33)"/><text x="4.8208%" y="703.50">_start</text></g><g><title>page_fault (116 samples, 0.36%)</title><rect x="99.5930%" y="693" width="0.3632%" height="15" fill="rgb(231,56,7)"/><text x="99.8430%" y="703.50"></text></g><g><title>main (31,936 samples, 99.98%)</title><rect x="0.0000%" y="709" width="99.9812%" height="15" fill="rgb(244,186,29)"/><text x="0.2500%" y="719.50">main</text></g><g><title>all (31,942 samples, 100%)</title><rect x="0.0000%" y="725" width="100.0000%" height="15" fill="rgb(234,111,31)"/><text x="0.2500%" y="735.50"></text></g></svg></svg>