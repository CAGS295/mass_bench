<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1494" onload="init(evt)" viewBox="0 0 1200 1494" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1494" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1477.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="1477.00"> </text><svg id="frames" x="10" width="1180"><g><title>core::num::dec2flt::parse::parse_decimal (12 samples, 0.18%)</title><rect x="0.1923%" y="1397" width="0.1775%" height="15" fill="rgb(227,0,7)"/><text x="0.4423%" y="1407.50"></text></g><g><title>csv_core::reader::Reader::read_record (7 samples, 0.10%)</title><rect x="0.3697%" y="1397" width="0.1035%" height="15" fill="rgb(217,0,24)"/><text x="0.6197%" y="1407.50"></text></g><g><title>[[heap]] (32 samples, 0.47%)</title><rect x="0.0148%" y="1413" width="0.4732%" height="15" fill="rgb(221,193,54)"/><text x="0.2648%" y="1423.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (7 samples, 0.10%)</title><rect x="0.4880%" y="1397" width="0.1035%" height="15" fill="rgb(248,212,6)"/><text x="0.7380%" y="1407.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (9 samples, 0.13%)</title><rect x="0.7098%" y="1397" width="0.1331%" height="15" fill="rgb(208,68,35)"/><text x="0.9598%" y="1407.50"></text></g><g><title>[[stack]] (33 samples, 0.49%)</title><rect x="0.4880%" y="1413" width="0.4880%" height="15" fill="rgb(232,128,0)"/><text x="0.7380%" y="1423.50"></text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (7 samples, 0.10%)</title><rect x="1.0648%" y="1397" width="0.1035%" height="15" fill="rgb(207,160,47)"/><text x="1.3148%" y="1407.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.12%)</title><rect x="1.1683%" y="1397" width="0.1183%" height="15" fill="rgb(228,23,34)"/><text x="1.4183%" y="1407.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.12%)</title><rect x="1.1683%" y="1381" width="0.1183%" height="15" fill="rgb(218,30,26)"/><text x="1.4183%" y="1391.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8 samples, 0.12%)</title><rect x="1.1683%" y="1365" width="0.1183%" height="15" fill="rgb(220,122,19)"/><text x="1.4183%" y="1375.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.22%)</title><rect x="1.2866%" y="1397" width="0.2218%" height="15" fill="rgb(250,228,42)"/><text x="1.5366%" y="1407.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (9 samples, 0.13%)</title><rect x="1.3753%" y="1381" width="0.1331%" height="15" fill="rgb(240,193,28)"/><text x="1.6253%" y="1391.50"></text></g><g><title>csv::string_record::StringRecord::read (9 samples, 0.13%)</title><rect x="1.3753%" y="1365" width="0.1331%" height="15" fill="rgb(216,20,37)"/><text x="1.6253%" y="1375.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (9 samples, 0.13%)</title><rect x="1.3753%" y="1349" width="0.1331%" height="15" fill="rgb(206,188,39)"/><text x="1.6253%" y="1359.50"></text></g><g><title>__memmove_avx_unaligned_erms (19 samples, 0.28%)</title><rect x="2.5732%" y="677" width="0.2810%" height="15" fill="rgb(217,207,13)"/><text x="2.8232%" y="687.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (32 samples, 0.47%)</title><rect x="2.8542%" y="677" width="0.4732%" height="15" fill="rgb(231,73,38)"/><text x="3.1042%" y="687.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (21 samples, 0.31%)</title><rect x="3.0169%" y="661" width="0.3106%" height="15" fill="rgb(225,20,46)"/><text x="3.2669%" y="671.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (20 samples, 0.30%)</title><rect x="3.3274%" y="677" width="0.2958%" height="15" fill="rgb(210,31,41)"/><text x="3.5774%" y="687.50"></text></g><g><title>&lt;&amp;mut T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (9 samples, 0.13%)</title><rect x="3.6823%" y="645" width="0.1331%" height="15" fill="rgb(221,200,47)"/><text x="3.9323%" y="655.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (9 samples, 0.13%)</title><rect x="3.6823%" y="629" width="0.1331%" height="15" fill="rgb(226,26,5)"/><text x="3.9323%" y="639.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (9 samples, 0.13%)</title><rect x="3.6823%" y="613" width="0.1331%" height="15" fill="rgb(249,33,26)"/><text x="3.9323%" y="623.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (9 samples, 0.13%)</title><rect x="3.6823%" y="597" width="0.1331%" height="15" fill="rgb(235,183,28)"/><text x="3.9323%" y="607.50"></text></g><g><title>miniz_oxide::inflate::core::fill_bit_buffer (18 samples, 0.27%)</title><rect x="3.6232%" y="677" width="0.2662%" height="15" fill="rgb(221,5,38)"/><text x="3.8732%" y="687.50"></text></g><g><title>miniz_oxide::inflate::core::read_u32_le (14 samples, 0.21%)</title><rect x="3.6823%" y="661" width="0.2070%" height="15" fill="rgb(247,18,42)"/><text x="3.9323%" y="671.50"></text></g><g><title>miniz_oxide::inflate::core::transfer (11 samples, 0.16%)</title><rect x="3.8894%" y="677" width="0.1627%" height="15" fill="rgb(241,131,45)"/><text x="4.1394%" y="687.50"></text></g><g><title>__libc_start_main (172 samples, 2.54%)</title><rect x="1.5232%" y="1397" width="2.5436%" height="15" fill="rgb(249,31,29)"/><text x="1.7732%" y="1407.50">__..</text></g><g><title>main (172 samples, 2.54%)</title><rect x="1.5232%" y="1381" width="2.5436%" height="15" fill="rgb(225,111,53)"/><text x="1.7732%" y="1391.50">ma..</text></g><g><title>std::rt::lang_start_internal (172 samples, 2.54%)</title><rect x="1.5232%" y="1365" width="2.5436%" height="15" fill="rgb(238,160,17)"/><text x="1.7732%" y="1375.50">st..</text></g><g><title>std::panic::catch_unwind (172 samples, 2.54%)</title><rect x="1.5232%" y="1349" width="2.5436%" height="15" fill="rgb(214,148,48)"/><text x="1.7732%" y="1359.50">st..</text></g><g><title>std::panicking::try (172 samples, 2.54%)</title><rect x="1.5232%" y="1333" width="2.5436%" height="15" fill="rgb(232,36,49)"/><text x="1.7732%" y="1343.50">st..</text></g><g><title>std::panicking::try::do_call (172 samples, 2.54%)</title><rect x="1.5232%" y="1317" width="2.5436%" height="15" fill="rgb(209,103,24)"/><text x="1.7732%" y="1327.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (172 samples, 2.54%)</title><rect x="1.5232%" y="1301" width="2.5436%" height="15" fill="rgb(229,88,8)"/><text x="1.7732%" y="1311.50">co..</text></g><g><title>std::rt::lang_start::{{closure}} (172 samples, 2.54%)</title><rect x="1.5232%" y="1285" width="2.5436%" height="15" fill="rgb(213,181,19)"/><text x="1.7732%" y="1295.50">st..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (172 samples, 2.54%)</title><rect x="1.5232%" y="1269" width="2.5436%" height="15" fill="rgb(254,191,54)"/><text x="1.7732%" y="1279.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (172 samples, 2.54%)</title><rect x="1.5232%" y="1253" width="2.5436%" height="15" fill="rgb(241,83,37)"/><text x="1.7732%" y="1263.50">co..</text></g><g><title>main::main (172 samples, 2.54%)</title><rect x="1.5232%" y="1237" width="2.5436%" height="15" fill="rgb(233,36,39)"/><text x="1.7732%" y="1247.50">ma..</text></g><g><title>mass_bench::input_pair (172 samples, 2.54%)</title><rect x="1.5232%" y="1221" width="2.5436%" height="15" fill="rgb(226,3,54)"/><text x="1.7732%" y="1231.50">ma..</text></g><g><title>mass_bench::load_series (172 samples, 2.54%)</title><rect x="1.5232%" y="1205" width="2.5436%" height="15" fill="rgb(245,192,40)"/><text x="1.7732%" y="1215.50">ma..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (172 samples, 2.54%)</title><rect x="1.5232%" y="1189" width="2.5436%" height="15" fill="rgb(238,167,29)"/><text x="1.7732%" y="1199.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (172 samples, 2.54%)</title><rect x="1.5232%" y="1173" width="2.5436%" height="15" fill="rgb(232,182,51)"/><text x="1.7732%" y="1183.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (172 samples, 2.54%)</title><rect x="1.5232%" y="1157" width="2.5436%" height="15" fill="rgb(231,60,39)"/><text x="1.7732%" y="1167.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (172 samples, 2.54%)</title><rect x="1.5232%" y="1141" width="2.5436%" height="15" fill="rgb(208,69,12)"/><text x="1.7732%" y="1151.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (172 samples, 2.54%)</title><rect x="1.5232%" y="1125" width="2.5436%" height="15" fill="rgb(235,93,37)"/><text x="1.7732%" y="1135.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (172 samples, 2.54%)</title><rect x="1.5232%" y="1109" width="2.5436%" height="15" fill="rgb(213,116,39)"/><text x="1.7732%" y="1119.50">al..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (172 samples, 2.54%)</title><rect x="1.5232%" y="1093" width="2.5436%" height="15" fill="rgb(222,207,29)"/><text x="1.7732%" y="1103.50">&lt;c..</text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (172 samples, 2.54%)</title><rect x="1.5232%" y="1077" width="2.5436%" height="15" fill="rgb(206,96,30)"/><text x="1.7732%" y="1087.50">&lt;c..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (172 samples, 2.54%)</title><rect x="1.5232%" y="1061" width="2.5436%" height="15" fill="rgb(218,138,4)"/><text x="1.7732%" y="1071.50">cs..</text></g><g><title>csv::string_record::StringRecord::read (172 samples, 2.54%)</title><rect x="1.5232%" y="1045" width="2.5436%" height="15" fill="rgb(250,191,14)"/><text x="1.7732%" y="1055.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (172 samples, 2.54%)</title><rect x="1.5232%" y="1029" width="2.5436%" height="15" fill="rgb(239,60,40)"/><text x="1.7732%" y="1039.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (172 samples, 2.54%)</title><rect x="1.5232%" y="1013" width="2.5436%" height="15" fill="rgb(206,27,48)"/><text x="1.7732%" y="1023.50">cs..</text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (172 samples, 2.54%)</title><rect x="1.5232%" y="997" width="2.5436%" height="15" fill="rgb(225,35,8)"/><text x="1.7732%" y="1007.50">&lt;s..</text></g><g><title>&lt;tar::entry::Entry&lt;R&gt; as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="981" width="2.5436%" height="15" fill="rgb(250,213,24)"/><text x="1.7732%" y="991.50">&lt;t..</text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="965" width="2.5436%" height="15" fill="rgb(247,123,22)"/><text x="1.7732%" y="975.50">&lt;t..</text></g><g><title>core::option::Option&lt;T&gt;::map (172 samples, 2.54%)</title><rect x="1.5232%" y="949" width="2.5436%" height="15" fill="rgb(231,138,38)"/><text x="1.7732%" y="959.50">co..</text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read::{{closure}} (172 samples, 2.54%)</title><rect x="1.5232%" y="933" width="2.5436%" height="15" fill="rgb(231,145,46)"/><text x="1.7732%" y="943.50">&lt;t..</text></g><g><title>&lt;tar::entry::EntryIo as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="917" width="2.5436%" height="15" fill="rgb(251,118,11)"/><text x="1.7732%" y="927.50">&lt;t..</text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="901" width="2.5436%" height="15" fill="rgb(217,147,25)"/><text x="1.7732%" y="911.50">&lt;s..</text></g><g><title>&lt;&amp;tar::archive::ArchiveInner&lt;R&gt; as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="885" width="2.5436%" height="15" fill="rgb(247,81,37)"/><text x="1.7732%" y="895.50">&lt;&amp;..</text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="869" width="2.5436%" height="15" fill="rgb(209,12,38)"/><text x="1.7732%" y="879.50">&lt;f..</text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="853" width="2.5436%" height="15" fill="rgb(227,1,9)"/><text x="1.7732%" y="863.50">&lt;f..</text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="837" width="2.5436%" height="15" fill="rgb(248,47,43)"/><text x="1.7732%" y="847.50">&lt;f..</text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (172 samples, 2.54%)</title><rect x="1.5232%" y="821" width="2.5436%" height="15" fill="rgb(221,10,30)"/><text x="1.7732%" y="831.50">&lt;f..</text></g><g><title>flate2::zio::read (172 samples, 2.54%)</title><rect x="1.5232%" y="805" width="2.5436%" height="15" fill="rgb(210,229,1)"/><text x="1.7732%" y="815.50">fl..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (172 samples, 2.54%)</title><rect x="1.5232%" y="789" width="2.5436%" height="15" fill="rgb(222,148,37)"/><text x="1.7732%" y="799.50">&lt;f..</text></g><g><title>flate2::mem::Decompress::decompress (172 samples, 2.54%)</title><rect x="1.5232%" y="773" width="2.5436%" height="15" fill="rgb(234,67,33)"/><text x="1.7732%" y="783.50">fl..</text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (172 samples, 2.54%)</title><rect x="1.5232%" y="757" width="2.5436%" height="15" fill="rgb(247,98,35)"/><text x="1.7732%" y="767.50">&lt;f..</text></g><g><title>miniz_oxide::inflate::stream::inflate (172 samples, 2.54%)</title><rect x="1.5232%" y="741" width="2.5436%" height="15" fill="rgb(247,138,52)"/><text x="1.7732%" y="751.50">mi..</text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (172 samples, 2.54%)</title><rect x="1.5232%" y="725" width="2.5436%" height="15" fill="rgb(213,79,30)"/><text x="1.7732%" y="735.50">mi..</text></g><g><title>miniz_oxide::inflate::core::decompress (172 samples, 2.54%)</title><rect x="1.5232%" y="709" width="2.5436%" height="15" fill="rgb(246,177,23)"/><text x="1.7732%" y="719.50">mi..</text></g><g><title>miniz_oxide::inflate::core::decompress_fast (169 samples, 2.50%)</title><rect x="1.5676%" y="693" width="2.4993%" height="15" fill="rgb(230,62,27)"/><text x="1.8176%" y="703.50">mi..</text></g><g><title>__sincos (38 samples, 0.56%)</title><rect x="4.0816%" y="1397" width="0.5620%" height="15" fill="rgb(216,154,8)"/><text x="4.3316%" y="1407.50"></text></g><g><title>core::num::dec2flt::dec2flt (7 samples, 0.10%)</title><rect x="4.6584%" y="1397" width="0.1035%" height="15" fill="rgb(244,35,45)"/><text x="4.9084%" y="1407.50"></text></g><g><title>csv_core::reader::Reader::read_record (11 samples, 0.16%)</title><rect x="4.7915%" y="1397" width="0.1627%" height="15" fill="rgb(251,115,12)"/><text x="5.0415%" y="1407.50"></text></g><g><title>mass::math::fft_mult (9 samples, 0.13%)</title><rect x="4.9689%" y="1397" width="0.1331%" height="15" fill="rgb(240,54,50)"/><text x="5.2189%" y="1407.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (9 samples, 0.13%)</title><rect x="4.9689%" y="1381" width="0.1331%" height="15" fill="rgb(233,84,52)"/><text x="5.2189%" y="1391.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (9 samples, 0.13%)</title><rect x="4.9689%" y="1365" width="0.1331%" height="15" fill="rgb(207,117,47)"/><text x="5.2189%" y="1375.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 0.13%)</title><rect x="4.9689%" y="1349" width="0.1331%" height="15" fill="rgb(249,43,39)"/><text x="5.2189%" y="1359.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (9 samples, 0.13%)</title><rect x="4.9689%" y="1333" width="0.1331%" height="15" fill="rgb(209,38,44)"/><text x="5.2189%" y="1343.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (9 samples, 0.13%)</title><rect x="4.9689%" y="1317" width="0.1331%" height="15" fill="rgb(236,212,23)"/><text x="5.2189%" y="1327.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 0.13%)</title><rect x="4.9689%" y="1301" width="0.1331%" height="15" fill="rgb(242,79,21)"/><text x="5.2189%" y="1311.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (9 samples, 0.13%)</title><rect x="4.9689%" y="1285" width="0.1331%" height="15" fill="rgb(211,96,35)"/><text x="5.2189%" y="1295.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.13%)</title><rect x="4.9689%" y="1269" width="0.1331%" height="15" fill="rgb(253,215,40)"/><text x="5.2189%" y="1279.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (9 samples, 0.13%)</title><rect x="4.9689%" y="1253" width="0.1331%" height="15" fill="rgb(211,81,21)"/><text x="5.2189%" y="1263.50"></text></g><g><title>mass::math::fft_mult::{{closure}} (9 samples, 0.13%)</title><rect x="4.9689%" y="1237" width="0.1331%" height="15" fill="rgb(208,190,38)"/><text x="5.2189%" y="1247.50"></text></g><g><title>&lt;T as core::convert::Into&lt;U&gt;&gt;::into (9 samples, 0.13%)</title><rect x="4.9689%" y="1221" width="0.1331%" height="15" fill="rgb(235,213,38)"/><text x="5.2189%" y="1231.50"></text></g><g><title>mass::time_series::&lt;impl core::convert::From&lt;mass::time_series::Record&lt;f64&gt;&gt; for f64&gt;::from (36 samples, 0.53%)</title><rect x="5.1020%" y="1397" width="0.5324%" height="15" fill="rgb(237,122,38)"/><text x="5.3520%" y="1407.50"></text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (44 samples, 0.65%)</title><rect x="5.6936%" y="677" width="0.6507%" height="15" fill="rgb(244,218,35)"/><text x="5.9436%" y="687.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (44 samples, 0.65%)</title><rect x="5.6936%" y="661" width="0.6507%" height="15" fill="rgb(240,68,47)"/><text x="5.9436%" y="671.50"></text></g><g><title>mass::mass_batch::{{closure}} (44 samples, 0.65%)</title><rect x="5.6936%" y="645" width="0.6507%" height="15" fill="rgb(210,16,53)"/><text x="5.9436%" y="655.50"></text></g><g><title>mass::min_subsequence_distance (44 samples, 0.65%)</title><rect x="5.6936%" y="629" width="0.6507%" height="15" fill="rgb(235,124,12)"/><text x="5.9436%" y="639.50"></text></g><g><title>mass::mass (44 samples, 0.65%)</title><rect x="5.6936%" y="613" width="0.6507%" height="15" fill="rgb(224,169,11)"/><text x="5.9436%" y="623.50"></text></g><g><title>mass::math::fft_mult (44 samples, 0.65%)</title><rect x="5.6936%" y="597" width="0.6507%" height="15" fill="rgb(250,166,2)"/><text x="5.9436%" y="607.50"></text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::perform_fft (44 samples, 0.65%)</title><rect x="5.6936%" y="581" width="0.6507%" height="15" fill="rgb(242,216,29)"/><text x="5.9436%" y="591.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (44 samples, 0.65%)</title><rect x="5.6936%" y="565" width="0.6507%" height="15" fill="rgb(230,116,27)"/><text x="5.9436%" y="575.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (44 samples, 0.65%)</title><rect x="5.6936%" y="549" width="0.6507%" height="15" fill="rgb(228,99,48)"/><text x="5.9436%" y="559.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (44 samples, 0.65%)</title><rect x="5.6936%" y="533" width="0.6507%" height="15" fill="rgb(253,11,6)"/><text x="5.9436%" y="543.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (42 samples, 0.62%)</title><rect x="5.7232%" y="517" width="0.6211%" height="15" fill="rgb(247,143,39)"/><text x="5.9732%" y="527.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (34 samples, 0.50%)</title><rect x="5.8415%" y="501" width="0.5028%" height="15" fill="rgb(236,97,10)"/><text x="6.0915%" y="511.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (18 samples, 0.27%)</title><rect x="6.0781%" y="485" width="0.2662%" height="15" fill="rgb(233,208,19)"/><text x="6.3281%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.12%)</title><rect x="6.3443%" y="437" width="0.1183%" height="15" fill="rgb(216,164,2)"/><text x="6.5943%" y="447.50"></text></g><g><title>core::ptr::drop_in_place (8 samples, 0.12%)</title><rect x="6.3443%" y="421" width="0.1183%" height="15" fill="rgb(220,129,5)"/><text x="6.5943%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.12%)</title><rect x="6.3443%" y="405" width="0.1183%" height="15" fill="rgb(242,17,10)"/><text x="6.5943%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (8 samples, 0.12%)</title><rect x="6.3443%" y="389" width="0.1183%" height="15" fill="rgb(242,107,0)"/><text x="6.5943%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.12%)</title><rect x="6.3443%" y="373" width="0.1183%" height="15" fill="rgb(251,28,31)"/><text x="6.5943%" y="383.50"></text></g><g><title>_int_free (8 samples, 0.12%)</title><rect x="6.3443%" y="357" width="0.1183%" height="15" fill="rgb(233,223,10)"/><text x="6.5943%" y="367.50"></text></g><g><title>heap_trim (8 samples, 0.12%)</title><rect x="6.3443%" y="341" width="0.1183%" height="15" fill="rgb(215,21,27)"/><text x="6.5943%" y="351.50"></text></g><g><title>shrink_heap (8 samples, 0.12%)</title><rect x="6.3443%" y="325" width="0.1183%" height="15" fill="rgb(232,23,21)"/><text x="6.5943%" y="335.50"></text></g><g><title>__GI_madvise (8 samples, 0.12%)</title><rect x="6.3443%" y="309" width="0.1183%" height="15" fill="rgb(244,5,23)"/><text x="6.5943%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.12%)</title><rect x="6.3443%" y="293" width="0.1183%" height="15" fill="rgb(226,81,46)"/><text x="6.5943%" y="303.50"></text></g><g><title>do_syscall_64 (8 samples, 0.12%)</title><rect x="6.3443%" y="277" width="0.1183%" height="15" fill="rgb(247,70,30)"/><text x="6.5943%" y="287.50"></text></g><g><title>__x64_sys_madvise (8 samples, 0.12%)</title><rect x="6.3443%" y="261" width="0.1183%" height="15" fill="rgb(212,68,19)"/><text x="6.5943%" y="271.50"></text></g><g><title>__do_sys_madvise (8 samples, 0.12%)</title><rect x="6.3443%" y="245" width="0.1183%" height="15" fill="rgb(240,187,13)"/><text x="6.5943%" y="255.50"></text></g><g><title>zap_page_range (7 samples, 0.10%)</title><rect x="6.3591%" y="229" width="0.1035%" height="15" fill="rgb(223,113,26)"/><text x="6.6091%" y="239.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (53 samples, 0.78%)</title><rect x="5.6936%" y="1397" width="0.7838%" height="15" fill="rgb(206,192,2)"/><text x="5.9436%" y="1407.50"></text></g><g><title>rayon_core::join::join_context (53 samples, 0.78%)</title><rect x="5.6936%" y="1381" width="0.7838%" height="15" fill="rgb(241,108,4)"/><text x="5.9436%" y="1391.50"></text></g><g><title>rayon_core::registry::in_worker (53 samples, 0.78%)</title><rect x="5.6936%" y="1365" width="0.7838%" height="15" fill="rgb(247,173,49)"/><text x="5.9436%" y="1375.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="1349" width="0.7838%" height="15" fill="rgb(224,114,35)"/><text x="5.9436%" y="1359.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (53 samples, 0.78%)</title><rect x="5.6936%" y="1333" width="0.7838%" height="15" fill="rgb(245,159,27)"/><text x="5.9436%" y="1343.50"></text></g><g><title>std::panic::catch_unwind (53 samples, 0.78%)</title><rect x="5.6936%" y="1317" width="0.7838%" height="15" fill="rgb(245,172,44)"/><text x="5.9436%" y="1327.50"></text></g><g><title>std::panicking::try (53 samples, 0.78%)</title><rect x="5.6936%" y="1301" width="0.7838%" height="15" fill="rgb(236,23,11)"/><text x="5.9436%" y="1311.50"></text></g><g><title>std::panicking::try::do_call (53 samples, 0.78%)</title><rect x="5.6936%" y="1285" width="0.7838%" height="15" fill="rgb(205,117,38)"/><text x="5.9436%" y="1295.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (53 samples, 0.78%)</title><rect x="5.6936%" y="1269" width="0.7838%" height="15" fill="rgb(237,72,25)"/><text x="5.9436%" y="1279.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="1253" width="0.7838%" height="15" fill="rgb(244,70,9)"/><text x="5.9436%" y="1263.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="1237" width="0.7838%" height="15" fill="rgb(217,125,39)"/><text x="5.9436%" y="1247.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (53 samples, 0.78%)</title><rect x="5.6936%" y="1221" width="0.7838%" height="15" fill="rgb(235,36,10)"/><text x="5.9436%" y="1231.50"></text></g><g><title>rayon_core::join::join_context (53 samples, 0.78%)</title><rect x="5.6936%" y="1205" width="0.7838%" height="15" fill="rgb(251,123,47)"/><text x="5.9436%" y="1215.50"></text></g><g><title>rayon_core::registry::in_worker (53 samples, 0.78%)</title><rect x="5.6936%" y="1189" width="0.7838%" height="15" fill="rgb(221,13,13)"/><text x="5.9436%" y="1199.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="1173" width="0.7838%" height="15" fill="rgb(238,131,9)"/><text x="5.9436%" y="1183.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (53 samples, 0.78%)</title><rect x="5.6936%" y="1157" width="0.7838%" height="15" fill="rgb(211,50,8)"/><text x="5.9436%" y="1167.50"></text></g><g><title>std::panic::catch_unwind (53 samples, 0.78%)</title><rect x="5.6936%" y="1141" width="0.7838%" height="15" fill="rgb(245,182,24)"/><text x="5.9436%" y="1151.50"></text></g><g><title>std::panicking::try (53 samples, 0.78%)</title><rect x="5.6936%" y="1125" width="0.7838%" height="15" fill="rgb(242,14,37)"/><text x="5.9436%" y="1135.50"></text></g><g><title>std::panicking::try::do_call (53 samples, 0.78%)</title><rect x="5.6936%" y="1109" width="0.7838%" height="15" fill="rgb(246,228,12)"/><text x="5.9436%" y="1119.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (53 samples, 0.78%)</title><rect x="5.6936%" y="1093" width="0.7838%" height="15" fill="rgb(213,55,15)"/><text x="5.9436%" y="1103.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="1077" width="0.7838%" height="15" fill="rgb(209,9,3)"/><text x="5.9436%" y="1087.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="1061" width="0.7838%" height="15" fill="rgb(230,59,30)"/><text x="5.9436%" y="1071.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (53 samples, 0.78%)</title><rect x="5.6936%" y="1045" width="0.7838%" height="15" fill="rgb(209,121,21)"/><text x="5.9436%" y="1055.50"></text></g><g><title>rayon_core::join::join_context (53 samples, 0.78%)</title><rect x="5.6936%" y="1029" width="0.7838%" height="15" fill="rgb(220,109,13)"/><text x="5.9436%" y="1039.50"></text></g><g><title>rayon_core::registry::in_worker (53 samples, 0.78%)</title><rect x="5.6936%" y="1013" width="0.7838%" height="15" fill="rgb(232,18,1)"/><text x="5.9436%" y="1023.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="997" width="0.7838%" height="15" fill="rgb(215,41,42)"/><text x="5.9436%" y="1007.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (53 samples, 0.78%)</title><rect x="5.6936%" y="981" width="0.7838%" height="15" fill="rgb(224,123,36)"/><text x="5.9436%" y="991.50"></text></g><g><title>std::panic::catch_unwind (53 samples, 0.78%)</title><rect x="5.6936%" y="965" width="0.7838%" height="15" fill="rgb(240,125,3)"/><text x="5.9436%" y="975.50"></text></g><g><title>std::panicking::try (53 samples, 0.78%)</title><rect x="5.6936%" y="949" width="0.7838%" height="15" fill="rgb(205,98,50)"/><text x="5.9436%" y="959.50"></text></g><g><title>std::panicking::try::do_call (53 samples, 0.78%)</title><rect x="5.6936%" y="933" width="0.7838%" height="15" fill="rgb(205,185,37)"/><text x="5.9436%" y="943.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (53 samples, 0.78%)</title><rect x="5.6936%" y="917" width="0.7838%" height="15" fill="rgb(238,207,15)"/><text x="5.9436%" y="927.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="901" width="0.7838%" height="15" fill="rgb(213,199,42)"/><text x="5.9436%" y="911.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="885" width="0.7838%" height="15" fill="rgb(235,201,11)"/><text x="5.9436%" y="895.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (53 samples, 0.78%)</title><rect x="5.6936%" y="869" width="0.7838%" height="15" fill="rgb(207,46,11)"/><text x="5.9436%" y="879.50"></text></g><g><title>rayon_core::join::join_context (53 samples, 0.78%)</title><rect x="5.6936%" y="853" width="0.7838%" height="15" fill="rgb(241,35,35)"/><text x="5.9436%" y="863.50"></text></g><g><title>rayon_core::registry::in_worker (53 samples, 0.78%)</title><rect x="5.6936%" y="837" width="0.7838%" height="15" fill="rgb(243,32,47)"/><text x="5.9436%" y="847.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="821" width="0.7838%" height="15" fill="rgb(247,202,23)"/><text x="5.9436%" y="831.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (53 samples, 0.78%)</title><rect x="5.6936%" y="805" width="0.7838%" height="15" fill="rgb(219,102,11)"/><text x="5.9436%" y="815.50"></text></g><g><title>std::panic::catch_unwind (53 samples, 0.78%)</title><rect x="5.6936%" y="789" width="0.7838%" height="15" fill="rgb(243,110,44)"/><text x="5.9436%" y="799.50"></text></g><g><title>std::panicking::try (53 samples, 0.78%)</title><rect x="5.6936%" y="773" width="0.7838%" height="15" fill="rgb(222,74,54)"/><text x="5.9436%" y="783.50"></text></g><g><title>std::panicking::try::do_call (53 samples, 0.78%)</title><rect x="5.6936%" y="757" width="0.7838%" height="15" fill="rgb(216,99,12)"/><text x="5.9436%" y="767.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (53 samples, 0.78%)</title><rect x="5.6936%" y="741" width="0.7838%" height="15" fill="rgb(226,22,26)"/><text x="5.9436%" y="751.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="725" width="0.7838%" height="15" fill="rgb(217,163,10)"/><text x="5.9436%" y="735.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (53 samples, 0.78%)</title><rect x="5.6936%" y="709" width="0.7838%" height="15" fill="rgb(213,25,53)"/><text x="5.9436%" y="719.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (53 samples, 0.78%)</title><rect x="5.6936%" y="693" width="0.7838%" height="15" fill="rgb(252,105,26)"/><text x="5.9436%" y="703.50"></text></g><g><title>rayon_core::join::join_context (9 samples, 0.13%)</title><rect x="6.3443%" y="677" width="0.1331%" height="15" fill="rgb(220,39,43)"/><text x="6.5943%" y="687.50"></text></g><g><title>rayon_core::registry::in_worker (9 samples, 0.13%)</title><rect x="6.3443%" y="661" width="0.1331%" height="15" fill="rgb(229,68,48)"/><text x="6.5943%" y="671.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (9 samples, 0.13%)</title><rect x="6.3443%" y="645" width="0.1331%" height="15" fill="rgb(252,8,32)"/><text x="6.5943%" y="655.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (9 samples, 0.13%)</title><rect x="6.3443%" y="629" width="0.1331%" height="15" fill="rgb(223,20,43)"/><text x="6.5943%" y="639.50"></text></g><g><title>std::panic::catch_unwind (9 samples, 0.13%)</title><rect x="6.3443%" y="613" width="0.1331%" height="15" fill="rgb(229,81,49)"/><text x="6.5943%" y="623.50"></text></g><g><title>std::panicking::try (9 samples, 0.13%)</title><rect x="6.3443%" y="597" width="0.1331%" height="15" fill="rgb(236,28,36)"/><text x="6.5943%" y="607.50"></text></g><g><title>std::panicking::try::do_call (9 samples, 0.13%)</title><rect x="6.3443%" y="581" width="0.1331%" height="15" fill="rgb(249,185,26)"/><text x="6.5943%" y="591.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (9 samples, 0.13%)</title><rect x="6.3443%" y="565" width="0.1331%" height="15" fill="rgb(249,174,33)"/><text x="6.5943%" y="575.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (9 samples, 0.13%)</title><rect x="6.3443%" y="549" width="0.1331%" height="15" fill="rgb(233,201,37)"/><text x="6.5943%" y="559.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (9 samples, 0.13%)</title><rect x="6.3443%" y="533" width="0.1331%" height="15" fill="rgb(221,78,26)"/><text x="6.5943%" y="543.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (9 samples, 0.13%)</title><rect x="6.3443%" y="517" width="0.1331%" height="15" fill="rgb(250,127,30)"/><text x="6.5943%" y="527.50"></text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (9 samples, 0.13%)</title><rect x="6.3443%" y="501" width="0.1331%" height="15" fill="rgb(230,49,44)"/><text x="6.5943%" y="511.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (9 samples, 0.13%)</title><rect x="6.3443%" y="485" width="0.1331%" height="15" fill="rgb(229,67,23)"/><text x="6.5943%" y="495.50"></text></g><g><title>mass::mass_batch::{{closure}} (9 samples, 0.13%)</title><rect x="6.3443%" y="469" width="0.1331%" height="15" fill="rgb(249,83,47)"/><text x="6.5943%" y="479.50"></text></g><g><title>mass::min_subsequence_distance (9 samples, 0.13%)</title><rect x="6.3443%" y="453" width="0.1331%" height="15" fill="rgb(215,43,3)"/><text x="6.5943%" y="463.50"></text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::perform_fft (55 samples, 0.81%)</title><rect x="6.4922%" y="693" width="0.8134%" height="15" fill="rgb(238,154,13)"/><text x="6.7422%" y="703.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (55 samples, 0.81%)</title><rect x="6.4922%" y="677" width="0.8134%" height="15" fill="rgb(219,56,2)"/><text x="6.7422%" y="687.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (55 samples, 0.81%)</title><rect x="6.4922%" y="661" width="0.8134%" height="15" fill="rgb(233,0,4)"/><text x="6.7422%" y="671.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (55 samples, 0.81%)</title><rect x="6.4922%" y="645" width="0.8134%" height="15" fill="rgb(235,30,7)"/><text x="6.7422%" y="655.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (50 samples, 0.74%)</title><rect x="6.5661%" y="629" width="0.7394%" height="15" fill="rgb(250,79,13)"/><text x="6.8161%" y="639.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (41 samples, 0.61%)</title><rect x="6.6992%" y="613" width="0.6063%" height="15" fill="rgb(211,146,34)"/><text x="6.9492%" y="623.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (19 samples, 0.28%)</title><rect x="7.0245%" y="597" width="0.2810%" height="15" fill="rgb(228,22,38)"/><text x="7.2745%" y="607.50"></text></g><g><title>alloc_pages_vma (8 samples, 0.12%)</title><rect x="7.6161%" y="501" width="0.1183%" height="15" fill="rgb(235,168,5)"/><text x="7.8661%" y="511.50"></text></g><g><title>__alloc_pages_nodemask (8 samples, 0.12%)</title><rect x="7.6161%" y="485" width="0.1183%" height="15" fill="rgb(221,155,16)"/><text x="7.8661%" y="495.50"></text></g><g><title>get_page_from_freelist (8 samples, 0.12%)</title><rect x="7.6161%" y="469" width="0.1183%" height="15" fill="rgb(215,215,53)"/><text x="7.8661%" y="479.50"></text></g><g><title>do_user_addr_fault (24 samples, 0.35%)</title><rect x="7.4830%" y="565" width="0.3549%" height="15" fill="rgb(223,4,10)"/><text x="7.7330%" y="575.50"></text></g><g><title>handle_mm_fault (19 samples, 0.28%)</title><rect x="7.5569%" y="549" width="0.2810%" height="15" fill="rgb(234,103,6)"/><text x="7.8069%" y="559.50"></text></g><g><title>__handle_mm_fault (18 samples, 0.27%)</title><rect x="7.5717%" y="533" width="0.2662%" height="15" fill="rgb(227,97,0)"/><text x="7.8217%" y="543.50"></text></g><g><title>do_anonymous_page (18 samples, 0.27%)</title><rect x="7.5717%" y="517" width="0.2662%" height="15" fill="rgb(234,150,53)"/><text x="7.8217%" y="527.50"></text></g><g><title>page_fault (26 samples, 0.38%)</title><rect x="7.4830%" y="613" width="0.3845%" height="15" fill="rgb(228,201,54)"/><text x="7.7330%" y="623.50"></text></g><g><title>do_page_fault (26 samples, 0.38%)</title><rect x="7.4830%" y="597" width="0.3845%" height="15" fill="rgb(222,22,37)"/><text x="7.7330%" y="607.50"></text></g><g><title>__do_page_fault (26 samples, 0.38%)</title><rect x="7.4830%" y="581" width="0.3845%" height="15" fill="rgb(237,53,32)"/><text x="7.7330%" y="591.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (9 samples, 0.13%)</title><rect x="7.8675%" y="613" width="0.1331%" height="15" fill="rgb(233,25,53)"/><text x="8.1175%" y="623.50"></text></g><g><title>prepare_exit_to_usermode (8 samples, 0.12%)</title><rect x="7.8823%" y="597" width="0.1183%" height="15" fill="rgb(210,40,34)"/><text x="8.1323%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (45 samples, 0.67%)</title><rect x="7.3795%" y="645" width="0.6655%" height="15" fill="rgb(241,220,44)"/><text x="7.6295%" y="655.50"></text></g><g><title>core::ptr::write (43 samples, 0.64%)</title><rect x="7.4091%" y="629" width="0.6359%" height="15" fill="rgb(235,28,35)"/><text x="7.6591%" y="639.50"></text></g><g><title>do_cos (32 samples, 0.47%)</title><rect x="8.3259%" y="565" width="0.4732%" height="15" fill="rgb(210,56,17)"/><text x="8.5759%" y="575.50"></text></g><g><title>do_sin (54 samples, 0.80%)</title><rect x="8.7992%" y="565" width="0.7986%" height="15" fill="rgb(224,130,29)"/><text x="9.0492%" y="575.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (230 samples, 3.40%)</title><rect x="6.4774%" y="1397" width="3.4014%" height="15" fill="rgb(235,212,8)"/><text x="6.7274%" y="1407.50">ray..</text></g><g><title>rayon_core::registry::main_loop (230 samples, 3.40%)</title><rect x="6.4774%" y="1381" width="3.4014%" height="15" fill="rgb(223,33,50)"/><text x="6.7274%" y="1391.50">ray..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (230 samples, 3.40%)</title><rect x="6.4774%" y="1365" width="3.4014%" height="15" fill="rgb(219,149,13)"/><text x="6.7274%" y="1375.50">ray..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (230 samples, 3.40%)</title><rect x="6.4774%" y="1349" width="3.4014%" height="15" fill="rgb(250,156,29)"/><text x="6.7274%" y="1359.50">ray..</text></g><g><title>rayon_core::registry::WorkerThread::execute (229 samples, 3.39%)</title><rect x="6.4922%" y="1333" width="3.3866%" height="15" fill="rgb(216,193,19)"/><text x="6.7422%" y="1343.50">ray..</text></g><g><title>rayon_core::job::JobRef::execute (229 samples, 3.39%)</title><rect x="6.4922%" y="1317" width="3.3866%" height="15" fill="rgb(216,135,14)"/><text x="6.7422%" y="1327.50">ray..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (229 samples, 3.39%)</title><rect x="6.4922%" y="1301" width="3.3866%" height="15" fill="rgb(241,47,5)"/><text x="6.7422%" y="1311.50">&lt;ra..</text></g><g><title>rayon_core::unwind::halt_unwinding (229 samples, 3.39%)</title><rect x="6.4922%" y="1285" width="3.3866%" height="15" fill="rgb(233,42,35)"/><text x="6.7422%" y="1295.50">ray..</text></g><g><title>std::panic::catch_unwind (229 samples, 3.39%)</title><rect x="6.4922%" y="1269" width="3.3866%" height="15" fill="rgb(231,13,6)"/><text x="6.7422%" y="1279.50">std..</text></g><g><title>std::panicking::try (229 samples, 3.39%)</title><rect x="6.4922%" y="1253" width="3.3866%" height="15" fill="rgb(207,181,40)"/><text x="6.7422%" y="1263.50">std..</text></g><g><title>std::panicking::try::do_call (229 samples, 3.39%)</title><rect x="6.4922%" y="1237" width="3.3866%" height="15" fill="rgb(254,173,49)"/><text x="6.7422%" y="1247.50">std..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (229 samples, 3.39%)</title><rect x="6.4922%" y="1221" width="3.3866%" height="15" fill="rgb(221,1,38)"/><text x="6.7422%" y="1231.50">&lt;st..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="1205" width="3.3866%" height="15" fill="rgb(206,124,46)"/><text x="6.7422%" y="1215.50">&lt;ra..</text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="1189" width="3.3866%" height="15" fill="rgb(249,21,11)"/><text x="6.7422%" y="1199.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="1173" width="3.3866%" height="15" fill="rgb(222,201,40)"/><text x="6.7422%" y="1183.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (229 samples, 3.39%)</title><rect x="6.4922%" y="1157" width="3.3866%" height="15" fill="rgb(235,61,29)"/><text x="6.7422%" y="1167.50">ray..</text></g><g><title>rayon_core::join::join_context (229 samples, 3.39%)</title><rect x="6.4922%" y="1141" width="3.3866%" height="15" fill="rgb(219,207,3)"/><text x="6.7422%" y="1151.50">ray..</text></g><g><title>rayon_core::registry::in_worker (229 samples, 3.39%)</title><rect x="6.4922%" y="1125" width="3.3866%" height="15" fill="rgb(222,56,46)"/><text x="6.7422%" y="1135.50">ray..</text></g><g><title>rayon_core::join::join_context::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="1109" width="3.3866%" height="15" fill="rgb(239,76,54)"/><text x="6.7422%" y="1119.50">ray..</text></g><g><title>rayon_core::unwind::halt_unwinding (229 samples, 3.39%)</title><rect x="6.4922%" y="1093" width="3.3866%" height="15" fill="rgb(231,124,27)"/><text x="6.7422%" y="1103.50">ray..</text></g><g><title>std::panic::catch_unwind (229 samples, 3.39%)</title><rect x="6.4922%" y="1077" width="3.3866%" height="15" fill="rgb(249,195,6)"/><text x="6.7422%" y="1087.50">std..</text></g><g><title>std::panicking::try (229 samples, 3.39%)</title><rect x="6.4922%" y="1061" width="3.3866%" height="15" fill="rgb(237,174,47)"/><text x="6.7422%" y="1071.50">std..</text></g><g><title>std::panicking::try::do_call (229 samples, 3.39%)</title><rect x="6.4922%" y="1045" width="3.3866%" height="15" fill="rgb(206,201,31)"/><text x="6.7422%" y="1055.50">std..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (229 samples, 3.39%)</title><rect x="6.4922%" y="1029" width="3.3866%" height="15" fill="rgb(231,57,52)"/><text x="6.7422%" y="1039.50">&lt;st..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="1013" width="3.3866%" height="15" fill="rgb(248,177,22)"/><text x="6.7422%" y="1023.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="997" width="3.3866%" height="15" fill="rgb(215,211,37)"/><text x="6.7422%" y="1007.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (229 samples, 3.39%)</title><rect x="6.4922%" y="981" width="3.3866%" height="15" fill="rgb(241,128,51)"/><text x="6.7422%" y="991.50">ray..</text></g><g><title>rayon_core::join::join_context (229 samples, 3.39%)</title><rect x="6.4922%" y="965" width="3.3866%" height="15" fill="rgb(227,165,31)"/><text x="6.7422%" y="975.50">ray..</text></g><g><title>rayon_core::registry::in_worker (229 samples, 3.39%)</title><rect x="6.4922%" y="949" width="3.3866%" height="15" fill="rgb(228,167,24)"/><text x="6.7422%" y="959.50">ray..</text></g><g><title>rayon_core::join::join_context::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="933" width="3.3866%" height="15" fill="rgb(228,143,12)"/><text x="6.7422%" y="943.50">ray..</text></g><g><title>rayon_core::unwind::halt_unwinding (229 samples, 3.39%)</title><rect x="6.4922%" y="917" width="3.3866%" height="15" fill="rgb(249,149,8)"/><text x="6.7422%" y="927.50">ray..</text></g><g><title>std::panic::catch_unwind (229 samples, 3.39%)</title><rect x="6.4922%" y="901" width="3.3866%" height="15" fill="rgb(243,35,44)"/><text x="6.7422%" y="911.50">std..</text></g><g><title>std::panicking::try (229 samples, 3.39%)</title><rect x="6.4922%" y="885" width="3.3866%" height="15" fill="rgb(246,89,9)"/><text x="6.7422%" y="895.50">std..</text></g><g><title>std::panicking::try::do_call (229 samples, 3.39%)</title><rect x="6.4922%" y="869" width="3.3866%" height="15" fill="rgb(233,213,13)"/><text x="6.7422%" y="879.50">std..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (229 samples, 3.39%)</title><rect x="6.4922%" y="853" width="3.3866%" height="15" fill="rgb(233,141,41)"/><text x="6.7422%" y="863.50">&lt;st..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="837" width="3.3866%" height="15" fill="rgb(239,167,4)"/><text x="6.7422%" y="847.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="821" width="3.3866%" height="15" fill="rgb(209,217,16)"/><text x="6.7422%" y="831.50">ray..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (229 samples, 3.39%)</title><rect x="6.4922%" y="805" width="3.3866%" height="15" fill="rgb(219,88,35)"/><text x="6.7422%" y="815.50">ray..</text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (229 samples, 3.39%)</title><rect x="6.4922%" y="789" width="3.3866%" height="15" fill="rgb(220,193,23)"/><text x="6.7422%" y="799.50">&lt;ra..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (229 samples, 3.39%)</title><rect x="6.4922%" y="773" width="3.3866%" height="15" fill="rgb(230,90,52)"/><text x="6.7422%" y="783.50">&lt;ra..</text></g><g><title>mass::mass_batch::{{closure}} (229 samples, 3.39%)</title><rect x="6.4922%" y="757" width="3.3866%" height="15" fill="rgb(252,106,19)"/><text x="6.7422%" y="767.50">mas..</text></g><g><title>mass::min_subsequence_distance (229 samples, 3.39%)</title><rect x="6.4922%" y="741" width="3.3866%" height="15" fill="rgb(206,74,20)"/><text x="6.7422%" y="751.50">mas..</text></g><g><title>mass::mass (229 samples, 3.39%)</title><rect x="6.4922%" y="725" width="3.3866%" height="15" fill="rgb(230,138,44)"/><text x="6.7422%" y="735.50">mas..</text></g><g><title>mass::math::fft_mult (229 samples, 3.39%)</title><rect x="6.4922%" y="709" width="3.3866%" height="15" fill="rgb(235,182,43)"/><text x="6.7422%" y="719.50">mas..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft (174 samples, 2.57%)</title><rect x="7.3055%" y="693" width="2.5732%" height="15" fill="rgb(242,16,51)"/><text x="7.5555%" y="703.50">ru..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (174 samples, 2.57%)</title><rect x="7.3055%" y="677" width="2.5732%" height="15" fill="rgb(248,9,4)"/><text x="7.5555%" y="687.50">ru..</text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::new (174 samples, 2.57%)</title><rect x="7.3055%" y="661" width="2.5732%" height="15" fill="rgb(210,31,22)"/><text x="7.5555%" y="671.50">ru..</text></g><g><title>rustfft::twiddles::single_twiddle (121 samples, 1.79%)</title><rect x="8.0893%" y="645" width="1.7894%" height="15" fill="rgb(239,54,39)"/><text x="8.3393%" y="655.50">r..</text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (118 samples, 1.75%)</title><rect x="8.1337%" y="629" width="1.7450%" height="15" fill="rgb(230,99,41)"/><text x="8.3837%" y="639.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (118 samples, 1.75%)</title><rect x="8.1337%" y="613" width="1.7450%" height="15" fill="rgb(253,106,12)"/><text x="8.3837%" y="623.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (118 samples, 1.75%)</title><rect x="8.1337%" y="597" width="1.7450%" height="15" fill="rgb(213,46,41)"/><text x="8.3837%" y="607.50"></text></g><g><title>__sincos (114 samples, 1.69%)</title><rect x="8.1928%" y="581" width="1.6859%" height="15" fill="rgb(215,133,35)"/><text x="8.4428%" y="591.50"></text></g><g><title>reduce_sincos (14 samples, 0.21%)</title><rect x="9.6717%" y="565" width="0.2070%" height="15" fill="rgb(213,28,5)"/><text x="9.9217%" y="575.50"></text></g><g><title>down_read (7 samples, 0.10%)</title><rect x="10.0118%" y="469" width="0.1035%" height="15" fill="rgb(215,77,49)"/><text x="10.2618%" y="479.50"></text></g><g><title>rwsem_down_read_slowpath (7 samples, 0.10%)</title><rect x="10.0118%" y="453" width="0.1035%" height="15" fill="rgb(248,100,22)"/><text x="10.2618%" y="463.50"></text></g><g><title>page_fault (23 samples, 0.34%)</title><rect x="10.0118%" y="533" width="0.3401%" height="15" fill="rgb(208,67,9)"/><text x="10.2618%" y="543.50"></text></g><g><title>do_page_fault (23 samples, 0.34%)</title><rect x="10.0118%" y="517" width="0.3401%" height="15" fill="rgb(219,133,21)"/><text x="10.2618%" y="527.50"></text></g><g><title>__do_page_fault (23 samples, 0.34%)</title><rect x="10.0118%" y="501" width="0.3401%" height="15" fill="rgb(246,46,29)"/><text x="10.2618%" y="511.50"></text></g><g><title>do_user_addr_fault (23 samples, 0.34%)</title><rect x="10.0118%" y="485" width="0.3401%" height="15" fill="rgb(246,185,52)"/><text x="10.2618%" y="495.50"></text></g><g><title>handle_mm_fault (13 samples, 0.19%)</title><rect x="10.1597%" y="469" width="0.1923%" height="15" fill="rgb(252,136,11)"/><text x="10.4097%" y="479.50"></text></g><g><title>__handle_mm_fault (12 samples, 0.18%)</title><rect x="10.1745%" y="453" width="0.1775%" height="15" fill="rgb(219,138,53)"/><text x="10.4245%" y="463.50"></text></g><g><title>do_anonymous_page (9 samples, 0.13%)</title><rect x="10.2189%" y="437" width="0.1331%" height="15" fill="rgb(211,51,23)"/><text x="10.4689%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (37 samples, 0.55%)</title><rect x="9.8935%" y="565" width="0.5472%" height="15" fill="rgb(247,221,28)"/><text x="10.1435%" y="575.50"></text></g><g><title>core::ptr::write (34 samples, 0.50%)</title><rect x="9.9379%" y="549" width="0.5028%" height="15" fill="rgb(251,222,45)"/><text x="10.1879%" y="559.50"></text></g><g><title>do_cos (28 samples, 0.41%)</title><rect x="10.9287%" y="485" width="0.4141%" height="15" fill="rgb(217,162,53)"/><text x="11.1787%" y="495.50"></text></g><g><title>do_sin (58 samples, 0.86%)</title><rect x="11.3428%" y="485" width="0.8577%" height="15" fill="rgb(229,93,14)"/><text x="11.5928%" y="495.50"></text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (173 samples, 2.56%)</title><rect x="9.8787%" y="709" width="2.5584%" height="15" fill="rgb(209,67,49)"/><text x="10.1287%" y="719.50">&lt;r..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (173 samples, 2.56%)</title><rect x="9.8787%" y="693" width="2.5584%" height="15" fill="rgb(213,87,29)"/><text x="10.1287%" y="703.50">&lt;r..</text></g><g><title>mass::mass_batch::{{closure}} (173 samples, 2.56%)</title><rect x="9.8787%" y="677" width="2.5584%" height="15" fill="rgb(205,151,52)"/><text x="10.1287%" y="687.50">ma..</text></g><g><title>mass::min_subsequence_distance (173 samples, 2.56%)</title><rect x="9.8787%" y="661" width="2.5584%" height="15" fill="rgb(253,215,39)"/><text x="10.1287%" y="671.50">ma..</text></g><g><title>mass::mass (173 samples, 2.56%)</title><rect x="9.8787%" y="645" width="2.5584%" height="15" fill="rgb(221,220,41)"/><text x="10.1287%" y="655.50">ma..</text></g><g><title>mass::math::fft_mult (173 samples, 2.56%)</title><rect x="9.8787%" y="629" width="2.5584%" height="15" fill="rgb(218,133,21)"/><text x="10.1287%" y="639.50">ma..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft (173 samples, 2.56%)</title><rect x="9.8787%" y="613" width="2.5584%" height="15" fill="rgb(221,193,43)"/><text x="10.1287%" y="623.50">ru..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (173 samples, 2.56%)</title><rect x="9.8787%" y="597" width="2.5584%" height="15" fill="rgb(240,128,52)"/><text x="10.1287%" y="607.50">ru..</text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::new (173 samples, 2.56%)</title><rect x="9.8787%" y="581" width="2.5584%" height="15" fill="rgb(253,114,12)"/><text x="10.1287%" y="591.50">ru..</text></g><g><title>rustfft::twiddles::single_twiddle (129 samples, 1.91%)</title><rect x="10.5294%" y="565" width="1.9077%" height="15" fill="rgb(215,223,47)"/><text x="10.7794%" y="575.50">r..</text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (124 samples, 1.83%)</title><rect x="10.6034%" y="549" width="1.8338%" height="15" fill="rgb(248,225,23)"/><text x="10.8534%" y="559.50">n..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (124 samples, 1.83%)</title><rect x="10.6034%" y="533" width="1.8338%" height="15" fill="rgb(250,108,0)"/><text x="10.8534%" y="543.50">&lt;..</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (124 samples, 1.83%)</title><rect x="10.6034%" y="517" width="1.8338%" height="15" fill="rgb(228,208,7)"/><text x="10.8534%" y="527.50">s..</text></g><g><title>__sincos (119 samples, 1.76%)</title><rect x="10.6773%" y="501" width="1.7598%" height="15" fill="rgb(244,45,10)"/><text x="10.9273%" y="511.50"></text></g><g><title>reduce_sincos (11 samples, 0.16%)</title><rect x="12.2745%" y="485" width="0.1627%" height="15" fill="rgb(207,125,25)"/><text x="12.5245%" y="495.50"></text></g><g><title>mass::math::dist (15 samples, 0.22%)</title><rect x="12.4371%" y="453" width="0.2218%" height="15" fill="rgb(210,195,18)"/><text x="12.6871%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.22%)</title><rect x="12.4371%" y="437" width="0.2218%" height="15" fill="rgb(249,80,12)"/><text x="12.6871%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15 samples, 0.22%)</title><rect x="12.4371%" y="421" width="0.2218%" height="15" fill="rgb(221,65,9)"/><text x="12.6871%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 0.22%)</title><rect x="12.4371%" y="405" width="0.2218%" height="15" fill="rgb(235,49,36)"/><text x="12.6871%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (15 samples, 0.22%)</title><rect x="12.4371%" y="389" width="0.2218%" height="15" fill="rgb(225,32,20)"/><text x="12.6871%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.22%)</title><rect x="12.4371%" y="373" width="0.2218%" height="15" fill="rgb(215,141,46)"/><text x="12.6871%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (15 samples, 0.22%)</title><rect x="12.4371%" y="357" width="0.2218%" height="15" fill="rgb(250,160,47)"/><text x="12.6871%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.22%)</title><rect x="12.4371%" y="341" width="0.2218%" height="15" fill="rgb(216,222,40)"/><text x="12.6871%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (15 samples, 0.22%)</title><rect x="12.4371%" y="325" width="0.2218%" height="15" fill="rgb(234,217,39)"/><text x="12.6871%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (15 samples, 0.22%)</title><rect x="12.4371%" y="309" width="0.2218%" height="15" fill="rgb(207,178,40)"/><text x="12.6871%" y="319.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (15 samples, 0.22%)</title><rect x="12.4371%" y="293" width="0.2218%" height="15" fill="rgb(221,136,13)"/><text x="12.6871%" y="303.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (15 samples, 0.22%)</title><rect x="12.4371%" y="277" width="0.2218%" height="15" fill="rgb(249,199,10)"/><text x="12.6871%" y="287.50"></text></g><g><title>mass::math::dist::{{closure}} (9 samples, 0.13%)</title><rect x="12.5259%" y="261" width="0.1331%" height="15" fill="rgb(249,222,13)"/><text x="12.7759%" y="271.50"></text></g><g><title>down_read (11 samples, 0.16%)</title><rect x="12.7921%" y="309" width="0.1627%" height="15" fill="rgb(244,185,38)"/><text x="13.0421%" y="319.50"></text></g><g><title>rwsem_down_read_slowpath (11 samples, 0.16%)</title><rect x="12.7921%" y="293" width="0.1627%" height="15" fill="rgb(236,202,9)"/><text x="13.0421%" y="303.50"></text></g><g><title>schedule (11 samples, 0.16%)</title><rect x="12.7921%" y="277" width="0.1627%" height="15" fill="rgb(250,229,37)"/><text x="13.0421%" y="287.50"></text></g><g><title>__sched_text_start (11 samples, 0.16%)</title><rect x="12.7921%" y="261" width="0.1627%" height="15" fill="rgb(206,174,23)"/><text x="13.0421%" y="271.50"></text></g><g><title>finish_task_switch (10 samples, 0.15%)</title><rect x="12.8069%" y="245" width="0.1479%" height="15" fill="rgb(211,33,43)"/><text x="13.0569%" y="255.50"></text></g><g><title>__perf_event_task_sched_in (10 samples, 0.15%)</title><rect x="12.8069%" y="229" width="0.1479%" height="15" fill="rgb(245,58,50)"/><text x="13.0569%" y="239.50"></text></g><g><title>perf_pmu_enable.part.0 (10 samples, 0.15%)</title><rect x="12.8069%" y="213" width="0.1479%" height="15" fill="rgb(244,68,36)"/><text x="13.0569%" y="223.50"></text></g><g><title>x86_pmu_enable (10 samples, 0.15%)</title><rect x="12.8069%" y="197" width="0.1479%" height="15" fill="rgb(232,229,15)"/><text x="13.0569%" y="207.50"></text></g><g><title>intel_tfa_pmu_enable_all (10 samples, 0.15%)</title><rect x="12.8069%" y="181" width="0.1479%" height="15" fill="rgb(254,30,23)"/><text x="13.0569%" y="191.50"></text></g><g><title>native_write_msr (10 samples, 0.15%)</title><rect x="12.8069%" y="165" width="0.1479%" height="15" fill="rgb(235,160,14)"/><text x="13.0569%" y="175.50"></text></g><g><title>alloc_pages_vma (7 samples, 0.10%)</title><rect x="12.9695%" y="261" width="0.1035%" height="15" fill="rgb(212,155,44)"/><text x="13.2195%" y="271.50"></text></g><g><title>__alloc_pages_nodemask (7 samples, 0.10%)</title><rect x="12.9695%" y="245" width="0.1035%" height="15" fill="rgb(226,2,50)"/><text x="13.2195%" y="255.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.10%)</title><rect x="12.9695%" y="229" width="0.1035%" height="15" fill="rgb(234,177,6)"/><text x="13.2195%" y="239.50"></text></g><g><title>do_user_addr_fault (30 samples, 0.44%)</title><rect x="12.7921%" y="325" width="0.4437%" height="15" fill="rgb(217,24,9)"/><text x="13.0421%" y="335.50"></text></g><g><title>handle_mm_fault (19 samples, 0.28%)</title><rect x="12.9547%" y="309" width="0.2810%" height="15" fill="rgb(220,13,46)"/><text x="13.2047%" y="319.50"></text></g><g><title>__handle_mm_fault (19 samples, 0.28%)</title><rect x="12.9547%" y="293" width="0.2810%" height="15" fill="rgb(239,221,27)"/><text x="13.2047%" y="303.50"></text></g><g><title>do_anonymous_page (18 samples, 0.27%)</title><rect x="12.9695%" y="277" width="0.2662%" height="15" fill="rgb(222,198,25)"/><text x="13.2195%" y="287.50"></text></g><g><title>page_fault (32 samples, 0.47%)</title><rect x="12.7773%" y="373" width="0.4732%" height="15" fill="rgb(211,99,13)"/><text x="13.0273%" y="383.50"></text></g><g><title>do_page_fault (31 samples, 0.46%)</title><rect x="12.7921%" y="357" width="0.4584%" height="15" fill="rgb(232,111,31)"/><text x="13.0421%" y="367.50"></text></g><g><title>__do_page_fault (31 samples, 0.46%)</title><rect x="12.7921%" y="341" width="0.4584%" height="15" fill="rgb(245,82,37)"/><text x="13.0421%" y="351.50"></text></g><g><title>alloc::vec::from_elem (42 samples, 0.62%)</title><rect x="12.6590%" y="437" width="0.6211%" height="15" fill="rgb(227,149,46)"/><text x="12.9090%" y="447.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (42 samples, 0.62%)</title><rect x="12.6590%" y="421" width="0.6211%" height="15" fill="rgb(218,36,50)"/><text x="12.9090%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_with (42 samples, 0.62%)</title><rect x="12.6590%" y="405" width="0.6211%" height="15" fill="rgb(226,80,48)"/><text x="12.9090%" y="415.50"></text></g><g><title>core::ptr::write (42 samples, 0.62%)</title><rect x="12.6590%" y="389" width="0.6211%" height="15" fill="rgb(238,224,15)"/><text x="12.9090%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (8 samples, 0.12%)</title><rect x="13.2801%" y="357" width="0.1183%" height="15" fill="rgb(241,136,10)"/><text x="13.5301%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.12%)</title><rect x="13.2801%" y="341" width="0.1183%" height="15" fill="rgb(208,32,45)"/><text x="13.5301%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (8 samples, 0.12%)</title><rect x="13.2801%" y="325" width="0.1183%" height="15" fill="rgb(207,135,9)"/><text x="13.5301%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.12%)</title><rect x="13.2801%" y="309" width="0.1183%" height="15" fill="rgb(206,86,44)"/><text x="13.5301%" y="319.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.12%)</title><rect x="13.2801%" y="293" width="0.1183%" height="15" fill="rgb(245,177,15)"/><text x="13.5301%" y="303.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.12%)</title><rect x="13.2801%" y="277" width="0.1183%" height="15" fill="rgb(206,64,50)"/><text x="13.5301%" y="287.50"></text></g><g><title>_int_malloc (8 samples, 0.12%)</title><rect x="13.2801%" y="261" width="0.1183%" height="15" fill="rgb(234,36,40)"/><text x="13.5301%" y="271.50"></text></g><g><title>sysmalloc (8 samples, 0.12%)</title><rect x="13.2801%" y="245" width="0.1183%" height="15" fill="rgb(213,64,8)"/><text x="13.5301%" y="255.50"></text></g><g><title>grow_heap (7 samples, 0.10%)</title><rect x="13.2949%" y="229" width="0.1035%" height="15" fill="rgb(210,75,36)"/><text x="13.5449%" y="239.50"></text></g><g><title>__GI___mprotect (7 samples, 0.10%)</title><rect x="13.2949%" y="213" width="0.1035%" height="15" fill="rgb(229,88,21)"/><text x="13.5449%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (7 samples, 0.10%)</title><rect x="13.2949%" y="197" width="0.1035%" height="15" fill="rgb(252,204,47)"/><text x="13.5449%" y="207.50"></text></g><g><title>do_syscall_64 (7 samples, 0.10%)</title><rect x="13.2949%" y="181" width="0.1035%" height="15" fill="rgb(208,77,27)"/><text x="13.5449%" y="191.50"></text></g><g><title>__x64_sys_mprotect (7 samples, 0.10%)</title><rect x="13.2949%" y="165" width="0.1035%" height="15" fill="rgb(221,76,26)"/><text x="13.5449%" y="175.50"></text></g><g><title>do_mprotect_pkey (7 samples, 0.10%)</title><rect x="13.2949%" y="149" width="0.1035%" height="15" fill="rgb(225,139,18)"/><text x="13.5449%" y="159.50"></text></g><g><title>__perf_event_task_sched_in (19 samples, 0.28%)</title><rect x="13.6350%" y="101" width="0.2810%" height="15" fill="rgb(230,137,11)"/><text x="13.8850%" y="111.50"></text></g><g><title>perf_pmu_enable.part.0 (19 samples, 0.28%)</title><rect x="13.6350%" y="85" width="0.2810%" height="15" fill="rgb(212,28,1)"/><text x="13.8850%" y="95.50"></text></g><g><title>x86_pmu_enable (19 samples, 0.28%)</title><rect x="13.6350%" y="69" width="0.2810%" height="15" fill="rgb(248,164,17)"/><text x="13.8850%" y="79.50"></text></g><g><title>intel_tfa_pmu_enable_all (19 samples, 0.28%)</title><rect x="13.6350%" y="53" width="0.2810%" height="15" fill="rgb(222,171,42)"/><text x="13.8850%" y="63.50"></text></g><g><title>native_write_msr (19 samples, 0.28%)</title><rect x="13.6350%" y="37" width="0.2810%" height="15" fill="rgb(243,84,45)"/><text x="13.8850%" y="47.50"></text></g><g><title>down_read (23 samples, 0.34%)</title><rect x="13.5907%" y="181" width="0.3401%" height="15" fill="rgb(252,49,23)"/><text x="13.8407%" y="191.50"></text></g><g><title>rwsem_down_read_slowpath (23 samples, 0.34%)</title><rect x="13.5907%" y="165" width="0.3401%" height="15" fill="rgb(215,19,7)"/><text x="13.8407%" y="175.50"></text></g><g><title>schedule (20 samples, 0.30%)</title><rect x="13.6350%" y="149" width="0.2958%" height="15" fill="rgb(238,81,41)"/><text x="13.8850%" y="159.50"></text></g><g><title>__sched_text_start (20 samples, 0.30%)</title><rect x="13.6350%" y="133" width="0.2958%" height="15" fill="rgb(210,199,37)"/><text x="13.8850%" y="143.50"></text></g><g><title>finish_task_switch (20 samples, 0.30%)</title><rect x="13.6350%" y="117" width="0.2958%" height="15" fill="rgb(244,192,49)"/><text x="13.8850%" y="127.50"></text></g><g><title>__alloc_pages_nodemask (8 samples, 0.12%)</title><rect x="14.0047%" y="117" width="0.1183%" height="15" fill="rgb(226,211,11)"/><text x="14.2547%" y="127.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.10%)</title><rect x="14.0195%" y="101" width="0.1035%" height="15" fill="rgb(236,162,54)"/><text x="14.2695%" y="111.50"></text></g><g><title>alloc_pages_vma (11 samples, 0.16%)</title><rect x="13.9752%" y="133" width="0.1627%" height="15" fill="rgb(220,229,9)"/><text x="14.2252%" y="143.50"></text></g><g><title>page_fault (41 samples, 0.61%)</title><rect x="13.5907%" y="245" width="0.6063%" height="15" fill="rgb(250,87,22)"/><text x="13.8407%" y="255.50"></text></g><g><title>do_page_fault (41 samples, 0.61%)</title><rect x="13.5907%" y="229" width="0.6063%" height="15" fill="rgb(239,43,17)"/><text x="13.8407%" y="239.50"></text></g><g><title>__do_page_fault (41 samples, 0.61%)</title><rect x="13.5907%" y="213" width="0.6063%" height="15" fill="rgb(231,177,25)"/><text x="13.8407%" y="223.50"></text></g><g><title>do_user_addr_fault (41 samples, 0.61%)</title><rect x="13.5907%" y="197" width="0.6063%" height="15" fill="rgb(219,179,1)"/><text x="13.8407%" y="207.50"></text></g><g><title>handle_mm_fault (17 samples, 0.25%)</title><rect x="13.9456%" y="181" width="0.2514%" height="15" fill="rgb(238,219,53)"/><text x="14.1956%" y="191.50"></text></g><g><title>__handle_mm_fault (17 samples, 0.25%)</title><rect x="13.9456%" y="165" width="0.2514%" height="15" fill="rgb(232,167,36)"/><text x="14.1956%" y="175.50"></text></g><g><title>do_anonymous_page (15 samples, 0.22%)</title><rect x="13.9752%" y="149" width="0.2218%" height="15" fill="rgb(244,19,51)"/><text x="14.2252%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (54 samples, 0.80%)</title><rect x="13.5167%" y="293" width="0.7986%" height="15" fill="rgb(224,6,22)"/><text x="13.7667%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (54 samples, 0.80%)</title><rect x="13.5167%" y="277" width="0.7986%" height="15" fill="rgb(224,145,5)"/><text x="13.7667%" y="287.50"></text></g><g><title>core::ptr::write (54 samples, 0.80%)</title><rect x="13.5167%" y="261" width="0.7986%" height="15" fill="rgb(234,130,49)"/><text x="13.7667%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (71 samples, 1.05%)</title><rect x="13.2801%" y="389" width="1.0500%" height="15" fill="rgb(254,6,2)"/><text x="13.5301%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (71 samples, 1.05%)</title><rect x="13.2801%" y="373" width="1.0500%" height="15" fill="rgb(208,96,46)"/><text x="13.5301%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (63 samples, 0.93%)</title><rect x="13.3984%" y="357" width="0.9317%" height="15" fill="rgb(239,3,39)"/><text x="13.6484%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (63 samples, 0.93%)</title><rect x="13.3984%" y="341" width="0.9317%" height="15" fill="rgb(233,210,1)"/><text x="13.6484%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (63 samples, 0.93%)</title><rect x="13.3984%" y="325" width="0.9317%" height="15" fill="rgb(244,137,37)"/><text x="13.6484%" y="335.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (55 samples, 0.81%)</title><rect x="13.5167%" y="309" width="0.8134%" height="15" fill="rgb(240,136,2)"/><text x="13.7667%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (78 samples, 1.15%)</title><rect x="13.2801%" y="437" width="1.1535%" height="15" fill="rgb(239,18,37)"/><text x="13.5301%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (78 samples, 1.15%)</title><rect x="13.2801%" y="421" width="1.1535%" height="15" fill="rgb(218,185,22)"/><text x="13.5301%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (78 samples, 1.15%)</title><rect x="13.2801%" y="405" width="1.1535%" height="15" fill="rgb(225,218,4)"/><text x="13.5301%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 0.10%)</title><rect x="14.3301%" y="389" width="0.1035%" height="15" fill="rgb(230,182,32)"/><text x="14.5801%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 0.10%)</title><rect x="14.3301%" y="373" width="0.1035%" height="15" fill="rgb(242,56,43)"/><text x="14.5801%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.13%)</title><rect x="14.4336%" y="405" width="0.1331%" height="15" fill="rgb(233,99,24)"/><text x="14.6836%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (9 samples, 0.13%)</title><rect x="14.4336%" y="389" width="0.1331%" height="15" fill="rgb(234,209,42)"/><text x="14.6836%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (9 samples, 0.13%)</title><rect x="14.4336%" y="373" width="0.1331%" height="15" fill="rgb(227,7,12)"/><text x="14.6836%" y="383.50"></text></g><g><title>_int_free (8 samples, 0.12%)</title><rect x="14.4484%" y="357" width="0.1183%" height="15" fill="rgb(245,203,43)"/><text x="14.6984%" y="367.50"></text></g><g><title>heap_trim (8 samples, 0.12%)</title><rect x="14.4484%" y="341" width="0.1183%" height="15" fill="rgb(238,205,33)"/><text x="14.6984%" y="351.50"></text></g><g><title>shrink_heap (8 samples, 0.12%)</title><rect x="14.4484%" y="325" width="0.1183%" height="15" fill="rgb(231,56,7)"/><text x="14.6984%" y="335.50"></text></g><g><title>__GI_madvise (8 samples, 0.12%)</title><rect x="14.4484%" y="309" width="0.1183%" height="15" fill="rgb(244,186,29)"/><text x="14.6984%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 0.12%)</title><rect x="14.4484%" y="293" width="0.1183%" height="15" fill="rgb(234,111,31)"/><text x="14.6984%" y="303.50"></text></g><g><title>do_syscall_64 (8 samples, 0.12%)</title><rect x="14.4484%" y="277" width="0.1183%" height="15" fill="rgb(241,149,10)"/><text x="14.6984%" y="287.50"></text></g><g><title>__x64_sys_madvise (8 samples, 0.12%)</title><rect x="14.4484%" y="261" width="0.1183%" height="15" fill="rgb(249,206,44)"/><text x="14.6984%" y="271.50"></text></g><g><title>__do_sys_madvise (8 samples, 0.12%)</title><rect x="14.4484%" y="245" width="0.1183%" height="15" fill="rgb(251,153,30)"/><text x="14.6984%" y="255.50"></text></g><g><title>zap_page_range (8 samples, 0.12%)</title><rect x="14.4484%" y="229" width="0.1183%" height="15" fill="rgb(239,152,38)"/><text x="14.6984%" y="239.50"></text></g><g><title>__do_munmap (7 samples, 0.10%)</title><rect x="14.5667%" y="165" width="0.1035%" height="15" fill="rgb(249,139,47)"/><text x="14.8167%" y="175.50"></text></g><g><title>core::ptr::drop_in_place (20 samples, 0.30%)</title><rect x="14.4336%" y="437" width="0.2958%" height="15" fill="rgb(244,64,35)"/><text x="14.6836%" y="447.50"></text></g><g><title>core::ptr::drop_in_place (20 samples, 0.30%)</title><rect x="14.4336%" y="421" width="0.2958%" height="15" fill="rgb(216,46,15)"/><text x="14.6836%" y="431.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.16%)</title><rect x="14.5667%" y="405" width="0.1627%" height="15" fill="rgb(250,74,19)"/><text x="14.8167%" y="415.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.16%)</title><rect x="14.5667%" y="389" width="0.1627%" height="15" fill="rgb(249,42,33)"/><text x="14.8167%" y="399.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.16%)</title><rect x="14.5667%" y="373" width="0.1627%" height="15" fill="rgb(242,149,17)"/><text x="14.8167%" y="383.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (11 samples, 0.16%)</title><rect x="14.5667%" y="357" width="0.1627%" height="15" fill="rgb(244,29,21)"/><text x="14.8167%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (11 samples, 0.16%)</title><rect x="14.5667%" y="341" width="0.1627%" height="15" fill="rgb(220,130,37)"/><text x="14.8167%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.16%)</title><rect x="14.5667%" y="325" width="0.1627%" height="15" fill="rgb(211,67,2)"/><text x="14.8167%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.16%)</title><rect x="14.5667%" y="309" width="0.1627%" height="15" fill="rgb(235,68,52)"/><text x="14.8167%" y="319.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.16%)</title><rect x="14.5667%" y="293" width="0.1627%" height="15" fill="rgb(246,142,3)"/><text x="14.8167%" y="303.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (11 samples, 0.16%)</title><rect x="14.5667%" y="277" width="0.1627%" height="15" fill="rgb(241,25,7)"/><text x="14.8167%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (11 samples, 0.16%)</title><rect x="14.5667%" y="261" width="0.1627%" height="15" fill="rgb(242,119,39)"/><text x="14.8167%" y="271.50"></text></g><g><title>__GI_munmap (11 samples, 0.16%)</title><rect x="14.5667%" y="245" width="0.1627%" height="15" fill="rgb(241,98,45)"/><text x="14.8167%" y="255.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (11 samples, 0.16%)</title><rect x="14.5667%" y="229" width="0.1627%" height="15" fill="rgb(254,28,30)"/><text x="14.8167%" y="239.50"></text></g><g><title>do_syscall_64 (11 samples, 0.16%)</title><rect x="14.5667%" y="213" width="0.1627%" height="15" fill="rgb(241,142,54)"/><text x="14.8167%" y="223.50"></text></g><g><title>__x64_sys_munmap (11 samples, 0.16%)</title><rect x="14.5667%" y="197" width="0.1627%" height="15" fill="rgb(222,85,15)"/><text x="14.8167%" y="207.50"></text></g><g><title>__vm_munmap (11 samples, 0.16%)</title><rect x="14.5667%" y="181" width="0.1627%" height="15" fill="rgb(210,85,47)"/><text x="14.8167%" y="191.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (7 samples, 0.10%)</title><rect x="15.6019%" y="389" width="0.1035%" height="15" fill="rgb(224,206,25)"/><text x="15.8519%" y="399.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (26 samples, 0.38%)</title><rect x="15.4688%" y="421" width="0.3845%" height="15" fill="rgb(243,201,19)"/><text x="15.7188%" y="431.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (26 samples, 0.38%)</title><rect x="15.4688%" y="405" width="0.3845%" height="15" fill="rgb(236,59,4)"/><text x="15.7188%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (13 samples, 0.19%)</title><rect x="16.1934%" y="373" width="0.1923%" height="15" fill="rgb(254,179,45)"/><text x="16.4434%" y="383.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::mul (20 samples, 0.30%)</title><rect x="16.1934%" y="405" width="0.2958%" height="15" fill="rgb(226,14,10)"/><text x="16.4434%" y="415.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (20 samples, 0.30%)</title><rect x="16.1934%" y="389" width="0.2958%" height="15" fill="rgb(244,27,41)"/><text x="16.4434%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (7 samples, 0.10%)</title><rect x="16.3857%" y="373" width="0.1035%" height="15" fill="rgb(235,35,32)"/><text x="16.6357%" y="383.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::sub (14 samples, 0.21%)</title><rect x="16.4892%" y="405" width="0.2070%" height="15" fill="rgb(218,68,31)"/><text x="16.7392%" y="415.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (14 samples, 0.21%)</title><rect x="16.4892%" y="389" width="0.2070%" height="15" fill="rgb(207,120,37)"/><text x="16.7392%" y="399.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (14 samples, 0.21%)</title><rect x="16.4892%" y="373" width="0.2070%" height="15" fill="rgb(227,98,0)"/><text x="16.7392%" y="383.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (8 samples, 0.12%)</title><rect x="16.7850%" y="405" width="0.1183%" height="15" fill="rgb(207,7,3)"/><text x="17.0350%" y="415.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (8 samples, 0.12%)</title><rect x="16.7850%" y="389" width="0.1183%" height="15" fill="rgb(206,98,19)"/><text x="17.0350%" y="399.50"></text></g><g><title>mass::math::fft_mult (290 samples, 4.29%)</title><rect x="12.6590%" y="453" width="4.2887%" height="15" fill="rgb(217,5,26)"/><text x="12.9090%" y="463.50">mass:..</text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::perform_fft (146 samples, 2.16%)</title><rect x="14.7885%" y="437" width="2.1591%" height="15" fill="rgb(235,190,38)"/><text x="15.0385%" y="447.50">r..</text></g><g><title>rustfft::algorithm::radix4::butterfly_4 (73 samples, 1.08%)</title><rect x="15.8681%" y="421" width="1.0796%" height="15" fill="rgb(247,86,24)"/><text x="16.1181%" y="431.50"></text></g><g><title>mass::stats::moving_avg (15 samples, 0.22%)</title><rect x="16.9476%" y="453" width="0.2218%" height="15" fill="rgb(205,101,16)"/><text x="17.1976%" y="463.50"></text></g><g><title>mass::stats::rolling_mean (15 samples, 0.22%)</title><rect x="16.9476%" y="437" width="0.2218%" height="15" fill="rgb(246,168,33)"/><text x="17.1976%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (15 samples, 0.22%)</title><rect x="16.9476%" y="421" width="0.2218%" height="15" fill="rgb(231,114,1)"/><text x="17.1976%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (15 samples, 0.22%)</title><rect x="16.9476%" y="405" width="0.2218%" height="15" fill="rgb(207,184,53)"/><text x="17.1976%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 0.22%)</title><rect x="16.9476%" y="389" width="0.2218%" height="15" fill="rgb(224,95,51)"/><text x="17.1976%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (15 samples, 0.22%)</title><rect x="16.9476%" y="373" width="0.2218%" height="15" fill="rgb(212,188,45)"/><text x="17.1976%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (15 samples, 0.22%)</title><rect x="16.9476%" y="357" width="0.2218%" height="15" fill="rgb(223,154,38)"/><text x="17.1976%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.21%)</title><rect x="16.9624%" y="341" width="0.2070%" height="15" fill="rgb(251,22,52)"/><text x="17.2124%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.21%)</title><rect x="16.9624%" y="325" width="0.2070%" height="15" fill="rgb(229,209,22)"/><text x="17.2124%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.21%)</title><rect x="16.9624%" y="309" width="0.2070%" height="15" fill="rgb(234,138,34)"/><text x="17.2124%" y="319.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (14 samples, 0.21%)</title><rect x="16.9624%" y="293" width="0.2070%" height="15" fill="rgb(212,95,11)"/><text x="17.2124%" y="303.50"></text></g><g><title>mass::stats::rolling_mean::{{closure}} (13 samples, 0.19%)</title><rect x="16.9772%" y="277" width="0.1923%" height="15" fill="rgb(240,179,47)"/><text x="17.2272%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (7 samples, 0.10%)</title><rect x="17.1843%" y="277" width="0.1035%" height="15" fill="rgb(240,163,11)"/><text x="17.4343%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (7 samples, 0.10%)</title><rect x="17.1843%" y="261" width="0.1035%" height="15" fill="rgb(236,37,12)"/><text x="17.4343%" y="271.50"></text></g><g><title>rayon_core::registry::in_worker (526 samples, 7.78%)</title><rect x="9.8787%" y="1397" width="7.7788%" height="15" fill="rgb(232,164,16)"/><text x="10.1287%" y="1407.50">rayon_core:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="1381" width="7.7788%" height="15" fill="rgb(244,205,15)"/><text x="10.1287%" y="1391.50">rayon_core:..</text></g><g><title>rayon_core::unwind::halt_unwinding (526 samples, 7.78%)</title><rect x="9.8787%" y="1365" width="7.7788%" height="15" fill="rgb(223,117,47)"/><text x="10.1287%" y="1375.50">rayon_core:..</text></g><g><title>std::panic::catch_unwind (526 samples, 7.78%)</title><rect x="9.8787%" y="1349" width="7.7788%" height="15" fill="rgb(244,107,35)"/><text x="10.1287%" y="1359.50">std::panic:..</text></g><g><title>std::panicking::try (526 samples, 7.78%)</title><rect x="9.8787%" y="1333" width="7.7788%" height="15" fill="rgb(205,140,8)"/><text x="10.1287%" y="1343.50">std::panick..</text></g><g><title>std::panicking::try::do_call (526 samples, 7.78%)</title><rect x="9.8787%" y="1317" width="7.7788%" height="15" fill="rgb(228,84,46)"/><text x="10.1287%" y="1327.50">std::panick..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (526 samples, 7.78%)</title><rect x="9.8787%" y="1301" width="7.7788%" height="15" fill="rgb(254,188,9)"/><text x="10.1287%" y="1311.50">&lt;std::panic..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="1285" width="7.7788%" height="15" fill="rgb(206,112,54)"/><text x="10.1287%" y="1295.50">rayon_core:..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="1269" width="7.7788%" height="15" fill="rgb(216,84,49)"/><text x="10.1287%" y="1279.50">rayon::iter..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (526 samples, 7.78%)</title><rect x="9.8787%" y="1253" width="7.7788%" height="15" fill="rgb(214,194,35)"/><text x="10.1287%" y="1263.50">rayon::iter..</text></g><g><title>rayon_core::join::join_context (526 samples, 7.78%)</title><rect x="9.8787%" y="1237" width="7.7788%" height="15" fill="rgb(249,28,3)"/><text x="10.1287%" y="1247.50">rayon_core:..</text></g><g><title>rayon_core::registry::in_worker (526 samples, 7.78%)</title><rect x="9.8787%" y="1221" width="7.7788%" height="15" fill="rgb(222,56,52)"/><text x="10.1287%" y="1231.50">rayon_core:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="1205" width="7.7788%" height="15" fill="rgb(245,217,50)"/><text x="10.1287%" y="1215.50">rayon_core:..</text></g><g><title>rayon_core::unwind::halt_unwinding (526 samples, 7.78%)</title><rect x="9.8787%" y="1189" width="7.7788%" height="15" fill="rgb(213,201,24)"/><text x="10.1287%" y="1199.50">rayon_core:..</text></g><g><title>std::panic::catch_unwind (526 samples, 7.78%)</title><rect x="9.8787%" y="1173" width="7.7788%" height="15" fill="rgb(248,116,28)"/><text x="10.1287%" y="1183.50">std::panic:..</text></g><g><title>std::panicking::try (526 samples, 7.78%)</title><rect x="9.8787%" y="1157" width="7.7788%" height="15" fill="rgb(219,72,43)"/><text x="10.1287%" y="1167.50">std::panick..</text></g><g><title>std::panicking::try::do_call (526 samples, 7.78%)</title><rect x="9.8787%" y="1141" width="7.7788%" height="15" fill="rgb(209,138,14)"/><text x="10.1287%" y="1151.50">std::panick..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (526 samples, 7.78%)</title><rect x="9.8787%" y="1125" width="7.7788%" height="15" fill="rgb(222,18,33)"/><text x="10.1287%" y="1135.50">&lt;std::panic..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="1109" width="7.7788%" height="15" fill="rgb(213,199,7)"/><text x="10.1287%" y="1119.50">rayon_core:..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="1093" width="7.7788%" height="15" fill="rgb(250,110,10)"/><text x="10.1287%" y="1103.50">rayon::iter..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (526 samples, 7.78%)</title><rect x="9.8787%" y="1077" width="7.7788%" height="15" fill="rgb(248,123,6)"/><text x="10.1287%" y="1087.50">rayon::iter..</text></g><g><title>rayon_core::join::join_context (526 samples, 7.78%)</title><rect x="9.8787%" y="1061" width="7.7788%" height="15" fill="rgb(206,91,31)"/><text x="10.1287%" y="1071.50">rayon_core:..</text></g><g><title>rayon_core::registry::in_worker (526 samples, 7.78%)</title><rect x="9.8787%" y="1045" width="7.7788%" height="15" fill="rgb(211,154,13)"/><text x="10.1287%" y="1055.50">rayon_core:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="1029" width="7.7788%" height="15" fill="rgb(225,148,7)"/><text x="10.1287%" y="1039.50">rayon_core:..</text></g><g><title>rayon_core::unwind::halt_unwinding (526 samples, 7.78%)</title><rect x="9.8787%" y="1013" width="7.7788%" height="15" fill="rgb(220,160,43)"/><text x="10.1287%" y="1023.50">rayon_core:..</text></g><g><title>std::panic::catch_unwind (526 samples, 7.78%)</title><rect x="9.8787%" y="997" width="7.7788%" height="15" fill="rgb(213,52,39)"/><text x="10.1287%" y="1007.50">std::panic:..</text></g><g><title>std::panicking::try (526 samples, 7.78%)</title><rect x="9.8787%" y="981" width="7.7788%" height="15" fill="rgb(243,137,7)"/><text x="10.1287%" y="991.50">std::panick..</text></g><g><title>std::panicking::try::do_call (526 samples, 7.78%)</title><rect x="9.8787%" y="965" width="7.7788%" height="15" fill="rgb(230,79,13)"/><text x="10.1287%" y="975.50">std::panick..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (526 samples, 7.78%)</title><rect x="9.8787%" y="949" width="7.7788%" height="15" fill="rgb(247,105,23)"/><text x="10.1287%" y="959.50">&lt;std::panic..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="933" width="7.7788%" height="15" fill="rgb(223,179,41)"/><text x="10.1287%" y="943.50">rayon_core:..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="917" width="7.7788%" height="15" fill="rgb(218,9,34)"/><text x="10.1287%" y="927.50">rayon::iter..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (526 samples, 7.78%)</title><rect x="9.8787%" y="901" width="7.7788%" height="15" fill="rgb(222,106,8)"/><text x="10.1287%" y="911.50">rayon::iter..</text></g><g><title>rayon_core::join::join_context (526 samples, 7.78%)</title><rect x="9.8787%" y="885" width="7.7788%" height="15" fill="rgb(211,220,0)"/><text x="10.1287%" y="895.50">rayon_core:..</text></g><g><title>rayon_core::registry::in_worker (526 samples, 7.78%)</title><rect x="9.8787%" y="869" width="7.7788%" height="15" fill="rgb(229,52,16)"/><text x="10.1287%" y="879.50">rayon_core:..</text></g><g><title>rayon_core::join::join_context::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="853" width="7.7788%" height="15" fill="rgb(212,155,18)"/><text x="10.1287%" y="863.50">rayon_core:..</text></g><g><title>rayon_core::unwind::halt_unwinding (526 samples, 7.78%)</title><rect x="9.8787%" y="837" width="7.7788%" height="15" fill="rgb(242,21,14)"/><text x="10.1287%" y="847.50">rayon_core:..</text></g><g><title>std::panic::catch_unwind (526 samples, 7.78%)</title><rect x="9.8787%" y="821" width="7.7788%" height="15" fill="rgb(222,19,48)"/><text x="10.1287%" y="831.50">std::panic:..</text></g><g><title>std::panicking::try (526 samples, 7.78%)</title><rect x="9.8787%" y="805" width="7.7788%" height="15" fill="rgb(232,45,27)"/><text x="10.1287%" y="815.50">std::panick..</text></g><g><title>std::panicking::try::do_call (526 samples, 7.78%)</title><rect x="9.8787%" y="789" width="7.7788%" height="15" fill="rgb(249,103,42)"/><text x="10.1287%" y="799.50">std::panick..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (526 samples, 7.78%)</title><rect x="9.8787%" y="773" width="7.7788%" height="15" fill="rgb(246,81,33)"/><text x="10.1287%" y="783.50">&lt;std::panic..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="757" width="7.7788%" height="15" fill="rgb(252,33,42)"/><text x="10.1287%" y="767.50">rayon_core:..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (526 samples, 7.78%)</title><rect x="9.8787%" y="741" width="7.7788%" height="15" fill="rgb(209,212,41)"/><text x="10.1287%" y="751.50">rayon::iter..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (526 samples, 7.78%)</title><rect x="9.8787%" y="725" width="7.7788%" height="15" fill="rgb(207,154,6)"/><text x="10.1287%" y="735.50">rayon::iter..</text></g><g><title>rayon_core::join::join_context (353 samples, 5.22%)</title><rect x="12.4371%" y="709" width="5.2203%" height="15" fill="rgb(223,64,47)"/><text x="12.6871%" y="719.50">rayon_..</text></g><g><title>rayon_core::registry::in_worker (353 samples, 5.22%)</title><rect x="12.4371%" y="693" width="5.2203%" height="15" fill="rgb(211,161,38)"/><text x="12.6871%" y="703.50">rayon_..</text></g><g><title>rayon_core::join::join_context::{{closure}} (353 samples, 5.22%)</title><rect x="12.4371%" y="677" width="5.2203%" height="15" fill="rgb(219,138,40)"/><text x="12.6871%" y="687.50">rayon_..</text></g><g><title>rayon_core::unwind::halt_unwinding (353 samples, 5.22%)</title><rect x="12.4371%" y="661" width="5.2203%" height="15" fill="rgb(241,228,46)"/><text x="12.6871%" y="671.50">rayon_..</text></g><g><title>std::panic::catch_unwind (353 samples, 5.22%)</title><rect x="12.4371%" y="645" width="5.2203%" height="15" fill="rgb(223,209,38)"/><text x="12.6871%" y="655.50">std::p..</text></g><g><title>std::panicking::try (353 samples, 5.22%)</title><rect x="12.4371%" y="629" width="5.2203%" height="15" fill="rgb(236,164,45)"/><text x="12.6871%" y="639.50">std::p..</text></g><g><title>std::panicking::try::do_call (353 samples, 5.22%)</title><rect x="12.4371%" y="613" width="5.2203%" height="15" fill="rgb(231,15,5)"/><text x="12.6871%" y="623.50">std::p..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (353 samples, 5.22%)</title><rect x="12.4371%" y="597" width="5.2203%" height="15" fill="rgb(252,35,15)"/><text x="12.6871%" y="607.50">&lt;std::..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (353 samples, 5.22%)</title><rect x="12.4371%" y="581" width="5.2203%" height="15" fill="rgb(248,181,18)"/><text x="12.6871%" y="591.50">rayon_..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (353 samples, 5.22%)</title><rect x="12.4371%" y="565" width="5.2203%" height="15" fill="rgb(233,39,42)"/><text x="12.6871%" y="575.50">rayon:..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (353 samples, 5.22%)</title><rect x="12.4371%" y="549" width="5.2203%" height="15" fill="rgb(238,110,33)"/><text x="12.6871%" y="559.50">rayon:..</text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (353 samples, 5.22%)</title><rect x="12.4371%" y="533" width="5.2203%" height="15" fill="rgb(233,195,10)"/><text x="12.6871%" y="543.50">&lt;rayon..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (353 samples, 5.22%)</title><rect x="12.4371%" y="517" width="5.2203%" height="15" fill="rgb(254,105,3)"/><text x="12.6871%" y="527.50">&lt;rayon..</text></g><g><title>mass::mass_batch::{{closure}} (353 samples, 5.22%)</title><rect x="12.4371%" y="501" width="5.2203%" height="15" fill="rgb(221,225,9)"/><text x="12.6871%" y="511.50">mass::..</text></g><g><title>mass::min_subsequence_distance (353 samples, 5.22%)</title><rect x="12.4371%" y="485" width="5.2203%" height="15" fill="rgb(224,227,45)"/><text x="12.6871%" y="495.50">mass::..</text></g><g><title>mass::mass (353 samples, 5.22%)</title><rect x="12.4371%" y="469" width="5.2203%" height="15" fill="rgb(229,198,43)"/><text x="12.6871%" y="479.50">mass::..</text></g><g><title>mass::stats::moving_std (33 samples, 0.49%)</title><rect x="17.1695%" y="453" width="0.4880%" height="15" fill="rgb(206,209,35)"/><text x="17.4195%" y="463.50"></text></g><g><title>mass::stats::rolling_std (33 samples, 0.49%)</title><rect x="17.1695%" y="437" width="0.4880%" height="15" fill="rgb(245,195,53)"/><text x="17.4195%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (33 samples, 0.49%)</title><rect x="17.1695%" y="421" width="0.4880%" height="15" fill="rgb(240,92,26)"/><text x="17.4195%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (33 samples, 0.49%)</title><rect x="17.1695%" y="405" width="0.4880%" height="15" fill="rgb(207,40,23)"/><text x="17.4195%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 0.49%)</title><rect x="17.1695%" y="389" width="0.4880%" height="15" fill="rgb(223,111,35)"/><text x="17.4195%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (33 samples, 0.49%)</title><rect x="17.1695%" y="373" width="0.4880%" height="15" fill="rgb(229,147,28)"/><text x="17.4195%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (33 samples, 0.49%)</title><rect x="17.1695%" y="357" width="0.4880%" height="15" fill="rgb(211,29,28)"/><text x="17.4195%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (33 samples, 0.49%)</title><rect x="17.1695%" y="341" width="0.4880%" height="15" fill="rgb(228,72,33)"/><text x="17.4195%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (33 samples, 0.49%)</title><rect x="17.1695%" y="325" width="0.4880%" height="15" fill="rgb(205,214,31)"/><text x="17.4195%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (33 samples, 0.49%)</title><rect x="17.1695%" y="309" width="0.4880%" height="15" fill="rgb(224,111,15)"/><text x="17.4195%" y="319.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (32 samples, 0.47%)</title><rect x="17.1843%" y="293" width="0.4732%" height="15" fill="rgb(253,21,26)"/><text x="17.4343%" y="303.50"></text></g><g><title>mass::stats::rolling_std::{{closure}} (25 samples, 0.37%)</title><rect x="17.2878%" y="277" width="0.3697%" height="15" fill="rgb(245,139,43)"/><text x="17.5378%" y="287.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (15 samples, 0.22%)</title><rect x="17.4357%" y="261" width="0.2218%" height="15" fill="rgb(252,170,7)"/><text x="17.6857%" y="271.50"></text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::new (9 samples, 0.13%)</title><rect x="17.6575%" y="1397" width="0.1331%" height="15" fill="rgb(231,118,14)"/><text x="17.9075%" y="1407.50"></text></g><g><title>rustfft::twiddles::single_twiddle (9 samples, 0.13%)</title><rect x="17.6575%" y="1381" width="0.1331%" height="15" fill="rgb(238,83,0)"/><text x="17.9075%" y="1391.50"></text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (9 samples, 0.13%)</title><rect x="17.6575%" y="1365" width="0.1331%" height="15" fill="rgb(221,39,39)"/><text x="17.9075%" y="1375.50"></text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (9 samples, 0.13%)</title><rect x="17.6575%" y="1349" width="0.1331%" height="15" fill="rgb(222,119,46)"/><text x="17.9075%" y="1359.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::cos (9 samples, 0.13%)</title><rect x="17.6575%" y="1333" width="0.1331%" height="15" fill="rgb(222,165,49)"/><text x="17.9075%" y="1343.50"></text></g><g><title>mass::stats::moving_avg (20 samples, 0.30%)</title><rect x="17.9681%" y="501" width="0.2958%" height="15" fill="rgb(219,113,52)"/><text x="18.2181%" y="511.50"></text></g><g><title>mass::stats::rolling_mean (20 samples, 0.30%)</title><rect x="17.9681%" y="485" width="0.2958%" height="15" fill="rgb(214,7,15)"/><text x="18.2181%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (20 samples, 0.30%)</title><rect x="17.9681%" y="469" width="0.2958%" height="15" fill="rgb(235,32,4)"/><text x="18.2181%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (20 samples, 0.30%)</title><rect x="17.9681%" y="453" width="0.2958%" height="15" fill="rgb(238,90,54)"/><text x="18.2181%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (20 samples, 0.30%)</title><rect x="17.9681%" y="437" width="0.2958%" height="15" fill="rgb(213,208,19)"/><text x="18.2181%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (20 samples, 0.30%)</title><rect x="17.9681%" y="421" width="0.2958%" height="15" fill="rgb(233,156,4)"/><text x="18.2181%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (20 samples, 0.30%)</title><rect x="17.9681%" y="405" width="0.2958%" height="15" fill="rgb(207,194,5)"/><text x="18.2181%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (20 samples, 0.30%)</title><rect x="17.9681%" y="389" width="0.2958%" height="15" fill="rgb(206,111,30)"/><text x="18.2181%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (20 samples, 0.30%)</title><rect x="17.9681%" y="373" width="0.2958%" height="15" fill="rgb(243,70,54)"/><text x="18.2181%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (20 samples, 0.30%)</title><rect x="17.9681%" y="357" width="0.2958%" height="15" fill="rgb(242,28,8)"/><text x="18.2181%" y="367.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (18 samples, 0.27%)</title><rect x="17.9976%" y="341" width="0.2662%" height="15" fill="rgb(219,106,18)"/><text x="18.2476%" y="351.50"></text></g><g><title>mass::stats::rolling_mean::{{closure}} (18 samples, 0.27%)</title><rect x="17.9976%" y="325" width="0.2662%" height="15" fill="rgb(244,222,10)"/><text x="18.2476%" y="335.50"></text></g><g><title>page_fault (9 samples, 0.13%)</title><rect x="18.3082%" y="277" width="0.1331%" height="15" fill="rgb(236,179,52)"/><text x="18.5582%" y="287.50"></text></g><g><title>do_page_fault (9 samples, 0.13%)</title><rect x="18.3082%" y="261" width="0.1331%" height="15" fill="rgb(213,23,39)"/><text x="18.5582%" y="271.50"></text></g><g><title>__do_page_fault (9 samples, 0.13%)</title><rect x="18.3082%" y="245" width="0.1331%" height="15" fill="rgb(238,48,10)"/><text x="18.5582%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (11 samples, 0.16%)</title><rect x="18.3082%" y="325" width="0.1627%" height="15" fill="rgb(251,196,23)"/><text x="18.5582%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (11 samples, 0.16%)</title><rect x="18.3082%" y="309" width="0.1627%" height="15" fill="rgb(250,152,24)"/><text x="18.5582%" y="319.50"></text></g><g><title>core::ptr::write (11 samples, 0.16%)</title><rect x="18.3082%" y="293" width="0.1627%" height="15" fill="rgb(209,150,17)"/><text x="18.5582%" y="303.50"></text></g><g><title>start_thread (70 samples, 1.04%)</title><rect x="17.8793%" y="1397" width="1.0352%" height="15" fill="rgb(234,202,34)"/><text x="18.1293%" y="1407.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (70 samples, 1.04%)</title><rect x="17.8793%" y="1381" width="1.0352%" height="15" fill="rgb(253,148,53)"/><text x="18.1293%" y="1391.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (70 samples, 1.04%)</title><rect x="17.8793%" y="1365" width="1.0352%" height="15" fill="rgb(218,129,16)"/><text x="18.1293%" y="1375.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (70 samples, 1.04%)</title><rect x="17.8793%" y="1349" width="1.0352%" height="15" fill="rgb(216,85,19)"/><text x="18.1293%" y="1359.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (70 samples, 1.04%)</title><rect x="17.8793%" y="1333" width="1.0352%" height="15" fill="rgb(235,228,7)"/><text x="18.1293%" y="1343.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="1317" width="1.0352%" height="15" fill="rgb(245,175,0)"/><text x="18.1293%" y="1327.50"></text></g><g><title>std::panic::catch_unwind (70 samples, 1.04%)</title><rect x="17.8793%" y="1301" width="1.0352%" height="15" fill="rgb(208,168,36)"/><text x="18.1293%" y="1311.50"></text></g><g><title>std::panicking::try (70 samples, 1.04%)</title><rect x="17.8793%" y="1285" width="1.0352%" height="15" fill="rgb(246,171,24)"/><text x="18.1293%" y="1295.50"></text></g><g><title>std::panicking::try::do_call (70 samples, 1.04%)</title><rect x="17.8793%" y="1269" width="1.0352%" height="15" fill="rgb(215,142,24)"/><text x="18.1293%" y="1279.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (70 samples, 1.04%)</title><rect x="17.8793%" y="1253" width="1.0352%" height="15" fill="rgb(250,187,7)"/><text x="18.1293%" y="1263.50"></text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="1237" width="1.0352%" height="15" fill="rgb(228,66,33)"/><text x="18.1293%" y="1247.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (70 samples, 1.04%)</title><rect x="17.8793%" y="1221" width="1.0352%" height="15" fill="rgb(234,215,21)"/><text x="18.1293%" y="1231.50"></text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="1205" width="1.0352%" height="15" fill="rgb(222,191,20)"/><text x="18.1293%" y="1215.50"></text></g><g><title>rayon_core::registry::ThreadBuilder::run (70 samples, 1.04%)</title><rect x="17.8793%" y="1189" width="1.0352%" height="15" fill="rgb(245,79,54)"/><text x="18.1293%" y="1199.50"></text></g><g><title>rayon_core::registry::main_loop (70 samples, 1.04%)</title><rect x="17.8793%" y="1173" width="1.0352%" height="15" fill="rgb(240,10,37)"/><text x="18.1293%" y="1183.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until (70 samples, 1.04%)</title><rect x="17.8793%" y="1157" width="1.0352%" height="15" fill="rgb(214,192,32)"/><text x="18.1293%" y="1167.50"></text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (70 samples, 1.04%)</title><rect x="17.8793%" y="1141" width="1.0352%" height="15" fill="rgb(209,36,54)"/><text x="18.1293%" y="1151.50"></text></g><g><title>rayon_core::registry::WorkerThread::execute (70 samples, 1.04%)</title><rect x="17.8793%" y="1125" width="1.0352%" height="15" fill="rgb(220,10,11)"/><text x="18.1293%" y="1135.50"></text></g><g><title>rayon_core::job::JobRef::execute (70 samples, 1.04%)</title><rect x="17.8793%" y="1109" width="1.0352%" height="15" fill="rgb(221,106,17)"/><text x="18.1293%" y="1119.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (70 samples, 1.04%)</title><rect x="17.8793%" y="1093" width="1.0352%" height="15" fill="rgb(251,142,44)"/><text x="18.1293%" y="1103.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (70 samples, 1.04%)</title><rect x="17.8793%" y="1077" width="1.0352%" height="15" fill="rgb(238,13,15)"/><text x="18.1293%" y="1087.50"></text></g><g><title>std::panic::catch_unwind (70 samples, 1.04%)</title><rect x="17.8793%" y="1061" width="1.0352%" height="15" fill="rgb(208,107,27)"/><text x="18.1293%" y="1071.50"></text></g><g><title>std::panicking::try (70 samples, 1.04%)</title><rect x="17.8793%" y="1045" width="1.0352%" height="15" fill="rgb(205,136,37)"/><text x="18.1293%" y="1055.50"></text></g><g><title>std::panicking::try::do_call (70 samples, 1.04%)</title><rect x="17.8793%" y="1029" width="1.0352%" height="15" fill="rgb(250,205,27)"/><text x="18.1293%" y="1039.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (70 samples, 1.04%)</title><rect x="17.8793%" y="1013" width="1.0352%" height="15" fill="rgb(210,80,43)"/><text x="18.1293%" y="1023.50"></text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="997" width="1.0352%" height="15" fill="rgb(247,160,36)"/><text x="18.1293%" y="1007.50"></text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="981" width="1.0352%" height="15" fill="rgb(234,13,49)"/><text x="18.1293%" y="991.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="965" width="1.0352%" height="15" fill="rgb(234,122,0)"/><text x="18.1293%" y="975.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (70 samples, 1.04%)</title><rect x="17.8793%" y="949" width="1.0352%" height="15" fill="rgb(207,146,38)"/><text x="18.1293%" y="959.50"></text></g><g><title>rayon_core::join::join_context (70 samples, 1.04%)</title><rect x="17.8793%" y="933" width="1.0352%" height="15" fill="rgb(207,177,25)"/><text x="18.1293%" y="943.50"></text></g><g><title>rayon_core::registry::in_worker (70 samples, 1.04%)</title><rect x="17.8793%" y="917" width="1.0352%" height="15" fill="rgb(211,178,42)"/><text x="18.1293%" y="927.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="901" width="1.0352%" height="15" fill="rgb(230,69,54)"/><text x="18.1293%" y="911.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (70 samples, 1.04%)</title><rect x="17.8793%" y="885" width="1.0352%" height="15" fill="rgb(214,135,41)"/><text x="18.1293%" y="895.50"></text></g><g><title>std::panic::catch_unwind (70 samples, 1.04%)</title><rect x="17.8793%" y="869" width="1.0352%" height="15" fill="rgb(237,67,25)"/><text x="18.1293%" y="879.50"></text></g><g><title>std::panicking::try (70 samples, 1.04%)</title><rect x="17.8793%" y="853" width="1.0352%" height="15" fill="rgb(222,189,50)"/><text x="18.1293%" y="863.50"></text></g><g><title>std::panicking::try::do_call (70 samples, 1.04%)</title><rect x="17.8793%" y="837" width="1.0352%" height="15" fill="rgb(245,148,34)"/><text x="18.1293%" y="847.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (70 samples, 1.04%)</title><rect x="17.8793%" y="821" width="1.0352%" height="15" fill="rgb(222,29,6)"/><text x="18.1293%" y="831.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="805" width="1.0352%" height="15" fill="rgb(221,189,43)"/><text x="18.1293%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="789" width="1.0352%" height="15" fill="rgb(207,36,27)"/><text x="18.1293%" y="799.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (70 samples, 1.04%)</title><rect x="17.8793%" y="773" width="1.0352%" height="15" fill="rgb(217,90,24)"/><text x="18.1293%" y="783.50"></text></g><g><title>rayon_core::join::join_context (70 samples, 1.04%)</title><rect x="17.8793%" y="757" width="1.0352%" height="15" fill="rgb(224,66,35)"/><text x="18.1293%" y="767.50"></text></g><g><title>rayon_core::registry::in_worker (70 samples, 1.04%)</title><rect x="17.8793%" y="741" width="1.0352%" height="15" fill="rgb(221,13,50)"/><text x="18.1293%" y="751.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="725" width="1.0352%" height="15" fill="rgb(236,68,49)"/><text x="18.1293%" y="735.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (70 samples, 1.04%)</title><rect x="17.8793%" y="709" width="1.0352%" height="15" fill="rgb(229,146,28)"/><text x="18.1293%" y="719.50"></text></g><g><title>std::panic::catch_unwind (70 samples, 1.04%)</title><rect x="17.8793%" y="693" width="1.0352%" height="15" fill="rgb(225,31,38)"/><text x="18.1293%" y="703.50"></text></g><g><title>std::panicking::try (70 samples, 1.04%)</title><rect x="17.8793%" y="677" width="1.0352%" height="15" fill="rgb(250,208,3)"/><text x="18.1293%" y="687.50"></text></g><g><title>std::panicking::try::do_call (70 samples, 1.04%)</title><rect x="17.8793%" y="661" width="1.0352%" height="15" fill="rgb(246,54,23)"/><text x="18.1293%" y="671.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (70 samples, 1.04%)</title><rect x="17.8793%" y="645" width="1.0352%" height="15" fill="rgb(243,76,11)"/><text x="18.1293%" y="655.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="629" width="1.0352%" height="15" fill="rgb(245,21,50)"/><text x="18.1293%" y="639.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="613" width="1.0352%" height="15" fill="rgb(228,9,43)"/><text x="18.1293%" y="623.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (70 samples, 1.04%)</title><rect x="17.8793%" y="597" width="1.0352%" height="15" fill="rgb(208,100,47)"/><text x="18.1293%" y="607.50"></text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (70 samples, 1.04%)</title><rect x="17.8793%" y="581" width="1.0352%" height="15" fill="rgb(232,26,8)"/><text x="18.1293%" y="591.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (70 samples, 1.04%)</title><rect x="17.8793%" y="565" width="1.0352%" height="15" fill="rgb(216,166,38)"/><text x="18.1293%" y="575.50"></text></g><g><title>mass::mass_batch::{{closure}} (70 samples, 1.04%)</title><rect x="17.8793%" y="549" width="1.0352%" height="15" fill="rgb(251,202,51)"/><text x="18.1293%" y="559.50"></text></g><g><title>mass::min_subsequence_distance (70 samples, 1.04%)</title><rect x="17.8793%" y="533" width="1.0352%" height="15" fill="rgb(254,216,34)"/><text x="18.1293%" y="543.50"></text></g><g><title>mass::mass (70 samples, 1.04%)</title><rect x="17.8793%" y="517" width="1.0352%" height="15" fill="rgb(251,32,27)"/><text x="18.1293%" y="527.50"></text></g><g><title>mass::stats::moving_std (44 samples, 0.65%)</title><rect x="18.2638%" y="501" width="0.6507%" height="15" fill="rgb(208,127,28)"/><text x="18.5138%" y="511.50"></text></g><g><title>mass::stats::rolling_std (44 samples, 0.65%)</title><rect x="18.2638%" y="485" width="0.6507%" height="15" fill="rgb(224,137,22)"/><text x="18.5138%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (44 samples, 0.65%)</title><rect x="18.2638%" y="469" width="0.6507%" height="15" fill="rgb(254,70,32)"/><text x="18.5138%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (44 samples, 0.65%)</title><rect x="18.2638%" y="453" width="0.6507%" height="15" fill="rgb(229,75,37)"/><text x="18.5138%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 0.65%)</title><rect x="18.2638%" y="437" width="0.6507%" height="15" fill="rgb(252,64,23)"/><text x="18.5138%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (44 samples, 0.65%)</title><rect x="18.2638%" y="421" width="0.6507%" height="15" fill="rgb(232,162,48)"/><text x="18.5138%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (44 samples, 0.65%)</title><rect x="18.2638%" y="405" width="0.6507%" height="15" fill="rgb(246,160,12)"/><text x="18.5138%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (44 samples, 0.65%)</title><rect x="18.2638%" y="389" width="0.6507%" height="15" fill="rgb(247,166,0)"/><text x="18.5138%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (44 samples, 0.65%)</title><rect x="18.2638%" y="373" width="0.6507%" height="15" fill="rgb(249,219,21)"/><text x="18.5138%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (44 samples, 0.65%)</title><rect x="18.2638%" y="357" width="0.6507%" height="15" fill="rgb(205,209,3)"/><text x="18.5138%" y="367.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (41 samples, 0.61%)</title><rect x="18.3082%" y="341" width="0.6063%" height="15" fill="rgb(243,44,1)"/><text x="18.5582%" y="351.50"></text></g><g><title>mass::stats::rolling_std::{{closure}} (30 samples, 0.44%)</title><rect x="18.4709%" y="325" width="0.4437%" height="15" fill="rgb(206,159,16)"/><text x="18.7209%" y="335.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (15 samples, 0.22%)</title><rect x="18.6927%" y="309" width="0.2218%" height="15" fill="rgb(244,77,30)"/><text x="18.9427%" y="319.50"></text></g><g><title>&lt;adler::algo::U32X4 as core::ops::arith::AddAssign&gt;::add_assign (23 samples, 0.34%)</title><rect x="18.9737%" y="677" width="0.3401%" height="15" fill="rgb(218,69,12)"/><text x="19.2237%" y="687.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&lt;&amp;u32&gt;&gt;::add_assign (23 samples, 0.34%)</title><rect x="18.9737%" y="661" width="0.3401%" height="15" fill="rgb(212,87,7)"/><text x="19.2237%" y="671.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (23 samples, 0.34%)</title><rect x="18.9737%" y="645" width="0.3401%" height="15" fill="rgb(245,114,25)"/><text x="19.2237%" y="655.50"></text></g><g><title>std::rt::lang_start_internal (40 samples, 0.59%)</title><rect x="18.9145%" y="1397" width="0.5915%" height="15" fill="rgb(210,61,42)"/><text x="19.1645%" y="1407.50"></text></g><g><title>std::panic::catch_unwind (40 samples, 0.59%)</title><rect x="18.9145%" y="1381" width="0.5915%" height="15" fill="rgb(211,52,33)"/><text x="19.1645%" y="1391.50"></text></g><g><title>std::panicking::try (40 samples, 0.59%)</title><rect x="18.9145%" y="1365" width="0.5915%" height="15" fill="rgb(234,58,33)"/><text x="19.1645%" y="1375.50"></text></g><g><title>std::panicking::try::do_call (40 samples, 0.59%)</title><rect x="18.9145%" y="1349" width="0.5915%" height="15" fill="rgb(220,115,36)"/><text x="19.1645%" y="1359.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (40 samples, 0.59%)</title><rect x="18.9145%" y="1333" width="0.5915%" height="15" fill="rgb(243,153,54)"/><text x="19.1645%" y="1343.50"></text></g><g><title>std::rt::lang_start::{{closure}} (40 samples, 0.59%)</title><rect x="18.9145%" y="1317" width="0.5915%" height="15" fill="rgb(251,47,18)"/><text x="19.1645%" y="1327.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (40 samples, 0.59%)</title><rect x="18.9145%" y="1301" width="0.5915%" height="15" fill="rgb(242,102,42)"/><text x="19.1645%" y="1311.50"></text></g><g><title>core::ops::function::FnOnce::call_once (40 samples, 0.59%)</title><rect x="18.9145%" y="1285" width="0.5915%" height="15" fill="rgb(234,31,38)"/><text x="19.1645%" y="1295.50"></text></g><g><title>main::main (40 samples, 0.59%)</title><rect x="18.9145%" y="1269" width="0.5915%" height="15" fill="rgb(221,117,51)"/><text x="19.1645%" y="1279.50"></text></g><g><title>mass_bench::input_pair (40 samples, 0.59%)</title><rect x="18.9145%" y="1253" width="0.5915%" height="15" fill="rgb(212,20,18)"/><text x="19.1645%" y="1263.50"></text></g><g><title>mass_bench::load_series (40 samples, 0.59%)</title><rect x="18.9145%" y="1237" width="0.5915%" height="15" fill="rgb(245,133,36)"/><text x="19.1645%" y="1247.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (40 samples, 0.59%)</title><rect x="18.9145%" y="1221" width="0.5915%" height="15" fill="rgb(212,6,19)"/><text x="19.1645%" y="1231.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (40 samples, 0.59%)</title><rect x="18.9145%" y="1205" width="0.5915%" height="15" fill="rgb(218,1,36)"/><text x="19.1645%" y="1215.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (40 samples, 0.59%)</title><rect x="18.9145%" y="1189" width="0.5915%" height="15" fill="rgb(246,84,54)"/><text x="19.1645%" y="1199.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (40 samples, 0.59%)</title><rect x="18.9145%" y="1173" width="0.5915%" height="15" fill="rgb(242,110,6)"/><text x="19.1645%" y="1183.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (40 samples, 0.59%)</title><rect x="18.9145%" y="1157" width="0.5915%" height="15" fill="rgb(214,47,5)"/><text x="19.1645%" y="1167.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (40 samples, 0.59%)</title><rect x="18.9145%" y="1141" width="0.5915%" height="15" fill="rgb(218,159,25)"/><text x="19.1645%" y="1151.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.59%)</title><rect x="18.9145%" y="1125" width="0.5915%" height="15" fill="rgb(215,211,28)"/><text x="19.1645%" y="1135.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.59%)</title><rect x="18.9145%" y="1109" width="0.5915%" height="15" fill="rgb(238,59,32)"/><text x="19.1645%" y="1119.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (40 samples, 0.59%)</title><rect x="18.9145%" y="1093" width="0.5915%" height="15" fill="rgb(226,82,3)"/><text x="19.1645%" y="1103.50"></text></g><g><title>csv::string_record::StringRecord::read (40 samples, 0.59%)</title><rect x="18.9145%" y="1077" width="0.5915%" height="15" fill="rgb(240,164,32)"/><text x="19.1645%" y="1087.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (40 samples, 0.59%)</title><rect x="18.9145%" y="1061" width="0.5915%" height="15" fill="rgb(232,46,7)"/><text x="19.1645%" y="1071.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (40 samples, 0.59%)</title><rect x="18.9145%" y="1045" width="0.5915%" height="15" fill="rgb(229,129,53)"/><text x="19.1645%" y="1055.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (40 samples, 0.59%)</title><rect x="18.9145%" y="1029" width="0.5915%" height="15" fill="rgb(234,188,29)"/><text x="19.1645%" y="1039.50"></text></g><g><title>&lt;tar::entry::Entry&lt;R&gt; as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="1013" width="0.5915%" height="15" fill="rgb(246,141,4)"/><text x="19.1645%" y="1023.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="997" width="0.5915%" height="15" fill="rgb(229,23,39)"/><text x="19.1645%" y="1007.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (40 samples, 0.59%)</title><rect x="18.9145%" y="981" width="0.5915%" height="15" fill="rgb(206,12,3)"/><text x="19.1645%" y="991.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read::{{closure}} (40 samples, 0.59%)</title><rect x="18.9145%" y="965" width="0.5915%" height="15" fill="rgb(252,226,20)"/><text x="19.1645%" y="975.50"></text></g><g><title>&lt;tar::entry::EntryIo as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="949" width="0.5915%" height="15" fill="rgb(216,123,35)"/><text x="19.1645%" y="959.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="933" width="0.5915%" height="15" fill="rgb(212,68,40)"/><text x="19.1645%" y="943.50"></text></g><g><title>&lt;&amp;tar::archive::ArchiveInner&lt;R&gt; as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="917" width="0.5915%" height="15" fill="rgb(254,125,32)"/><text x="19.1645%" y="927.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="901" width="0.5915%" height="15" fill="rgb(253,97,22)"/><text x="19.1645%" y="911.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="885" width="0.5915%" height="15" fill="rgb(241,101,14)"/><text x="19.1645%" y="895.50"></text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="869" width="0.5915%" height="15" fill="rgb(238,103,29)"/><text x="19.1645%" y="879.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (40 samples, 0.59%)</title><rect x="18.9145%" y="853" width="0.5915%" height="15" fill="rgb(233,195,47)"/><text x="19.1645%" y="863.50"></text></g><g><title>flate2::zio::read (40 samples, 0.59%)</title><rect x="18.9145%" y="837" width="0.5915%" height="15" fill="rgb(246,218,30)"/><text x="19.1645%" y="847.50"></text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (40 samples, 0.59%)</title><rect x="18.9145%" y="821" width="0.5915%" height="15" fill="rgb(219,145,47)"/><text x="19.1645%" y="831.50"></text></g><g><title>flate2::mem::Decompress::decompress (40 samples, 0.59%)</title><rect x="18.9145%" y="805" width="0.5915%" height="15" fill="rgb(243,12,26)"/><text x="19.1645%" y="815.50"></text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (40 samples, 0.59%)</title><rect x="18.9145%" y="789" width="0.5915%" height="15" fill="rgb(214,87,16)"/><text x="19.1645%" y="799.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate (40 samples, 0.59%)</title><rect x="18.9145%" y="773" width="0.5915%" height="15" fill="rgb(208,99,42)"/><text x="19.1645%" y="783.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (40 samples, 0.59%)</title><rect x="18.9145%" y="757" width="0.5915%" height="15" fill="rgb(253,99,2)"/><text x="19.1645%" y="767.50"></text></g><g><title>miniz_oxide::inflate::core::decompress (40 samples, 0.59%)</title><rect x="18.9145%" y="741" width="0.5915%" height="15" fill="rgb(220,168,23)"/><text x="19.1645%" y="751.50"></text></g><g><title>miniz_oxide::shared::update_adler32 (36 samples, 0.53%)</title><rect x="18.9737%" y="725" width="0.5324%" height="15" fill="rgb(242,38,24)"/><text x="19.2237%" y="735.50"></text></g><g><title>adler::Adler32::write_slice (36 samples, 0.53%)</title><rect x="18.9737%" y="709" width="0.5324%" height="15" fill="rgb(225,182,9)"/><text x="19.2237%" y="719.50"></text></g><g><title>adler::algo::&lt;impl adler::Adler32&gt;::compute (36 samples, 0.53%)</title><rect x="18.9737%" y="693" width="0.5324%" height="15" fill="rgb(243,178,37)"/><text x="19.2237%" y="703.50"></text></g><g><title>adler::algo::U32X4::from (9 samples, 0.13%)</title><rect x="19.3730%" y="677" width="0.1331%" height="15" fill="rgb(232,139,19)"/><text x="19.6230%" y="687.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (29 samples, 0.43%)</title><rect x="20.2307%" y="645" width="0.4289%" height="15" fill="rgb(225,201,24)"/><text x="20.4807%" y="655.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (29 samples, 0.43%)</title><rect x="20.2307%" y="629" width="0.4289%" height="15" fill="rgb(221,47,46)"/><text x="20.4807%" y="639.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly8&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (9 samples, 0.13%)</title><rect x="20.5265%" y="613" width="0.1331%" height="15" fill="rgb(249,23,13)"/><text x="20.7765%" y="623.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (8 samples, 0.12%)</title><rect x="20.9997%" y="597" width="0.1183%" height="15" fill="rgb(219,9,5)"/><text x="21.2497%" y="607.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::mul (15 samples, 0.22%)</title><rect x="20.9997%" y="629" width="0.2218%" height="15" fill="rgb(254,171,16)"/><text x="21.2497%" y="639.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (15 samples, 0.22%)</title><rect x="20.9997%" y="613" width="0.2218%" height="15" fill="rgb(230,171,20)"/><text x="21.2497%" y="623.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (7 samples, 0.10%)</title><rect x="21.1180%" y="597" width="0.1035%" height="15" fill="rgb(210,71,41)"/><text x="21.3680%" y="607.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::sub (9 samples, 0.13%)</title><rect x="21.2215%" y="629" width="0.1331%" height="15" fill="rgb(206,173,20)"/><text x="21.4715%" y="639.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (9 samples, 0.13%)</title><rect x="21.2215%" y="613" width="0.1331%" height="15" fill="rgb(233,88,34)"/><text x="21.4715%" y="623.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (9 samples, 0.13%)</title><rect x="21.2215%" y="597" width="0.1331%" height="15" fill="rgb(223,209,46)"/><text x="21.4715%" y="607.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (10 samples, 0.15%)</title><rect x="21.4138%" y="629" width="0.1479%" height="15" fill="rgb(250,43,18)"/><text x="21.6638%" y="639.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (10 samples, 0.15%)</title><rect x="21.4138%" y="613" width="0.1479%" height="15" fill="rgb(208,13,10)"/><text x="21.6638%" y="623.50"></text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::perform_fft (140 samples, 2.07%)</title><rect x="19.5356%" y="661" width="2.0704%" height="15" fill="rgb(212,200,36)"/><text x="19.7856%" y="671.50">r..</text></g><g><title>rustfft::algorithm::radix4::butterfly_4 (64 samples, 0.95%)</title><rect x="20.6596%" y="645" width="0.9465%" height="15" fill="rgb(225,90,30)"/><text x="20.9096%" y="655.50"></text></g><g><title>[unknown] (1,390 samples, 20.56%)</title><rect x="1.0648%" y="1413" width="20.5560%" height="15" fill="rgb(236,182,39)"/><text x="1.3148%" y="1423.50">[unknown]</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (141 samples, 2.09%)</title><rect x="19.5356%" y="1397" width="2.0852%" height="15" fill="rgb(212,144,35)"/><text x="19.7856%" y="1407.50">s..</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="1381" width="2.0852%" height="15" fill="rgb(228,63,44)"/><text x="19.7856%" y="1391.50">&lt;..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (141 samples, 2.09%)</title><rect x="19.5356%" y="1365" width="2.0852%" height="15" fill="rgb(228,109,6)"/><text x="19.7856%" y="1375.50">r..</text></g><g><title>rayon_core::registry::main_loop (141 samples, 2.09%)</title><rect x="19.5356%" y="1349" width="2.0852%" height="15" fill="rgb(238,117,24)"/><text x="19.7856%" y="1359.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (141 samples, 2.09%)</title><rect x="19.5356%" y="1333" width="2.0852%" height="15" fill="rgb(242,26,26)"/><text x="19.7856%" y="1343.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (141 samples, 2.09%)</title><rect x="19.5356%" y="1317" width="2.0852%" height="15" fill="rgb(221,92,48)"/><text x="19.7856%" y="1327.50">r..</text></g><g><title>rayon_core::registry::WorkerThread::execute (141 samples, 2.09%)</title><rect x="19.5356%" y="1301" width="2.0852%" height="15" fill="rgb(209,209,32)"/><text x="19.7856%" y="1311.50">r..</text></g><g><title>rayon_core::job::JobRef::execute (141 samples, 2.09%)</title><rect x="19.5356%" y="1285" width="2.0852%" height="15" fill="rgb(221,70,22)"/><text x="19.7856%" y="1295.50">r..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (141 samples, 2.09%)</title><rect x="19.5356%" y="1269" width="2.0852%" height="15" fill="rgb(248,145,5)"/><text x="19.7856%" y="1279.50">&lt;..</text></g><g><title>rayon_core::unwind::halt_unwinding (141 samples, 2.09%)</title><rect x="19.5356%" y="1253" width="2.0852%" height="15" fill="rgb(226,116,26)"/><text x="19.7856%" y="1263.50">r..</text></g><g><title>std::panic::catch_unwind (141 samples, 2.09%)</title><rect x="19.5356%" y="1237" width="2.0852%" height="15" fill="rgb(244,5,17)"/><text x="19.7856%" y="1247.50">s..</text></g><g><title>std::panicking::try (141 samples, 2.09%)</title><rect x="19.5356%" y="1221" width="2.0852%" height="15" fill="rgb(252,159,33)"/><text x="19.7856%" y="1231.50">s..</text></g><g><title>std::panicking::try::do_call (141 samples, 2.09%)</title><rect x="19.5356%" y="1205" width="2.0852%" height="15" fill="rgb(206,71,0)"/><text x="19.7856%" y="1215.50">s..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (141 samples, 2.09%)</title><rect x="19.5356%" y="1189" width="2.0852%" height="15" fill="rgb(233,118,54)"/><text x="19.7856%" y="1199.50">&lt;..</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="1173" width="2.0852%" height="15" fill="rgb(234,83,48)"/><text x="19.7856%" y="1183.50">&lt;..</text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="1157" width="2.0852%" height="15" fill="rgb(228,3,54)"/><text x="19.7856%" y="1167.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="1141" width="2.0852%" height="15" fill="rgb(226,155,13)"/><text x="19.7856%" y="1151.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (141 samples, 2.09%)</title><rect x="19.5356%" y="1125" width="2.0852%" height="15" fill="rgb(241,28,37)"/><text x="19.7856%" y="1135.50">r..</text></g><g><title>rayon_core::join::join_context (141 samples, 2.09%)</title><rect x="19.5356%" y="1109" width="2.0852%" height="15" fill="rgb(233,93,10)"/><text x="19.7856%" y="1119.50">r..</text></g><g><title>rayon_core::registry::in_worker (141 samples, 2.09%)</title><rect x="19.5356%" y="1093" width="2.0852%" height="15" fill="rgb(225,113,19)"/><text x="19.7856%" y="1103.50">r..</text></g><g><title>rayon_core::join::join_context::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="1077" width="2.0852%" height="15" fill="rgb(241,2,18)"/><text x="19.7856%" y="1087.50">r..</text></g><g><title>rayon_core::unwind::halt_unwinding (141 samples, 2.09%)</title><rect x="19.5356%" y="1061" width="2.0852%" height="15" fill="rgb(228,207,21)"/><text x="19.7856%" y="1071.50">r..</text></g><g><title>std::panic::catch_unwind (141 samples, 2.09%)</title><rect x="19.5356%" y="1045" width="2.0852%" height="15" fill="rgb(213,211,35)"/><text x="19.7856%" y="1055.50">s..</text></g><g><title>std::panicking::try (141 samples, 2.09%)</title><rect x="19.5356%" y="1029" width="2.0852%" height="15" fill="rgb(209,83,10)"/><text x="19.7856%" y="1039.50">s..</text></g><g><title>std::panicking::try::do_call (141 samples, 2.09%)</title><rect x="19.5356%" y="1013" width="2.0852%" height="15" fill="rgb(209,164,1)"/><text x="19.7856%" y="1023.50">s..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (141 samples, 2.09%)</title><rect x="19.5356%" y="997" width="2.0852%" height="15" fill="rgb(213,184,43)"/><text x="19.7856%" y="1007.50">&lt;..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="981" width="2.0852%" height="15" fill="rgb(231,61,34)"/><text x="19.7856%" y="991.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="965" width="2.0852%" height="15" fill="rgb(235,75,3)"/><text x="19.7856%" y="975.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (141 samples, 2.09%)</title><rect x="19.5356%" y="949" width="2.0852%" height="15" fill="rgb(220,106,47)"/><text x="19.7856%" y="959.50">r..</text></g><g><title>rayon_core::join::join_context (141 samples, 2.09%)</title><rect x="19.5356%" y="933" width="2.0852%" height="15" fill="rgb(210,196,33)"/><text x="19.7856%" y="943.50">r..</text></g><g><title>rayon_core::registry::in_worker (141 samples, 2.09%)</title><rect x="19.5356%" y="917" width="2.0852%" height="15" fill="rgb(229,154,42)"/><text x="19.7856%" y="927.50">r..</text></g><g><title>rayon_core::join::join_context::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="901" width="2.0852%" height="15" fill="rgb(228,114,26)"/><text x="19.7856%" y="911.50">r..</text></g><g><title>rayon_core::unwind::halt_unwinding (141 samples, 2.09%)</title><rect x="19.5356%" y="885" width="2.0852%" height="15" fill="rgb(208,144,1)"/><text x="19.7856%" y="895.50">r..</text></g><g><title>std::panic::catch_unwind (141 samples, 2.09%)</title><rect x="19.5356%" y="869" width="2.0852%" height="15" fill="rgb(239,112,37)"/><text x="19.7856%" y="879.50">s..</text></g><g><title>std::panicking::try (141 samples, 2.09%)</title><rect x="19.5356%" y="853" width="2.0852%" height="15" fill="rgb(210,96,50)"/><text x="19.7856%" y="863.50">s..</text></g><g><title>std::panicking::try::do_call (141 samples, 2.09%)</title><rect x="19.5356%" y="837" width="2.0852%" height="15" fill="rgb(222,178,2)"/><text x="19.7856%" y="847.50">s..</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (141 samples, 2.09%)</title><rect x="19.5356%" y="821" width="2.0852%" height="15" fill="rgb(226,74,18)"/><text x="19.7856%" y="831.50">&lt;..</text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="805" width="2.0852%" height="15" fill="rgb(225,67,54)"/><text x="19.7856%" y="815.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="789" width="2.0852%" height="15" fill="rgb(251,92,32)"/><text x="19.7856%" y="799.50">r..</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (141 samples, 2.09%)</title><rect x="19.5356%" y="773" width="2.0852%" height="15" fill="rgb(228,149,22)"/><text x="19.7856%" y="783.50">r..</text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (141 samples, 2.09%)</title><rect x="19.5356%" y="757" width="2.0852%" height="15" fill="rgb(243,54,13)"/><text x="19.7856%" y="767.50">&lt;..</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (141 samples, 2.09%)</title><rect x="19.5356%" y="741" width="2.0852%" height="15" fill="rgb(243,180,28)"/><text x="19.7856%" y="751.50">&lt;..</text></g><g><title>mass::mass_batch::{{closure}} (141 samples, 2.09%)</title><rect x="19.5356%" y="725" width="2.0852%" height="15" fill="rgb(208,167,24)"/><text x="19.7856%" y="735.50">m..</text></g><g><title>mass::min_subsequence_distance (141 samples, 2.09%)</title><rect x="19.5356%" y="709" width="2.0852%" height="15" fill="rgb(245,73,45)"/><text x="19.7856%" y="719.50">m..</text></g><g><title>mass::mass (141 samples, 2.09%)</title><rect x="19.5356%" y="693" width="2.0852%" height="15" fill="rgb(237,203,48)"/><text x="19.7856%" y="703.50">m..</text></g><g><title>mass::math::fft_mult (141 samples, 2.09%)</title><rect x="19.5356%" y="677" width="2.0852%" height="15" fill="rgb(211,197,16)"/><text x="19.7856%" y="687.50">m..</text></g><g><title>__perf_event_task_sched_in (38 samples, 0.56%)</title><rect x="21.6356%" y="1349" width="0.5620%" height="15" fill="rgb(243,99,51)"/><text x="21.8856%" y="1359.50"></text></g><g><title>perf_pmu_enable.part.0 (37 samples, 0.55%)</title><rect x="21.6504%" y="1333" width="0.5472%" height="15" fill="rgb(215,123,29)"/><text x="21.9004%" y="1343.50"></text></g><g><title>x86_pmu_enable (37 samples, 0.55%)</title><rect x="21.6504%" y="1317" width="0.5472%" height="15" fill="rgb(239,186,37)"/><text x="21.9004%" y="1327.50"></text></g><g><title>intel_tfa_pmu_enable_all (37 samples, 0.55%)</title><rect x="21.6504%" y="1301" width="0.5472%" height="15" fill="rgb(252,136,39)"/><text x="21.9004%" y="1311.50"></text></g><g><title>native_write_msr (37 samples, 0.55%)</title><rect x="21.6504%" y="1285" width="0.5472%" height="15" fill="rgb(223,213,32)"/><text x="21.9004%" y="1295.50"></text></g><g><title>finish_task_switch (39 samples, 0.58%)</title><rect x="21.6356%" y="1365" width="0.5768%" height="15" fill="rgb(233,115,5)"/><text x="21.8856%" y="1375.50"></text></g><g><title>ret_from_fork (40 samples, 0.59%)</title><rect x="21.6356%" y="1397" width="0.5915%" height="15" fill="rgb(207,226,44)"/><text x="21.8856%" y="1407.50"></text></g><g><title>schedule_tail (40 samples, 0.59%)</title><rect x="21.6356%" y="1381" width="0.5915%" height="15" fill="rgb(208,126,0)"/><text x="21.8856%" y="1391.50"></text></g><g><title>free_unref_page_list (24 samples, 0.35%)</title><rect x="22.4786%" y="581" width="0.3549%" height="15" fill="rgb(244,66,21)"/><text x="22.7286%" y="591.50"></text></g><g><title>free_unref_page_commit (21 samples, 0.31%)</title><rect x="22.5229%" y="565" width="0.3106%" height="15" fill="rgb(222,97,12)"/><text x="22.7729%" y="575.50"></text></g><g><title>free_pcppages_bulk (19 samples, 0.28%)</title><rect x="22.5525%" y="549" width="0.2810%" height="15" fill="rgb(219,213,19)"/><text x="22.8025%" y="559.50"></text></g><g><title>tlb_finish_mmu (42 samples, 0.62%)</title><rect x="22.2715%" y="645" width="0.6211%" height="15" fill="rgb(252,169,30)"/><text x="22.5215%" y="655.50"></text></g><g><title>tlb_flush_mmu (42 samples, 0.62%)</title><rect x="22.2715%" y="629" width="0.6211%" height="15" fill="rgb(206,32,51)"/><text x="22.5215%" y="639.50"></text></g><g><title>free_pages_and_swap_cache (37 samples, 0.55%)</title><rect x="22.3455%" y="613" width="0.5472%" height="15" fill="rgb(250,172,42)"/><text x="22.5955%" y="623.50"></text></g><g><title>release_pages (37 samples, 0.55%)</title><rect x="22.3455%" y="597" width="0.5472%" height="15" fill="rgb(209,34,43)"/><text x="22.5955%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (61 samples, 0.90%)</title><rect x="22.2567%" y="869" width="0.9021%" height="15" fill="rgb(223,11,35)"/><text x="22.5067%" y="879.50"></text></g><g><title>core::ptr::drop_in_place (61 samples, 0.90%)</title><rect x="22.2567%" y="853" width="0.9021%" height="15" fill="rgb(251,219,26)"/><text x="22.5067%" y="863.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (61 samples, 0.90%)</title><rect x="22.2567%" y="837" width="0.9021%" height="15" fill="rgb(231,119,3)"/><text x="22.5067%" y="847.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (61 samples, 0.90%)</title><rect x="22.2567%" y="821" width="0.9021%" height="15" fill="rgb(216,97,11)"/><text x="22.5067%" y="831.50"></text></g><g><title>alloc::alloc::dealloc (61 samples, 0.90%)</title><rect x="22.2567%" y="805" width="0.9021%" height="15" fill="rgb(223,59,9)"/><text x="22.5067%" y="815.50"></text></g><g><title>_int_free (61 samples, 0.90%)</title><rect x="22.2567%" y="789" width="0.9021%" height="15" fill="rgb(233,93,31)"/><text x="22.5067%" y="799.50"></text></g><g><title>heap_trim (61 samples, 0.90%)</title><rect x="22.2567%" y="773" width="0.9021%" height="15" fill="rgb(239,81,33)"/><text x="22.5067%" y="783.50"></text></g><g><title>shrink_heap (61 samples, 0.90%)</title><rect x="22.2567%" y="757" width="0.9021%" height="15" fill="rgb(213,120,34)"/><text x="22.5067%" y="767.50"></text></g><g><title>__GI_madvise (61 samples, 0.90%)</title><rect x="22.2567%" y="741" width="0.9021%" height="15" fill="rgb(243,49,53)"/><text x="22.5067%" y="751.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (61 samples, 0.90%)</title><rect x="22.2567%" y="725" width="0.9021%" height="15" fill="rgb(247,216,33)"/><text x="22.5067%" y="735.50"></text></g><g><title>do_syscall_64 (61 samples, 0.90%)</title><rect x="22.2567%" y="709" width="0.9021%" height="15" fill="rgb(226,26,14)"/><text x="22.5067%" y="719.50"></text></g><g><title>__x64_sys_madvise (61 samples, 0.90%)</title><rect x="22.2567%" y="693" width="0.9021%" height="15" fill="rgb(215,49,53)"/><text x="22.5067%" y="703.50"></text></g><g><title>__do_sys_madvise (61 samples, 0.90%)</title><rect x="22.2567%" y="677" width="0.9021%" height="15" fill="rgb(245,162,40)"/><text x="22.5067%" y="687.50"></text></g><g><title>zap_page_range (60 samples, 0.89%)</title><rect x="22.2715%" y="661" width="0.8873%" height="15" fill="rgb(229,68,17)"/><text x="22.5215%" y="671.50"></text></g><g><title>unmap_single_vma (18 samples, 0.27%)</title><rect x="22.8926%" y="645" width="0.2662%" height="15" fill="rgb(213,182,10)"/><text x="23.1426%" y="655.50"></text></g><g><title>unmap_page_range (18 samples, 0.27%)</title><rect x="22.8926%" y="629" width="0.2662%" height="15" fill="rgb(245,125,30)"/><text x="23.1426%" y="639.50"></text></g><g><title>zap_pte_range.isra.0 (18 samples, 0.27%)</title><rect x="22.8926%" y="613" width="0.2662%" height="15" fill="rgb(232,202,2)"/><text x="23.1426%" y="623.50"></text></g><g><title>down_read (10 samples, 0.15%)</title><rect x="23.1884%" y="549" width="0.1479%" height="15" fill="rgb(237,140,51)"/><text x="23.4384%" y="559.50"></text></g><g><title>rwsem_down_read_slowpath (10 samples, 0.15%)</title><rect x="23.1884%" y="533" width="0.1479%" height="15" fill="rgb(236,157,25)"/><text x="23.4384%" y="543.50"></text></g><g><title>schedule (10 samples, 0.15%)</title><rect x="23.1884%" y="517" width="0.1479%" height="15" fill="rgb(219,209,0)"/><text x="23.4384%" y="527.50"></text></g><g><title>__sched_text_start (10 samples, 0.15%)</title><rect x="23.1884%" y="501" width="0.1479%" height="15" fill="rgb(240,116,54)"/><text x="23.4384%" y="511.50"></text></g><g><title>finish_task_switch (10 samples, 0.15%)</title><rect x="23.1884%" y="485" width="0.1479%" height="15" fill="rgb(216,10,36)"/><text x="23.4384%" y="495.50"></text></g><g><title>__perf_event_task_sched_in (10 samples, 0.15%)</title><rect x="23.1884%" y="469" width="0.1479%" height="15" fill="rgb(222,72,44)"/><text x="23.4384%" y="479.50"></text></g><g><title>perf_pmu_enable.part.0 (10 samples, 0.15%)</title><rect x="23.1884%" y="453" width="0.1479%" height="15" fill="rgb(232,159,9)"/><text x="23.4384%" y="463.50"></text></g><g><title>x86_pmu_enable (10 samples, 0.15%)</title><rect x="23.1884%" y="437" width="0.1479%" height="15" fill="rgb(210,39,32)"/><text x="23.4384%" y="447.50"></text></g><g><title>intel_tfa_pmu_enable_all (10 samples, 0.15%)</title><rect x="23.1884%" y="421" width="0.1479%" height="15" fill="rgb(216,194,45)"/><text x="23.4384%" y="431.50"></text></g><g><title>native_write_msr (10 samples, 0.15%)</title><rect x="23.1884%" y="405" width="0.1479%" height="15" fill="rgb(218,18,35)"/><text x="23.4384%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (12 samples, 0.18%)</title><rect x="23.1736%" y="661" width="0.1775%" height="15" fill="rgb(207,83,51)"/><text x="23.4236%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (12 samples, 0.18%)</title><rect x="23.1736%" y="645" width="0.1775%" height="15" fill="rgb(225,63,43)"/><text x="23.4236%" y="655.50"></text></g><g><title>core::ptr::write (12 samples, 0.18%)</title><rect x="23.1736%" y="629" width="0.1775%" height="15" fill="rgb(207,57,36)"/><text x="23.4236%" y="639.50"></text></g><g><title>page_fault (11 samples, 0.16%)</title><rect x="23.1884%" y="613" width="0.1627%" height="15" fill="rgb(216,99,33)"/><text x="23.4384%" y="623.50"></text></g><g><title>do_page_fault (11 samples, 0.16%)</title><rect x="23.1884%" y="597" width="0.1627%" height="15" fill="rgb(225,42,16)"/><text x="23.4384%" y="607.50"></text></g><g><title>__do_page_fault (11 samples, 0.16%)</title><rect x="23.1884%" y="581" width="0.1627%" height="15" fill="rgb(220,201,45)"/><text x="23.4384%" y="591.50"></text></g><g><title>do_user_addr_fault (11 samples, 0.16%)</title><rect x="23.1884%" y="565" width="0.1627%" height="15" fill="rgb(225,33,4)"/><text x="23.4384%" y="575.50"></text></g><g><title>mass::math::dist (57 samples, 0.84%)</title><rect x="23.1588%" y="853" width="0.8429%" height="15" fill="rgb(224,33,50)"/><text x="23.4088%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (57 samples, 0.84%)</title><rect x="23.1588%" y="837" width="0.8429%" height="15" fill="rgb(246,198,51)"/><text x="23.4088%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (57 samples, 0.84%)</title><rect x="23.1588%" y="821" width="0.8429%" height="15" fill="rgb(205,22,4)"/><text x="23.4088%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (57 samples, 0.84%)</title><rect x="23.1588%" y="805" width="0.8429%" height="15" fill="rgb(206,3,8)"/><text x="23.4088%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (57 samples, 0.84%)</title><rect x="23.1588%" y="789" width="0.8429%" height="15" fill="rgb(251,23,15)"/><text x="23.4088%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (57 samples, 0.84%)</title><rect x="23.1588%" y="773" width="0.8429%" height="15" fill="rgb(252,88,28)"/><text x="23.4088%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (56 samples, 0.83%)</title><rect x="23.1736%" y="757" width="0.8282%" height="15" fill="rgb(212,127,14)"/><text x="23.4236%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56 samples, 0.83%)</title><rect x="23.1736%" y="741" width="0.8282%" height="15" fill="rgb(247,145,37)"/><text x="23.4236%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (56 samples, 0.83%)</title><rect x="23.1736%" y="725" width="0.8282%" height="15" fill="rgb(209,117,53)"/><text x="23.4236%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (56 samples, 0.83%)</title><rect x="23.1736%" y="709" width="0.8282%" height="15" fill="rgb(212,90,42)"/><text x="23.4236%" y="719.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (56 samples, 0.83%)</title><rect x="23.1736%" y="693" width="0.8282%" height="15" fill="rgb(218,164,37)"/><text x="23.4236%" y="703.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (56 samples, 0.83%)</title><rect x="23.1736%" y="677" width="0.8282%" height="15" fill="rgb(246,65,34)"/><text x="23.4236%" y="687.50"></text></g><g><title>mass::math::dist::{{closure}} (44 samples, 0.65%)</title><rect x="23.3511%" y="661" width="0.6507%" height="15" fill="rgb(231,100,33)"/><text x="23.6011%" y="671.50"></text></g><g><title>__perf_event_task_sched_in (15 samples, 0.22%)</title><rect x="24.5637%" y="629" width="0.2218%" height="15" fill="rgb(228,126,14)"/><text x="24.8137%" y="639.50"></text></g><g><title>perf_pmu_enable.part.0 (15 samples, 0.22%)</title><rect x="24.5637%" y="613" width="0.2218%" height="15" fill="rgb(215,173,21)"/><text x="24.8137%" y="623.50"></text></g><g><title>x86_pmu_enable (15 samples, 0.22%)</title><rect x="24.5637%" y="597" width="0.2218%" height="15" fill="rgb(210,6,40)"/><text x="24.8137%" y="607.50"></text></g><g><title>intel_tfa_pmu_enable_all (15 samples, 0.22%)</title><rect x="24.5637%" y="581" width="0.2218%" height="15" fill="rgb(212,48,18)"/><text x="24.8137%" y="591.50"></text></g><g><title>native_write_msr (15 samples, 0.22%)</title><rect x="24.5637%" y="565" width="0.2218%" height="15" fill="rgb(230,214,11)"/><text x="24.8137%" y="575.50"></text></g><g><title>down_read (18 samples, 0.27%)</title><rect x="24.5490%" y="709" width="0.2662%" height="15" fill="rgb(254,105,39)"/><text x="24.7990%" y="719.50"></text></g><g><title>rwsem_down_read_slowpath (18 samples, 0.27%)</title><rect x="24.5490%" y="693" width="0.2662%" height="15" fill="rgb(245,158,5)"/><text x="24.7990%" y="703.50"></text></g><g><title>schedule (17 samples, 0.25%)</title><rect x="24.5637%" y="677" width="0.2514%" height="15" fill="rgb(249,208,11)"/><text x="24.8137%" y="687.50"></text></g><g><title>__sched_text_start (17 samples, 0.25%)</title><rect x="24.5637%" y="661" width="0.2514%" height="15" fill="rgb(210,39,28)"/><text x="24.8137%" y="671.50"></text></g><g><title>finish_task_switch (17 samples, 0.25%)</title><rect x="24.5637%" y="645" width="0.2514%" height="15" fill="rgb(211,56,53)"/><text x="24.8137%" y="655.50"></text></g><g><title>clear_page_erms (37 samples, 0.55%)</title><rect x="25.0665%" y="613" width="0.5472%" height="15" fill="rgb(226,201,30)"/><text x="25.3165%" y="623.50"></text></g><g><title>alloc_pages_vma (42 samples, 0.62%)</title><rect x="25.0074%" y="661" width="0.6211%" height="15" fill="rgb(239,101,34)"/><text x="25.2574%" y="671.50"></text></g><g><title>__alloc_pages_nodemask (41 samples, 0.61%)</title><rect x="25.0222%" y="645" width="0.6063%" height="15" fill="rgb(226,209,5)"/><text x="25.2722%" y="655.50"></text></g><g><title>get_page_from_freelist (40 samples, 0.59%)</title><rect x="25.0370%" y="629" width="0.5915%" height="15" fill="rgb(250,105,47)"/><text x="25.2870%" y="639.50"></text></g><g><title>__pagevec_lru_add_fn (8 samples, 0.12%)</title><rect x="25.7025%" y="613" width="0.1183%" height="15" fill="rgb(230,72,3)"/><text x="25.9525%" y="623.50"></text></g><g><title>lru_cache_add_active_or_unevictable (15 samples, 0.22%)</title><rect x="25.6433%" y="661" width="0.2218%" height="15" fill="rgb(232,218,39)"/><text x="25.8933%" y="671.50"></text></g><g><title>__lru_cache_add (14 samples, 0.21%)</title><rect x="25.6581%" y="645" width="0.2070%" height="15" fill="rgb(248,166,6)"/><text x="25.9081%" y="655.50"></text></g><g><title>pagevec_lru_move_fn (12 samples, 0.18%)</title><rect x="25.6877%" y="629" width="0.1775%" height="15" fill="rgb(247,89,20)"/><text x="25.9377%" y="639.50"></text></g><g><title>mem_cgroup_try_charge_delay (10 samples, 0.15%)</title><rect x="25.9095%" y="661" width="0.1479%" height="15" fill="rgb(248,130,54)"/><text x="26.1595%" y="671.50"></text></g><g><title>mem_cgroup_try_charge (9 samples, 0.13%)</title><rect x="25.9243%" y="645" width="0.1331%" height="15" fill="rgb(234,196,4)"/><text x="26.1743%" y="655.50"></text></g><g><title>__handle_mm_fault (83 samples, 1.23%)</title><rect x="24.8595%" y="693" width="1.2274%" height="15" fill="rgb(250,143,31)"/><text x="25.1095%" y="703.50"></text></g><g><title>do_anonymous_page (77 samples, 1.14%)</title><rect x="24.9482%" y="677" width="1.1387%" height="15" fill="rgb(211,110,34)"/><text x="25.1982%" y="687.50"></text></g><g><title>handle_mm_fault (84 samples, 1.24%)</title><rect x="24.8595%" y="709" width="1.2422%" height="15" fill="rgb(215,124,48)"/><text x="25.1095%" y="719.50"></text></g><g><title>do_user_addr_fault (108 samples, 1.60%)</title><rect x="24.5194%" y="725" width="1.5972%" height="15" fill="rgb(216,46,13)"/><text x="24.7694%" y="735.50"></text></g><g><title>page_fault (117 samples, 1.73%)</title><rect x="24.4602%" y="773" width="1.7303%" height="15" fill="rgb(205,184,25)"/><text x="24.7102%" y="783.50"></text></g><g><title>do_page_fault (115 samples, 1.70%)</title><rect x="24.4898%" y="757" width="1.7007%" height="15" fill="rgb(228,1,10)"/><text x="24.7398%" y="767.50"></text></g><g><title>__do_page_fault (115 samples, 1.70%)</title><rect x="24.4898%" y="741" width="1.7007%" height="15" fill="rgb(213,116,27)"/><text x="24.7398%" y="751.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (30 samples, 0.44%)</title><rect x="26.1905%" y="773" width="0.4437%" height="15" fill="rgb(241,95,50)"/><text x="26.4405%" y="783.50"></text></g><g><title>prepare_exit_to_usermode (30 samples, 0.44%)</title><rect x="26.1905%" y="757" width="0.4437%" height="15" fill="rgb(238,48,32)"/><text x="26.4405%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_with (184 samples, 2.72%)</title><rect x="24.0166%" y="805" width="2.7211%" height="15" fill="rgb(235,113,49)"/><text x="24.2666%" y="815.50">al..</text></g><g><title>core::ptr::write (184 samples, 2.72%)</title><rect x="24.0166%" y="789" width="2.7211%" height="15" fill="rgb(205,127,43)"/><text x="24.2666%" y="799.50">co..</text></g><g><title>sync_regs (7 samples, 0.10%)</title><rect x="26.6341%" y="773" width="0.1035%" height="15" fill="rgb(250,162,2)"/><text x="26.8841%" y="783.50"></text></g><g><title>down_write_killable (21 samples, 0.31%)</title><rect x="26.7377%" y="549" width="0.3106%" height="15" fill="rgb(220,13,41)"/><text x="26.9877%" y="559.50"></text></g><g><title>rwsem_down_write_slowpath (21 samples, 0.31%)</title><rect x="26.7377%" y="533" width="0.3106%" height="15" fill="rgb(249,221,25)"/><text x="26.9877%" y="543.50"></text></g><g><title>schedule (21 samples, 0.31%)</title><rect x="26.7377%" y="517" width="0.3106%" height="15" fill="rgb(215,208,19)"/><text x="26.9877%" y="527.50"></text></g><g><title>__sched_text_start (21 samples, 0.31%)</title><rect x="26.7377%" y="501" width="0.3106%" height="15" fill="rgb(236,175,2)"/><text x="26.9877%" y="511.50"></text></g><g><title>finish_task_switch (21 samples, 0.31%)</title><rect x="26.7377%" y="485" width="0.3106%" height="15" fill="rgb(241,52,2)"/><text x="26.9877%" y="495.50"></text></g><g><title>__perf_event_task_sched_in (20 samples, 0.30%)</title><rect x="26.7524%" y="469" width="0.2958%" height="15" fill="rgb(248,140,14)"/><text x="27.0024%" y="479.50"></text></g><g><title>perf_pmu_enable.part.0 (20 samples, 0.30%)</title><rect x="26.7524%" y="453" width="0.2958%" height="15" fill="rgb(253,22,42)"/><text x="27.0024%" y="463.50"></text></g><g><title>x86_pmu_enable (20 samples, 0.30%)</title><rect x="26.7524%" y="437" width="0.2958%" height="15" fill="rgb(234,61,47)"/><text x="27.0024%" y="447.50"></text></g><g><title>intel_tfa_pmu_enable_all (20 samples, 0.30%)</title><rect x="26.7524%" y="421" width="0.2958%" height="15" fill="rgb(208,226,15)"/><text x="27.0024%" y="431.50"></text></g><g><title>native_write_msr (20 samples, 0.30%)</title><rect x="26.7524%" y="405" width="0.2958%" height="15" fill="rgb(217,221,4)"/><text x="27.0024%" y="415.50"></text></g><g><title>grow_heap (25 samples, 0.37%)</title><rect x="26.7377%" y="645" width="0.3697%" height="15" fill="rgb(212,174,34)"/><text x="26.9877%" y="655.50"></text></g><g><title>__GI___mprotect (25 samples, 0.37%)</title><rect x="26.7377%" y="629" width="0.3697%" height="15" fill="rgb(253,83,4)"/><text x="26.9877%" y="639.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (25 samples, 0.37%)</title><rect x="26.7377%" y="613" width="0.3697%" height="15" fill="rgb(250,195,49)"/><text x="26.9877%" y="623.50"></text></g><g><title>do_syscall_64 (25 samples, 0.37%)</title><rect x="26.7377%" y="597" width="0.3697%" height="15" fill="rgb(241,192,25)"/><text x="26.9877%" y="607.50"></text></g><g><title>__x64_sys_mprotect (25 samples, 0.37%)</title><rect x="26.7377%" y="581" width="0.3697%" height="15" fill="rgb(208,124,10)"/><text x="26.9877%" y="591.50"></text></g><g><title>do_mprotect_pkey (25 samples, 0.37%)</title><rect x="26.7377%" y="565" width="0.3697%" height="15" fill="rgb(222,33,0)"/><text x="26.9877%" y="575.50"></text></g><g><title>alloc::vec::from_elem (217 samples, 3.21%)</title><rect x="24.0166%" y="837" width="3.2091%" height="15" fill="rgb(234,209,28)"/><text x="24.2666%" y="847.50">all..</text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (217 samples, 3.21%)</title><rect x="24.0166%" y="821" width="3.2091%" height="15" fill="rgb(224,11,23)"/><text x="24.2666%" y="831.50">&lt;T ..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (33 samples, 0.49%)</title><rect x="26.7377%" y="805" width="0.4880%" height="15" fill="rgb(232,99,1)"/><text x="26.9877%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (33 samples, 0.49%)</title><rect x="26.7377%" y="789" width="0.4880%" height="15" fill="rgb(237,95,45)"/><text x="26.9877%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (33 samples, 0.49%)</title><rect x="26.7377%" y="773" width="0.4880%" height="15" fill="rgb(208,109,11)"/><text x="26.9877%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (33 samples, 0.49%)</title><rect x="26.7377%" y="757" width="0.4880%" height="15" fill="rgb(216,190,48)"/><text x="26.9877%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (33 samples, 0.49%)</title><rect x="26.7377%" y="741" width="0.4880%" height="15" fill="rgb(251,171,36)"/><text x="26.9877%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (33 samples, 0.49%)</title><rect x="26.7377%" y="725" width="0.4880%" height="15" fill="rgb(230,62,22)"/><text x="26.9877%" y="735.50"></text></g><g><title>alloc::alloc::alloc (33 samples, 0.49%)</title><rect x="26.7377%" y="709" width="0.4880%" height="15" fill="rgb(225,114,35)"/><text x="26.9877%" y="719.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.49%)</title><rect x="26.7377%" y="693" width="0.4880%" height="15" fill="rgb(215,118,42)"/><text x="26.9877%" y="703.50"></text></g><g><title>_int_malloc (33 samples, 0.49%)</title><rect x="26.7377%" y="677" width="0.4880%" height="15" fill="rgb(243,119,21)"/><text x="26.9877%" y="687.50"></text></g><g><title>sysmalloc (33 samples, 0.49%)</title><rect x="26.7377%" y="661" width="0.4880%" height="15" fill="rgb(252,177,53)"/><text x="26.9877%" y="671.50"></text></g><g><title>down_write_killable (16 samples, 0.24%)</title><rect x="27.2848%" y="533" width="0.2366%" height="15" fill="rgb(237,209,29)"/><text x="27.5348%" y="543.50"></text></g><g><title>rwsem_down_write_slowpath (16 samples, 0.24%)</title><rect x="27.2848%" y="517" width="0.2366%" height="15" fill="rgb(212,65,23)"/><text x="27.5348%" y="527.50"></text></g><g><title>schedule (15 samples, 0.22%)</title><rect x="27.2996%" y="501" width="0.2218%" height="15" fill="rgb(230,222,46)"/><text x="27.5496%" y="511.50"></text></g><g><title>__sched_text_start (15 samples, 0.22%)</title><rect x="27.2996%" y="485" width="0.2218%" height="15" fill="rgb(215,135,32)"/><text x="27.5496%" y="495.50"></text></g><g><title>finish_task_switch (14 samples, 0.21%)</title><rect x="27.3144%" y="469" width="0.2070%" height="15" fill="rgb(246,101,22)"/><text x="27.5644%" y="479.50"></text></g><g><title>__perf_event_task_sched_in (14 samples, 0.21%)</title><rect x="27.3144%" y="453" width="0.2070%" height="15" fill="rgb(206,107,13)"/><text x="27.5644%" y="463.50"></text></g><g><title>perf_pmu_enable.part.0 (13 samples, 0.19%)</title><rect x="27.3292%" y="437" width="0.1923%" height="15" fill="rgb(250,100,44)"/><text x="27.5792%" y="447.50"></text></g><g><title>x86_pmu_enable (13 samples, 0.19%)</title><rect x="27.3292%" y="421" width="0.1923%" height="15" fill="rgb(231,147,38)"/><text x="27.5792%" y="431.50"></text></g><g><title>intel_tfa_pmu_enable_all (13 samples, 0.19%)</title><rect x="27.3292%" y="405" width="0.1923%" height="15" fill="rgb(229,8,40)"/><text x="27.5792%" y="415.50"></text></g><g><title>native_write_msr (13 samples, 0.19%)</title><rect x="27.3292%" y="389" width="0.1923%" height="15" fill="rgb(221,135,30)"/><text x="27.5792%" y="399.50"></text></g><g><title>grow_heap (18 samples, 0.27%)</title><rect x="27.2848%" y="629" width="0.2662%" height="15" fill="rgb(249,193,18)"/><text x="27.5348%" y="639.50"></text></g><g><title>__GI___mprotect (18 samples, 0.27%)</title><rect x="27.2848%" y="613" width="0.2662%" height="15" fill="rgb(209,133,39)"/><text x="27.5348%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (18 samples, 0.27%)</title><rect x="27.2848%" y="597" width="0.2662%" height="15" fill="rgb(232,100,14)"/><text x="27.5348%" y="607.50"></text></g><g><title>do_syscall_64 (18 samples, 0.27%)</title><rect x="27.2848%" y="581" width="0.2662%" height="15" fill="rgb(224,185,1)"/><text x="27.5348%" y="591.50"></text></g><g><title>__x64_sys_mprotect (18 samples, 0.27%)</title><rect x="27.2848%" y="565" width="0.2662%" height="15" fill="rgb(223,139,8)"/><text x="27.5348%" y="575.50"></text></g><g><title>do_mprotect_pkey (18 samples, 0.27%)</title><rect x="27.2848%" y="549" width="0.2662%" height="15" fill="rgb(232,213,38)"/><text x="27.5348%" y="559.50"></text></g><g><title>__do_page_fault (7 samples, 0.10%)</title><rect x="27.5510%" y="597" width="0.1035%" height="15" fill="rgb(207,94,22)"/><text x="27.8010%" y="607.50"></text></g><g><title>do_user_addr_fault (7 samples, 0.10%)</title><rect x="27.5510%" y="581" width="0.1035%" height="15" fill="rgb(219,183,54)"/><text x="27.8010%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (30 samples, 0.44%)</title><rect x="27.2257%" y="757" width="0.4437%" height="15" fill="rgb(216,185,54)"/><text x="27.4757%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (30 samples, 0.44%)</title><rect x="27.2257%" y="741" width="0.4437%" height="15" fill="rgb(254,217,39)"/><text x="27.4757%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (30 samples, 0.44%)</title><rect x="27.2257%" y="725" width="0.4437%" height="15" fill="rgb(240,178,23)"/><text x="27.4757%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (30 samples, 0.44%)</title><rect x="27.2257%" y="709" width="0.4437%" height="15" fill="rgb(218,11,47)"/><text x="27.4757%" y="719.50"></text></g><g><title>alloc::raw_vec::finish_grow (30 samples, 0.44%)</title><rect x="27.2257%" y="693" width="0.4437%" height="15" fill="rgb(218,51,51)"/><text x="27.4757%" y="703.50"></text></g><g><title>__GI___libc_malloc (30 samples, 0.44%)</title><rect x="27.2257%" y="677" width="0.4437%" height="15" fill="rgb(238,126,27)"/><text x="27.4757%" y="687.50"></text></g><g><title>_int_malloc (29 samples, 0.43%)</title><rect x="27.2405%" y="661" width="0.4289%" height="15" fill="rgb(249,202,22)"/><text x="27.4905%" y="671.50"></text></g><g><title>sysmalloc (27 samples, 0.40%)</title><rect x="27.2700%" y="645" width="0.3993%" height="15" fill="rgb(254,195,49)"/><text x="27.5200%" y="655.50"></text></g><g><title>page_fault (8 samples, 0.12%)</title><rect x="27.5510%" y="629" width="0.1183%" height="15" fill="rgb(208,123,14)"/><text x="27.8010%" y="639.50"></text></g><g><title>do_page_fault (8 samples, 0.12%)</title><rect x="27.5510%" y="613" width="0.1183%" height="15" fill="rgb(224,200,8)"/><text x="27.8010%" y="623.50"></text></g><g><title>finish_task_switch (50 samples, 0.74%)</title><rect x="29.3848%" y="517" width="0.7394%" height="15" fill="rgb(217,61,36)"/><text x="29.6348%" y="527.50"></text></g><g><title>__perf_event_task_sched_in (49 samples, 0.72%)</title><rect x="29.3996%" y="501" width="0.7246%" height="15" fill="rgb(206,35,45)"/><text x="29.6496%" y="511.50"></text></g><g><title>perf_pmu_enable.part.0 (48 samples, 0.71%)</title><rect x="29.4144%" y="485" width="0.7098%" height="15" fill="rgb(217,65,33)"/><text x="29.6644%" y="495.50"></text></g><g><title>x86_pmu_enable (48 samples, 0.71%)</title><rect x="29.4144%" y="469" width="0.7098%" height="15" fill="rgb(222,158,48)"/><text x="29.6644%" y="479.50"></text></g><g><title>intel_tfa_pmu_enable_all (48 samples, 0.71%)</title><rect x="29.4144%" y="453" width="0.7098%" height="15" fill="rgb(254,2,54)"/><text x="29.6644%" y="463.50"></text></g><g><title>native_write_msr (48 samples, 0.71%)</title><rect x="29.4144%" y="437" width="0.7098%" height="15" fill="rgb(250,143,38)"/><text x="29.6644%" y="447.50"></text></g><g><title>down_read (56 samples, 0.83%)</title><rect x="29.3109%" y="581" width="0.8282%" height="15" fill="rgb(248,25,0)"/><text x="29.5609%" y="591.50"></text></g><g><title>rwsem_down_read_slowpath (56 samples, 0.83%)</title><rect x="29.3109%" y="565" width="0.8282%" height="15" fill="rgb(206,152,27)"/><text x="29.5609%" y="575.50"></text></g><g><title>schedule (52 samples, 0.77%)</title><rect x="29.3700%" y="549" width="0.7690%" height="15" fill="rgb(240,77,30)"/><text x="29.6200%" y="559.50"></text></g><g><title>__sched_text_start (52 samples, 0.77%)</title><rect x="29.3700%" y="533" width="0.7690%" height="15" fill="rgb(231,5,3)"/><text x="29.6200%" y="543.50"></text></g><g><title>clear_page_erms (24 samples, 0.35%)</title><rect x="30.4939%" y="485" width="0.3549%" height="15" fill="rgb(207,226,32)"/><text x="30.7439%" y="495.50"></text></g><g><title>get_page_from_freelist (30 samples, 0.44%)</title><rect x="30.4644%" y="501" width="0.4437%" height="15" fill="rgb(222,207,47)"/><text x="30.7144%" y="511.50"></text></g><g><title>__alloc_pages_nodemask (33 samples, 0.49%)</title><rect x="30.4348%" y="517" width="0.4880%" height="15" fill="rgb(229,115,45)"/><text x="30.6848%" y="527.50"></text></g><g><title>alloc_pages_vma (35 samples, 0.52%)</title><rect x="30.4348%" y="533" width="0.5176%" height="15" fill="rgb(224,191,6)"/><text x="30.6848%" y="543.50"></text></g><g><title>__pagevec_lru_add_fn (7 samples, 0.10%)</title><rect x="31.0115%" y="485" width="0.1035%" height="15" fill="rgb(230,227,24)"/><text x="31.2615%" y="495.50"></text></g><g><title>lru_cache_add_active_or_unevictable (14 samples, 0.21%)</title><rect x="30.9524%" y="533" width="0.2070%" height="15" fill="rgb(228,80,19)"/><text x="31.2024%" y="543.50"></text></g><g><title>__lru_cache_add (13 samples, 0.19%)</title><rect x="30.9672%" y="517" width="0.1923%" height="15" fill="rgb(247,229,0)"/><text x="31.2172%" y="527.50"></text></g><g><title>pagevec_lru_move_fn (13 samples, 0.19%)</title><rect x="30.9672%" y="501" width="0.1923%" height="15" fill="rgb(237,194,15)"/><text x="31.2172%" y="511.50"></text></g><g><title>mem_cgroup_try_charge_delay (19 samples, 0.28%)</title><rect x="31.1890%" y="533" width="0.2810%" height="15" fill="rgb(219,203,20)"/><text x="31.4390%" y="543.50"></text></g><g><title>mem_cgroup_try_charge (16 samples, 0.24%)</title><rect x="31.2334%" y="517" width="0.2366%" height="15" fill="rgb(234,128,8)"/><text x="31.4834%" y="527.50"></text></g><g><title>try_charge (10 samples, 0.15%)</title><rect x="31.3221%" y="501" width="0.1479%" height="15" fill="rgb(248,202,8)"/><text x="31.5721%" y="511.50"></text></g><g><title>handle_mm_fault (88 samples, 1.30%)</title><rect x="30.1982%" y="581" width="1.3014%" height="15" fill="rgb(206,104,37)"/><text x="30.4482%" y="591.50"></text></g><g><title>__handle_mm_fault (82 samples, 1.21%)</title><rect x="30.2869%" y="565" width="1.2127%" height="15" fill="rgb(223,8,27)"/><text x="30.5369%" y="575.50"></text></g><g><title>do_anonymous_page (78 samples, 1.15%)</title><rect x="30.3461%" y="549" width="1.1535%" height="15" fill="rgb(216,217,28)"/><text x="30.5961%" y="559.50"></text></g><g><title>do_user_addr_fault (156 samples, 2.31%)</title><rect x="29.2517%" y="597" width="2.3070%" height="15" fill="rgb(249,199,1)"/><text x="29.5017%" y="607.50">d..</text></g><g><title>page_fault (163 samples, 2.41%)</title><rect x="29.2073%" y="645" width="2.4105%" height="15" fill="rgb(240,85,17)"/><text x="29.4573%" y="655.50">pa..</text></g><g><title>do_page_fault (160 samples, 2.37%)</title><rect x="29.2517%" y="629" width="2.3662%" height="15" fill="rgb(206,108,45)"/><text x="29.5017%" y="639.50">do..</text></g><g><title>__do_page_fault (160 samples, 2.37%)</title><rect x="29.2517%" y="613" width="2.3662%" height="15" fill="rgb(245,210,41)"/><text x="29.5017%" y="623.50">__..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (32 samples, 0.47%)</title><rect x="31.6179%" y="645" width="0.4732%" height="15" fill="rgb(206,13,37)"/><text x="31.8679%" y="655.50"></text></g><g><title>prepare_exit_to_usermode (29 samples, 0.43%)</title><rect x="31.6622%" y="629" width="0.4289%" height="15" fill="rgb(250,61,18)"/><text x="31.9122%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (242 samples, 3.58%)</title><rect x="28.6010%" y="693" width="3.5788%" height="15" fill="rgb(235,172,48)"/><text x="28.8510%" y="703.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (242 samples, 3.58%)</title><rect x="28.6010%" y="677" width="3.5788%" height="15" fill="rgb(249,201,17)"/><text x="28.8510%" y="687.50">&lt;all..</text></g><g><title>core::ptr::write (237 samples, 3.50%)</title><rect x="28.6749%" y="661" width="3.5049%" height="15" fill="rgb(219,208,6)"/><text x="28.9249%" y="671.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (344 samples, 5.09%)</title><rect x="27.2257%" y="789" width="5.0873%" height="15" fill="rgb(248,31,23)"/><text x="27.4757%" y="799.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (344 samples, 5.09%)</title><rect x="27.2257%" y="773" width="5.0873%" height="15" fill="rgb(245,15,42)"/><text x="27.4757%" y="783.50">&lt;alloc..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (314 samples, 4.64%)</title><rect x="27.6693%" y="757" width="4.6436%" height="15" fill="rgb(222,217,39)"/><text x="27.9193%" y="767.50">core:..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (312 samples, 4.61%)</title><rect x="27.6989%" y="741" width="4.6140%" height="15" fill="rgb(210,219,27)"/><text x="27.9489%" y="751.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (312 samples, 4.61%)</title><rect x="27.6989%" y="725" width="4.6140%" height="15" fill="rgb(252,166,36)"/><text x="27.9489%" y="735.50">core:..</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (251 samples, 3.71%)</title><rect x="28.6010%" y="709" width="3.7119%" height="15" fill="rgb(245,132,34)"/><text x="28.8510%" y="719.50">core..</text></g><g><title>mass::math::fft_mult::{{closure}} (9 samples, 0.13%)</title><rect x="32.1798%" y="693" width="0.1331%" height="15" fill="rgb(236,54,3)"/><text x="32.4298%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.41%)</title><rect x="32.3129%" y="757" width="0.4141%" height="15" fill="rgb(241,173,43)"/><text x="32.5629%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (28 samples, 0.41%)</title><rect x="32.3129%" y="741" width="0.4141%" height="15" fill="rgb(215,190,9)"/><text x="32.5629%" y="751.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::get_unchecked (28 samples, 0.41%)</title><rect x="32.3129%" y="725" width="0.4141%" height="15" fill="rgb(242,101,16)"/><text x="32.5629%" y="735.50"></text></g><g><title>core::ptr::read (28 samples, 0.41%)</title><rect x="32.3129%" y="709" width="0.4141%" height="15" fill="rgb(223,190,21)"/><text x="32.5629%" y="719.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (28 samples, 0.41%)</title><rect x="32.3129%" y="693" width="0.4141%" height="15" fill="rgb(215,228,25)"/><text x="32.5629%" y="703.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (10 samples, 0.15%)</title><rect x="32.8453%" y="709" width="0.1479%" height="15" fill="rgb(225,36,22)"/><text x="33.0953%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (48 samples, 0.71%)</title><rect x="32.3129%" y="789" width="0.7098%" height="15" fill="rgb(251,106,46)"/><text x="32.5629%" y="799.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (48 samples, 0.71%)</title><rect x="32.3129%" y="773" width="0.7098%" height="15" fill="rgb(208,90,1)"/><text x="32.5629%" y="783.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (20 samples, 0.30%)</title><rect x="32.7270%" y="757" width="0.2958%" height="15" fill="rgb(243,10,4)"/><text x="32.9770%" y="767.50"></text></g><g><title>mass::math::fft_mult::{{closure}} (16 samples, 0.24%)</title><rect x="32.7862%" y="741" width="0.2366%" height="15" fill="rgb(212,137,27)"/><text x="33.0362%" y="751.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (16 samples, 0.24%)</title><rect x="32.7862%" y="725" width="0.2366%" height="15" fill="rgb(231,220,49)"/><text x="33.0362%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (394 samples, 5.83%)</title><rect x="27.2257%" y="837" width="5.8267%" height="15" fill="rgb(237,96,20)"/><text x="27.4757%" y="847.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (394 samples, 5.83%)</title><rect x="27.2257%" y="821" width="5.8267%" height="15" fill="rgb(239,229,30)"/><text x="27.4757%" y="831.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (394 samples, 5.83%)</title><rect x="27.2257%" y="805" width="5.8267%" height="15" fill="rgb(219,65,33)"/><text x="27.4757%" y="815.50">&lt;alloc:..</text></g><g><title>__perf_event_task_sched_in (8 samples, 0.12%)</title><rect x="33.1115%" y="597" width="0.1183%" height="15" fill="rgb(243,134,7)"/><text x="33.3615%" y="607.50"></text></g><g><title>perf_pmu_enable.part.0 (8 samples, 0.12%)</title><rect x="33.1115%" y="581" width="0.1183%" height="15" fill="rgb(216,177,54)"/><text x="33.3615%" y="591.50"></text></g><g><title>x86_pmu_enable (8 samples, 0.12%)</title><rect x="33.1115%" y="565" width="0.1183%" height="15" fill="rgb(211,160,20)"/><text x="33.3615%" y="575.50"></text></g><g><title>intel_tfa_pmu_enable_all (8 samples, 0.12%)</title><rect x="33.1115%" y="549" width="0.1183%" height="15" fill="rgb(239,85,39)"/><text x="33.3615%" y="559.50"></text></g><g><title>native_write_msr (8 samples, 0.12%)</title><rect x="33.1115%" y="533" width="0.1183%" height="15" fill="rgb(232,125,22)"/><text x="33.3615%" y="543.50"></text></g><g><title>__GI_munmap (12 samples, 0.18%)</title><rect x="33.0671%" y="757" width="0.1775%" height="15" fill="rgb(244,57,34)"/><text x="33.3171%" y="767.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (12 samples, 0.18%)</title><rect x="33.0671%" y="741" width="0.1775%" height="15" fill="rgb(214,203,32)"/><text x="33.3171%" y="751.50"></text></g><g><title>do_syscall_64 (12 samples, 0.18%)</title><rect x="33.0671%" y="725" width="0.1775%" height="15" fill="rgb(207,58,43)"/><text x="33.3171%" y="735.50"></text></g><g><title>__x64_sys_munmap (12 samples, 0.18%)</title><rect x="33.0671%" y="709" width="0.1775%" height="15" fill="rgb(215,193,15)"/><text x="33.3171%" y="719.50"></text></g><g><title>__vm_munmap (12 samples, 0.18%)</title><rect x="33.0671%" y="693" width="0.1775%" height="15" fill="rgb(232,15,44)"/><text x="33.3171%" y="703.50"></text></g><g><title>down_write_killable (11 samples, 0.16%)</title><rect x="33.0819%" y="677" width="0.1627%" height="15" fill="rgb(212,3,48)"/><text x="33.3319%" y="687.50"></text></g><g><title>rwsem_down_write_slowpath (11 samples, 0.16%)</title><rect x="33.0819%" y="661" width="0.1627%" height="15" fill="rgb(218,128,7)"/><text x="33.3319%" y="671.50"></text></g><g><title>schedule (11 samples, 0.16%)</title><rect x="33.0819%" y="645" width="0.1627%" height="15" fill="rgb(226,216,39)"/><text x="33.3319%" y="655.50"></text></g><g><title>__sched_text_start (11 samples, 0.16%)</title><rect x="33.0819%" y="629" width="0.1627%" height="15" fill="rgb(243,47,51)"/><text x="33.3319%" y="639.50"></text></g><g><title>finish_task_switch (10 samples, 0.15%)</title><rect x="33.0967%" y="613" width="0.1479%" height="15" fill="rgb(241,183,40)"/><text x="33.3467%" y="623.50"></text></g><g><title>tlb_finish_mmu (12 samples, 0.18%)</title><rect x="33.2890%" y="613" width="0.1775%" height="15" fill="rgb(231,217,32)"/><text x="33.5390%" y="623.50"></text></g><g><title>tlb_flush_mmu (11 samples, 0.16%)</title><rect x="33.3038%" y="597" width="0.1627%" height="15" fill="rgb(229,61,38)"/><text x="33.5538%" y="607.50"></text></g><g><title>free_pages_and_swap_cache (9 samples, 0.13%)</title><rect x="33.3333%" y="581" width="0.1331%" height="15" fill="rgb(225,210,5)"/><text x="33.5833%" y="591.50"></text></g><g><title>release_pages (8 samples, 0.12%)</title><rect x="33.3481%" y="565" width="0.1183%" height="15" fill="rgb(231,79,45)"/><text x="33.5981%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (47 samples, 0.70%)</title><rect x="33.0524%" y="805" width="0.6951%" height="15" fill="rgb(224,100,7)"/><text x="33.3024%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (47 samples, 0.70%)</title><rect x="33.0524%" y="789" width="0.6951%" height="15" fill="rgb(241,198,18)"/><text x="33.3024%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (47 samples, 0.70%)</title><rect x="33.0524%" y="773" width="0.6951%" height="15" fill="rgb(252,97,53)"/><text x="33.3024%" y="783.50"></text></g><g><title>_int_free (34 samples, 0.50%)</title><rect x="33.2446%" y="757" width="0.5028%" height="15" fill="rgb(220,88,7)"/><text x="33.4946%" y="767.50"></text></g><g><title>heap_trim (33 samples, 0.49%)</title><rect x="33.2594%" y="741" width="0.4880%" height="15" fill="rgb(213,176,14)"/><text x="33.5094%" y="751.50"></text></g><g><title>shrink_heap (33 samples, 0.49%)</title><rect x="33.2594%" y="725" width="0.4880%" height="15" fill="rgb(246,73,7)"/><text x="33.5094%" y="735.50"></text></g><g><title>__GI_madvise (33 samples, 0.49%)</title><rect x="33.2594%" y="709" width="0.4880%" height="15" fill="rgb(245,64,36)"/><text x="33.5094%" y="719.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (33 samples, 0.49%)</title><rect x="33.2594%" y="693" width="0.4880%" height="15" fill="rgb(245,80,10)"/><text x="33.5094%" y="703.50"></text></g><g><title>do_syscall_64 (33 samples, 0.49%)</title><rect x="33.2594%" y="677" width="0.4880%" height="15" fill="rgb(232,107,50)"/><text x="33.5094%" y="687.50"></text></g><g><title>__x64_sys_madvise (33 samples, 0.49%)</title><rect x="33.2594%" y="661" width="0.4880%" height="15" fill="rgb(253,3,0)"/><text x="33.5094%" y="671.50"></text></g><g><title>__do_sys_madvise (33 samples, 0.49%)</title><rect x="33.2594%" y="645" width="0.4880%" height="15" fill="rgb(212,99,53)"/><text x="33.5094%" y="655.50"></text></g><g><title>zap_page_range (31 samples, 0.46%)</title><rect x="33.2890%" y="629" width="0.4584%" height="15" fill="rgb(249,111,54)"/><text x="33.5390%" y="639.50"></text></g><g><title>unmap_single_vma (19 samples, 0.28%)</title><rect x="33.4664%" y="613" width="0.2810%" height="15" fill="rgb(249,55,30)"/><text x="33.7164%" y="623.50"></text></g><g><title>unmap_page_range (19 samples, 0.28%)</title><rect x="33.4664%" y="597" width="0.2810%" height="15" fill="rgb(237,47,42)"/><text x="33.7164%" y="607.50"></text></g><g><title>zap_pte_range.isra.0 (19 samples, 0.28%)</title><rect x="33.4664%" y="581" width="0.2810%" height="15" fill="rgb(211,20,18)"/><text x="33.7164%" y="591.50"></text></g><g><title>tlb_finish_mmu (12 samples, 0.18%)</title><rect x="33.8657%" y="533" width="0.1775%" height="15" fill="rgb(231,203,46)"/><text x="34.1157%" y="543.50"></text></g><g><title>tlb_flush_mmu (12 samples, 0.18%)</title><rect x="33.8657%" y="517" width="0.1775%" height="15" fill="rgb(237,142,3)"/><text x="34.1157%" y="527.50"></text></g><g><title>free_pages_and_swap_cache (8 samples, 0.12%)</title><rect x="33.9249%" y="501" width="0.1183%" height="15" fill="rgb(241,107,1)"/><text x="34.1749%" y="511.50"></text></g><g><title>release_pages (7 samples, 0.10%)</title><rect x="33.9397%" y="485" width="0.1035%" height="15" fill="rgb(229,83,13)"/><text x="34.1897%" y="495.50"></text></g><g><title>__do_munmap (35 samples, 0.52%)</title><rect x="33.7918%" y="565" width="0.5176%" height="15" fill="rgb(241,91,40)"/><text x="34.0418%" y="575.50"></text></g><g><title>unmap_region (31 samples, 0.46%)</title><rect x="33.8509%" y="549" width="0.4584%" height="15" fill="rgb(225,3,45)"/><text x="34.1009%" y="559.50"></text></g><g><title>unmap_vmas (18 samples, 0.27%)</title><rect x="34.0432%" y="533" width="0.2662%" height="15" fill="rgb(244,223,14)"/><text x="34.2932%" y="543.50"></text></g><g><title>unmap_single_vma (18 samples, 0.27%)</title><rect x="34.0432%" y="517" width="0.2662%" height="15" fill="rgb(224,124,37)"/><text x="34.2932%" y="527.50"></text></g><g><title>unmap_page_range (18 samples, 0.27%)</title><rect x="34.0432%" y="501" width="0.2662%" height="15" fill="rgb(251,171,30)"/><text x="34.2932%" y="511.50"></text></g><g><title>zap_pte_range.isra.0 (18 samples, 0.27%)</title><rect x="34.0432%" y="485" width="0.2662%" height="15" fill="rgb(236,46,54)"/><text x="34.2932%" y="495.50"></text></g><g><title>rwsem_optimistic_spin (8 samples, 0.12%)</title><rect x="34.3094%" y="533" width="0.1183%" height="15" fill="rgb(245,213,5)"/><text x="34.5594%" y="543.50"></text></g><g><title>core::ptr::drop_in_place (117 samples, 1.73%)</title><rect x="33.0524%" y="837" width="1.7303%" height="15" fill="rgb(230,144,27)"/><text x="33.3024%" y="847.50"></text></g><g><title>core::ptr::drop_in_place (117 samples, 1.73%)</title><rect x="33.0524%" y="821" width="1.7303%" height="15" fill="rgb(220,86,6)"/><text x="33.3024%" y="831.50"></text></g><g><title>core::ptr::drop_in_place (70 samples, 1.04%)</title><rect x="33.7474%" y="805" width="1.0352%" height="15" fill="rgb(240,20,13)"/><text x="33.9974%" y="815.50"></text></g><g><title>core::ptr::drop_in_place (70 samples, 1.04%)</title><rect x="33.7474%" y="789" width="1.0352%" height="15" fill="rgb(217,89,34)"/><text x="33.9974%" y="799.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 1.04%)</title><rect x="33.7474%" y="773" width="1.0352%" height="15" fill="rgb(229,13,5)"/><text x="33.9974%" y="783.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (70 samples, 1.04%)</title><rect x="33.7474%" y="757" width="1.0352%" height="15" fill="rgb(244,67,35)"/><text x="33.9974%" y="767.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (70 samples, 1.04%)</title><rect x="33.7474%" y="741" width="1.0352%" height="15" fill="rgb(221,40,2)"/><text x="33.9974%" y="751.50"></text></g><g><title>core::ptr::drop_in_place (70 samples, 1.04%)</title><rect x="33.7474%" y="725" width="1.0352%" height="15" fill="rgb(237,157,21)"/><text x="33.9974%" y="735.50"></text></g><g><title>core::ptr::drop_in_place (70 samples, 1.04%)</title><rect x="33.7474%" y="709" width="1.0352%" height="15" fill="rgb(222,94,11)"/><text x="33.9974%" y="719.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (70 samples, 1.04%)</title><rect x="33.7474%" y="693" width="1.0352%" height="15" fill="rgb(249,113,6)"/><text x="33.9974%" y="703.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (69 samples, 1.02%)</title><rect x="33.7622%" y="677" width="1.0204%" height="15" fill="rgb(238,137,36)"/><text x="34.0122%" y="687.50"></text></g><g><title>core::ptr::drop_in_place (69 samples, 1.02%)</title><rect x="33.7622%" y="661" width="1.0204%" height="15" fill="rgb(210,102,26)"/><text x="34.0122%" y="671.50"></text></g><g><title>__GI_munmap (67 samples, 0.99%)</title><rect x="33.7918%" y="645" width="0.9908%" height="15" fill="rgb(218,30,30)"/><text x="34.0418%" y="655.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (67 samples, 0.99%)</title><rect x="33.7918%" y="629" width="0.9908%" height="15" fill="rgb(214,67,26)"/><text x="34.0418%" y="639.50"></text></g><g><title>do_syscall_64 (67 samples, 0.99%)</title><rect x="33.7918%" y="613" width="0.9908%" height="15" fill="rgb(251,9,53)"/><text x="34.0418%" y="623.50"></text></g><g><title>__x64_sys_munmap (67 samples, 0.99%)</title><rect x="33.7918%" y="597" width="0.9908%" height="15" fill="rgb(228,204,25)"/><text x="34.0418%" y="607.50"></text></g><g><title>__vm_munmap (67 samples, 0.99%)</title><rect x="33.7918%" y="581" width="0.9908%" height="15" fill="rgb(207,153,8)"/><text x="34.0418%" y="591.50"></text></g><g><title>down_write_killable (32 samples, 0.47%)</title><rect x="34.3094%" y="565" width="0.4732%" height="15" fill="rgb(242,9,16)"/><text x="34.5594%" y="575.50"></text></g><g><title>rwsem_down_write_slowpath (32 samples, 0.47%)</title><rect x="34.3094%" y="549" width="0.4732%" height="15" fill="rgb(217,211,10)"/><text x="34.5594%" y="559.50"></text></g><g><title>schedule (24 samples, 0.35%)</title><rect x="34.4277%" y="533" width="0.3549%" height="15" fill="rgb(219,228,52)"/><text x="34.6777%" y="543.50"></text></g><g><title>__sched_text_start (23 samples, 0.34%)</title><rect x="34.4425%" y="517" width="0.3401%" height="15" fill="rgb(231,92,29)"/><text x="34.6925%" y="527.50"></text></g><g><title>finish_task_switch (19 samples, 0.28%)</title><rect x="34.5016%" y="501" width="0.2810%" height="15" fill="rgb(232,8,23)"/><text x="34.7516%" y="511.50"></text></g><g><title>__perf_event_task_sched_in (18 samples, 0.27%)</title><rect x="34.5164%" y="485" width="0.2662%" height="15" fill="rgb(216,211,34)"/><text x="34.7664%" y="495.50"></text></g><g><title>perf_pmu_enable.part.0 (18 samples, 0.27%)</title><rect x="34.5164%" y="469" width="0.2662%" height="15" fill="rgb(236,151,0)"/><text x="34.7664%" y="479.50"></text></g><g><title>x86_pmu_enable (18 samples, 0.27%)</title><rect x="34.5164%" y="453" width="0.2662%" height="15" fill="rgb(209,168,3)"/><text x="34.7664%" y="463.50"></text></g><g><title>intel_tfa_pmu_enable_all (18 samples, 0.27%)</title><rect x="34.5164%" y="437" width="0.2662%" height="15" fill="rgb(208,129,28)"/><text x="34.7664%" y="447.50"></text></g><g><title>native_write_msr (18 samples, 0.27%)</title><rect x="34.5164%" y="421" width="0.2662%" height="15" fill="rgb(229,78,22)"/><text x="34.7664%" y="431.50"></text></g><g><title>alloc_pages_vma (7 samples, 0.10%)</title><rect x="35.0340%" y="533" width="0.1035%" height="15" fill="rgb(228,187,13)"/><text x="35.2840%" y="543.50"></text></g><g><title>__alloc_pages_nodemask (7 samples, 0.10%)</title><rect x="35.0340%" y="517" width="0.1035%" height="15" fill="rgb(240,119,24)"/><text x="35.2840%" y="527.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.10%)</title><rect x="35.0340%" y="501" width="0.1035%" height="15" fill="rgb(209,194,42)"/><text x="35.2840%" y="511.50"></text></g><g><title>do_user_addr_fault (16 samples, 0.24%)</title><rect x="34.9453%" y="597" width="0.2366%" height="15" fill="rgb(247,200,46)"/><text x="35.1953%" y="607.50"></text></g><g><title>handle_mm_fault (13 samples, 0.19%)</title><rect x="34.9896%" y="581" width="0.1923%" height="15" fill="rgb(218,76,16)"/><text x="35.2396%" y="591.50"></text></g><g><title>__handle_mm_fault (12 samples, 0.18%)</title><rect x="35.0044%" y="565" width="0.1775%" height="15" fill="rgb(225,21,48)"/><text x="35.2544%" y="575.50"></text></g><g><title>do_anonymous_page (12 samples, 0.18%)</title><rect x="35.0044%" y="549" width="0.1775%" height="15" fill="rgb(239,223,50)"/><text x="35.2544%" y="559.50"></text></g><g><title>page_fault (20 samples, 0.30%)</title><rect x="34.9305%" y="645" width="0.2958%" height="15" fill="rgb(244,45,21)"/><text x="35.1805%" y="655.50"></text></g><g><title>do_page_fault (20 samples, 0.30%)</title><rect x="34.9305%" y="629" width="0.2958%" height="15" fill="rgb(232,33,43)"/><text x="35.1805%" y="639.50"></text></g><g><title>__do_page_fault (19 samples, 0.28%)</title><rect x="34.9453%" y="613" width="0.2810%" height="15" fill="rgb(209,8,3)"/><text x="35.1953%" y="623.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.12%)</title><rect x="35.2263%" y="645" width="0.1183%" height="15" fill="rgb(214,25,53)"/><text x="35.4763%" y="655.50"></text></g><g><title>prepare_exit_to_usermode (8 samples, 0.12%)</title><rect x="35.2263%" y="629" width="0.1183%" height="15" fill="rgb(254,186,54)"/><text x="35.4763%" y="639.50"></text></g><g><title>mass::stats::append (39 samples, 0.58%)</title><rect x="34.7826%" y="837" width="0.5768%" height="15" fill="rgb(208,174,49)"/><text x="35.0326%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (39 samples, 0.58%)</title><rect x="34.7826%" y="821" width="0.5768%" height="15" fill="rgb(233,191,51)"/><text x="35.0326%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (39 samples, 0.58%)</title><rect x="34.7826%" y="805" width="0.5768%" height="15" fill="rgb(222,134,10)"/><text x="35.0326%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (35 samples, 0.52%)</title><rect x="34.8418%" y="789" width="0.5176%" height="15" fill="rgb(230,226,20)"/><text x="35.0918%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (35 samples, 0.52%)</title><rect x="34.8418%" y="773" width="0.5176%" height="15" fill="rgb(251,111,25)"/><text x="35.0918%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (35 samples, 0.52%)</title><rect x="34.8418%" y="757" width="0.5176%" height="15" fill="rgb(224,40,46)"/><text x="35.0918%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (35 samples, 0.52%)</title><rect x="34.8418%" y="741" width="0.5176%" height="15" fill="rgb(236,108,47)"/><text x="35.0918%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (35 samples, 0.52%)</title><rect x="34.8418%" y="725" width="0.5176%" height="15" fill="rgb(234,93,0)"/><text x="35.0918%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (35 samples, 0.52%)</title><rect x="34.8418%" y="709" width="0.5176%" height="15" fill="rgb(224,213,32)"/><text x="35.0918%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (35 samples, 0.52%)</title><rect x="34.8418%" y="693" width="0.5176%" height="15" fill="rgb(251,11,48)"/><text x="35.0918%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (35 samples, 0.52%)</title><rect x="34.8418%" y="677" width="0.5176%" height="15" fill="rgb(236,173,5)"/><text x="35.0918%" y="687.50"></text></g><g><title>core::ptr::write (35 samples, 0.52%)</title><rect x="34.8418%" y="661" width="0.5176%" height="15" fill="rgb(230,95,12)"/><text x="35.0918%" y="671.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (20 samples, 0.30%)</title><rect x="40.5353%" y="789" width="0.2958%" height="15" fill="rgb(232,209,1)"/><text x="40.7853%" y="799.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (18 samples, 0.27%)</title><rect x="40.5649%" y="773" width="0.2662%" height="15" fill="rgb(232,6,1)"/><text x="40.8149%" y="783.50"></text></g><g><title>rustfft::algorithm::butterflies::Butterfly2::perform_fft_direct (8 samples, 0.12%)</title><rect x="40.9494%" y="773" width="0.1183%" height="15" fill="rgb(210,224,50)"/><text x="41.1994%" y="783.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly4 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (18 samples, 0.27%)</title><rect x="40.8607%" y="789" width="0.2662%" height="15" fill="rgb(228,127,35)"/><text x="41.1107%" y="799.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (7 samples, 0.10%)</title><rect x="41.1565%" y="741" width="0.1035%" height="15" fill="rgb(245,102,45)"/><text x="41.4065%" y="751.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::mul (12 samples, 0.18%)</title><rect x="41.1565%" y="773" width="0.1775%" height="15" fill="rgb(214,1,49)"/><text x="41.4065%" y="783.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (12 samples, 0.18%)</title><rect x="41.1565%" y="757" width="0.1775%" height="15" fill="rgb(226,163,40)"/><text x="41.4065%" y="767.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly2 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (7 samples, 0.10%)</title><rect x="41.3339%" y="773" width="0.1035%" height="15" fill="rgb(239,212,28)"/><text x="41.5839%" y="783.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly8&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (35 samples, 0.52%)</title><rect x="41.1269%" y="789" width="0.5176%" height="15" fill="rgb(220,20,13)"/><text x="41.3769%" y="799.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly4 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (14 samples, 0.21%)</title><rect x="41.4374%" y="773" width="0.2070%" height="15" fill="rgb(210,164,35)"/><text x="41.6874%" y="783.50"></text></g><g><title>rustfft::twiddles::rotate_90 (8 samples, 0.12%)</title><rect x="41.5262%" y="757" width="0.1183%" height="15" fill="rgb(248,109,41)"/><text x="41.7762%" y="767.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (159 samples, 2.35%)</title><rect x="39.5149%" y="821" width="2.3514%" height="15" fill="rgb(238,23,50)"/><text x="39.7649%" y="831.50">&lt;..</text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (156 samples, 2.31%)</title><rect x="39.5593%" y="805" width="2.3070%" height="15" fill="rgb(211,48,49)"/><text x="39.8093%" y="815.50">&lt;..</text></g><g><title>rustfft::twiddles::rotate_90 (11 samples, 0.16%)</title><rect x="41.7036%" y="789" width="0.1627%" height="15" fill="rgb(223,36,21)"/><text x="41.9536%" y="799.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::add (28 samples, 0.41%)</title><rect x="44.3804%" y="805" width="0.4141%" height="15" fill="rgb(207,123,46)"/><text x="44.6304%" y="815.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (28 samples, 0.41%)</title><rect x="44.3804%" y="789" width="0.4141%" height="15" fill="rgb(240,218,32)"/><text x="44.6304%" y="799.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (28 samples, 0.41%)</title><rect x="44.3804%" y="773" width="0.4141%" height="15" fill="rgb(252,5,43)"/><text x="44.6304%" y="783.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (59 samples, 0.87%)</title><rect x="44.7944%" y="773" width="0.8725%" height="15" fill="rgb(252,84,19)"/><text x="45.0444%" y="783.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::mul (94 samples, 1.39%)</title><rect x="44.7944%" y="805" width="1.3901%" height="15" fill="rgb(243,152,39)"/><text x="45.0444%" y="815.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (94 samples, 1.39%)</title><rect x="44.7944%" y="789" width="1.3901%" height="15" fill="rgb(234,160,15)"/><text x="45.0444%" y="799.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (35 samples, 0.52%)</title><rect x="45.6670%" y="773" width="0.5176%" height="15" fill="rgb(237,34,20)"/><text x="45.9170%" y="783.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::sub (51 samples, 0.75%)</title><rect x="46.1846%" y="805" width="0.7542%" height="15" fill="rgb(229,97,13)"/><text x="46.4346%" y="815.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (51 samples, 0.75%)</title><rect x="46.1846%" y="789" width="0.7542%" height="15" fill="rgb(234,71,50)"/><text x="46.4346%" y="799.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (51 samples, 0.75%)</title><rect x="46.1846%" y="773" width="0.7542%" height="15" fill="rgb(253,155,4)"/><text x="46.4346%" y="783.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (12 samples, 0.18%)</title><rect x="46.9388%" y="805" width="0.1775%" height="15" fill="rgb(222,185,37)"/><text x="47.1888%" y="815.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (12 samples, 0.18%)</title><rect x="47.1162%" y="805" width="0.1775%" height="15" fill="rgb(251,177,13)"/><text x="47.3662%" y="815.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (42 samples, 0.62%)</title><rect x="47.2937%" y="805" width="0.6211%" height="15" fill="rgb(250,179,40)"/><text x="47.5437%" y="815.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (42 samples, 0.62%)</title><rect x="47.2937%" y="789" width="0.6211%" height="15" fill="rgb(242,44,2)"/><text x="47.5437%" y="799.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (17 samples, 0.25%)</title><rect x="47.9148%" y="805" width="0.2514%" height="15" fill="rgb(216,177,13)"/><text x="48.1648%" y="815.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (17 samples, 0.25%)</title><rect x="47.9148%" y="789" width="0.2514%" height="15" fill="rgb(216,106,43)"/><text x="48.1648%" y="799.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.18%)</title><rect x="48.1662%" y="805" width="0.1775%" height="15" fill="rgb(216,183,2)"/><text x="48.4162%" y="815.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (11 samples, 0.16%)</title><rect x="48.1810%" y="789" width="0.1627%" height="15" fill="rgb(249,75,3)"/><text x="48.4310%" y="799.50"></text></g><g><title>rustfft::algorithm::radix4::butterfly_4 (437 samples, 6.46%)</title><rect x="41.8959%" y="821" width="6.4626%" height="15" fill="rgb(219,67,39)"/><text x="42.1459%" y="831.50">rustfft:..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (295 samples, 4.36%)</title><rect x="48.3585%" y="821" width="4.3626%" height="15" fill="rgb(253,228,2)"/><text x="48.6085%" y="831.50">rustf..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (295 samples, 4.36%)</title><rect x="48.3585%" y="805" width="4.3626%" height="15" fill="rgb(235,138,27)"/><text x="48.6085%" y="815.50">rustf..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (292 samples, 4.32%)</title><rect x="48.4028%" y="789" width="4.3182%" height="15" fill="rgb(236,97,51)"/><text x="48.6528%" y="799.50">rustf..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (277 samples, 4.10%)</title><rect x="48.6247%" y="773" width="4.0964%" height="15" fill="rgb(240,80,30)"/><text x="48.8747%" y="783.50">rust..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (204 samples, 3.02%)</title><rect x="49.7042%" y="757" width="3.0169%" height="15" fill="rgb(230,178,19)"/><text x="49.9542%" y="767.50">rus..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (84 samples, 1.24%)</title><rect x="51.4789%" y="741" width="1.2422%" height="15" fill="rgb(210,190,27)"/><text x="51.7289%" y="751.50"></text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::perform_fft (1,173 samples, 17.35%)</title><rect x="35.3889%" y="837" width="17.3469%" height="15" fill="rgb(222,107,31)"/><text x="35.6389%" y="847.50">rustfft::algorithm::radix4:..</text></g><g><title>__do_munmap (8 samples, 0.12%)</title><rect x="52.7950%" y="597" width="0.1183%" height="15" fill="rgb(216,127,34)"/><text x="53.0450%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::into_boxed_slice (12 samples, 0.18%)</title><rect x="52.7950%" y="789" width="0.1775%" height="15" fill="rgb(234,116,52)"/><text x="53.0450%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::shrink_to_fit (12 samples, 0.18%)</title><rect x="52.7950%" y="773" width="0.1775%" height="15" fill="rgb(222,124,15)"/><text x="53.0450%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink_to_fit (12 samples, 0.18%)</title><rect x="52.7950%" y="757" width="0.1775%" height="15" fill="rgb(231,179,28)"/><text x="53.0450%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::shrink (12 samples, 0.18%)</title><rect x="52.7950%" y="741" width="0.1775%" height="15" fill="rgb(226,93,45)"/><text x="53.0450%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::shrink (12 samples, 0.18%)</title><rect x="52.7950%" y="725" width="0.1775%" height="15" fill="rgb(215,8,51)"/><text x="53.0450%" y="735.50"></text></g><g><title>alloc::alloc::realloc (12 samples, 0.18%)</title><rect x="52.7950%" y="709" width="0.1775%" height="15" fill="rgb(223,106,5)"/><text x="53.0450%" y="719.50"></text></g><g><title>__GI___libc_realloc (12 samples, 0.18%)</title><rect x="52.7950%" y="693" width="0.1775%" height="15" fill="rgb(250,191,5)"/><text x="53.0450%" y="703.50"></text></g><g><title>mremap_chunk (12 samples, 0.18%)</title><rect x="52.7950%" y="677" width="0.1775%" height="15" fill="rgb(242,132,44)"/><text x="53.0450%" y="687.50"></text></g><g><title>__GI___mremap (12 samples, 0.18%)</title><rect x="52.7950%" y="661" width="0.1775%" height="15" fill="rgb(251,152,29)"/><text x="53.0450%" y="671.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (12 samples, 0.18%)</title><rect x="52.7950%" y="645" width="0.1775%" height="15" fill="rgb(218,179,5)"/><text x="53.0450%" y="655.50"></text></g><g><title>do_syscall_64 (12 samples, 0.18%)</title><rect x="52.7950%" y="629" width="0.1775%" height="15" fill="rgb(227,67,19)"/><text x="53.0450%" y="639.50"></text></g><g><title>__x64_sys_mremap (12 samples, 0.18%)</title><rect x="52.7950%" y="613" width="0.1775%" height="15" fill="rgb(233,119,31)"/><text x="53.0450%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (10 samples, 0.15%)</title><rect x="53.0464%" y="773" width="0.1479%" height="15" fill="rgb(241,120,22)"/><text x="53.2964%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (10 samples, 0.15%)</title><rect x="53.0464%" y="757" width="0.1479%" height="15" fill="rgb(224,102,30)"/><text x="53.2964%" y="767.50"></text></g><g><title>down_read (27 samples, 0.40%)</title><rect x="54.0816%" y="693" width="0.3993%" height="15" fill="rgb(210,164,37)"/><text x="54.3316%" y="703.50"></text></g><g><title>rwsem_down_read_slowpath (27 samples, 0.40%)</title><rect x="54.0816%" y="677" width="0.3993%" height="15" fill="rgb(226,191,16)"/><text x="54.3316%" y="687.50"></text></g><g><title>schedule (22 samples, 0.33%)</title><rect x="54.1556%" y="661" width="0.3253%" height="15" fill="rgb(214,40,45)"/><text x="54.4056%" y="671.50"></text></g><g><title>__sched_text_start (22 samples, 0.33%)</title><rect x="54.1556%" y="645" width="0.3253%" height="15" fill="rgb(244,29,26)"/><text x="54.4056%" y="655.50"></text></g><g><title>finish_task_switch (20 samples, 0.30%)</title><rect x="54.1852%" y="629" width="0.2958%" height="15" fill="rgb(216,16,5)"/><text x="54.4352%" y="639.50"></text></g><g><title>__perf_event_task_sched_in (20 samples, 0.30%)</title><rect x="54.1852%" y="613" width="0.2958%" height="15" fill="rgb(249,76,35)"/><text x="54.4352%" y="623.50"></text></g><g><title>perf_pmu_enable.part.0 (20 samples, 0.30%)</title><rect x="54.1852%" y="597" width="0.2958%" height="15" fill="rgb(207,11,44)"/><text x="54.4352%" y="607.50"></text></g><g><title>x86_pmu_enable (20 samples, 0.30%)</title><rect x="54.1852%" y="581" width="0.2958%" height="15" fill="rgb(228,190,49)"/><text x="54.4352%" y="591.50"></text></g><g><title>intel_tfa_pmu_enable_all (20 samples, 0.30%)</title><rect x="54.1852%" y="565" width="0.2958%" height="15" fill="rgb(214,173,12)"/><text x="54.4352%" y="575.50"></text></g><g><title>native_write_msr (20 samples, 0.30%)</title><rect x="54.1852%" y="549" width="0.2958%" height="15" fill="rgb(218,26,35)"/><text x="54.4352%" y="559.50"></text></g><g><title>clear_page_erms (27 samples, 0.40%)</title><rect x="54.8950%" y="597" width="0.3993%" height="15" fill="rgb(220,200,19)"/><text x="55.1450%" y="607.50"></text></g><g><title>get_page_from_freelist (46 samples, 0.68%)</title><rect x="54.8506%" y="613" width="0.6803%" height="15" fill="rgb(239,95,49)"/><text x="55.1006%" y="623.50"></text></g><g><title>rmqueue (15 samples, 0.22%)</title><rect x="55.3091%" y="597" width="0.2218%" height="15" fill="rgb(235,85,53)"/><text x="55.5591%" y="607.50"></text></g><g><title>__alloc_pages_nodemask (48 samples, 0.71%)</title><rect x="54.8358%" y="629" width="0.7098%" height="15" fill="rgb(233,133,31)"/><text x="55.0858%" y="639.50"></text></g><g><title>alloc_pages_vma (50 samples, 0.74%)</title><rect x="54.8358%" y="645" width="0.7394%" height="15" fill="rgb(218,25,20)"/><text x="55.0858%" y="655.50"></text></g><g><title>lru_cache_add_active_or_unevictable (11 samples, 0.16%)</title><rect x="55.5753%" y="645" width="0.1627%" height="15" fill="rgb(252,210,38)"/><text x="55.8253%" y="655.50"></text></g><g><title>__lru_cache_add (10 samples, 0.15%)</title><rect x="55.5901%" y="629" width="0.1479%" height="15" fill="rgb(242,134,21)"/><text x="55.8401%" y="639.50"></text></g><g><title>pagevec_lru_move_fn (10 samples, 0.15%)</title><rect x="55.5901%" y="613" width="0.1479%" height="15" fill="rgb(213,28,48)"/><text x="55.8401%" y="623.50"></text></g><g><title>mem_cgroup_try_charge_delay (8 samples, 0.12%)</title><rect x="55.7971%" y="645" width="0.1183%" height="15" fill="rgb(250,196,2)"/><text x="56.0471%" y="655.50"></text></g><g><title>do_anonymous_page (82 samples, 1.21%)</title><rect x="54.7619%" y="661" width="1.2127%" height="15" fill="rgb(227,5,17)"/><text x="55.0119%" y="671.50"></text></g><g><title>handle_mm_fault (93 samples, 1.38%)</title><rect x="54.6140%" y="693" width="1.3753%" height="15" fill="rgb(221,226,24)"/><text x="54.8640%" y="703.50"></text></g><g><title>__handle_mm_fault (90 samples, 1.33%)</title><rect x="54.6584%" y="677" width="1.3310%" height="15" fill="rgb(211,5,48)"/><text x="54.9084%" y="687.50"></text></g><g><title>do_user_addr_fault (130 samples, 1.92%)</title><rect x="54.0816%" y="709" width="1.9225%" height="15" fill="rgb(219,150,6)"/><text x="54.3316%" y="719.50">d..</text></g><g><title>page_fault (138 samples, 2.04%)</title><rect x="54.0225%" y="757" width="2.0408%" height="15" fill="rgb(251,46,16)"/><text x="54.2725%" y="767.50">p..</text></g><g><title>do_page_fault (135 samples, 2.00%)</title><rect x="54.0668%" y="741" width="1.9965%" height="15" fill="rgb(220,204,40)"/><text x="54.3168%" y="751.50">d..</text></g><g><title>__do_page_fault (135 samples, 2.00%)</title><rect x="54.0668%" y="725" width="1.9965%" height="15" fill="rgb(211,85,2)"/><text x="54.3168%" y="735.50">_..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (36 samples, 0.53%)</title><rect x="56.0633%" y="757" width="0.5324%" height="15" fill="rgb(229,17,7)"/><text x="56.3133%" y="767.50"></text></g><g><title>prepare_exit_to_usermode (35 samples, 0.52%)</title><rect x="56.0781%" y="741" width="0.5176%" height="15" fill="rgb(239,72,28)"/><text x="56.3281%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (252 samples, 3.73%)</title><rect x="52.9725%" y="789" width="3.7267%" height="15" fill="rgb(230,47,54)"/><text x="53.2225%" y="799.50">allo..</text></g><g><title>core::ptr::write (237 samples, 3.50%)</title><rect x="53.1943%" y="773" width="3.5049%" height="15" fill="rgb(214,50,8)"/><text x="53.4443%" y="783.50">cor..</text></g><g><title>sync_regs (7 samples, 0.10%)</title><rect x="56.5957%" y="757" width="0.1035%" height="15" fill="rgb(216,198,43)"/><text x="56.8457%" y="767.50"></text></g><g><title>do_mmap (7 samples, 0.10%)</title><rect x="56.7436%" y="517" width="0.1035%" height="15" fill="rgb(234,20,35)"/><text x="56.9936%" y="527.50"></text></g><g><title>mmap_region (7 samples, 0.10%)</title><rect x="56.7436%" y="501" width="0.1035%" height="15" fill="rgb(254,45,19)"/><text x="56.9936%" y="511.50"></text></g><g><title>down_write_killable (8 samples, 0.12%)</title><rect x="56.8471%" y="517" width="0.1183%" height="15" fill="rgb(219,14,44)"/><text x="57.0971%" y="527.50"></text></g><g><title>rwsem_down_write_slowpath (8 samples, 0.12%)</title><rect x="56.8471%" y="501" width="0.1183%" height="15" fill="rgb(217,220,26)"/><text x="57.0971%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (18 samples, 0.27%)</title><rect x="56.7436%" y="597" width="0.2662%" height="15" fill="rgb(213,158,28)"/><text x="56.9936%" y="607.50"></text></g><g><title>do_syscall_64 (18 samples, 0.27%)</title><rect x="56.7436%" y="581" width="0.2662%" height="15" fill="rgb(252,51,52)"/><text x="56.9936%" y="591.50"></text></g><g><title>__x64_sys_mmap (18 samples, 0.27%)</title><rect x="56.7436%" y="565" width="0.2662%" height="15" fill="rgb(246,89,16)"/><text x="56.9936%" y="575.50"></text></g><g><title>ksys_mmap_pgoff (18 samples, 0.27%)</title><rect x="56.7436%" y="549" width="0.2662%" height="15" fill="rgb(216,158,49)"/><text x="56.9936%" y="559.50"></text></g><g><title>vm_mmap_pgoff (18 samples, 0.27%)</title><rect x="56.7436%" y="533" width="0.2662%" height="15" fill="rgb(236,107,19)"/><text x="56.9936%" y="543.50"></text></g><g><title>__GI___mmap64 (19 samples, 0.28%)</title><rect x="56.7436%" y="629" width="0.2810%" height="15" fill="rgb(228,185,30)"/><text x="56.9936%" y="639.50"></text></g><g><title>__GI___mmap64 (19 samples, 0.28%)</title><rect x="56.7436%" y="613" width="0.2810%" height="15" fill="rgb(246,134,8)"/><text x="56.9936%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (25 samples, 0.37%)</title><rect x="56.6992%" y="789" width="0.3697%" height="15" fill="rgb(214,143,50)"/><text x="56.9492%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (25 samples, 0.37%)</title><rect x="56.6992%" y="773" width="0.3697%" height="15" fill="rgb(228,75,8)"/><text x="56.9492%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (25 samples, 0.37%)</title><rect x="56.6992%" y="757" width="0.3697%" height="15" fill="rgb(207,175,4)"/><text x="56.9492%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (25 samples, 0.37%)</title><rect x="56.6992%" y="741" width="0.3697%" height="15" fill="rgb(205,108,24)"/><text x="56.9492%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (25 samples, 0.37%)</title><rect x="56.6992%" y="725" width="0.3697%" height="15" fill="rgb(244,120,49)"/><text x="56.9492%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (25 samples, 0.37%)</title><rect x="56.6992%" y="709" width="0.3697%" height="15" fill="rgb(223,47,38)"/><text x="56.9492%" y="719.50"></text></g><g><title>alloc::alloc::alloc (25 samples, 0.37%)</title><rect x="56.6992%" y="693" width="0.3697%" height="15" fill="rgb(229,179,11)"/><text x="56.9492%" y="703.50"></text></g><g><title>__GI___libc_malloc (25 samples, 0.37%)</title><rect x="56.6992%" y="677" width="0.3697%" height="15" fill="rgb(231,122,1)"/><text x="56.9492%" y="687.50"></text></g><g><title>_int_malloc (25 samples, 0.37%)</title><rect x="56.6992%" y="661" width="0.3697%" height="15" fill="rgb(245,119,9)"/><text x="56.9492%" y="671.50"></text></g><g><title>sysmalloc (24 samples, 0.35%)</title><rect x="56.7140%" y="645" width="0.3549%" height="15" fill="rgb(241,163,25)"/><text x="56.9640%" y="655.50"></text></g><g><title>do_cos (235 samples, 3.48%)</title><rect x="59.7456%" y="709" width="3.4753%" height="15" fill="rgb(217,214,3)"/><text x="59.9956%" y="719.50">do_..</text></g><g><title>do_sin (327 samples, 4.84%)</title><rect x="63.2209%" y="709" width="4.8358%" height="15" fill="rgb(240,86,28)"/><text x="63.4709%" y="719.50">do_sin</text></g><g><title>libc_feholdsetround_sse_ctx (31 samples, 0.46%)</title><rect x="68.0568%" y="709" width="0.4584%" height="15" fill="rgb(215,47,9)"/><text x="68.3068%" y="719.50"></text></g><g><title>libc_feresetround_sse_ctx (14 samples, 0.21%)</title><rect x="68.5152%" y="709" width="0.2070%" height="15" fill="rgb(252,25,45)"/><text x="68.7652%" y="719.50"></text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::new (1,142 samples, 16.89%)</title><rect x="52.7950%" y="805" width="16.8885%" height="15" fill="rgb(251,164,9)"/><text x="53.0450%" y="815.50">rustfft::algorithm::radix4..</text></g><g><title>rustfft::twiddles::single_twiddle (849 samples, 12.56%)</title><rect x="57.1281%" y="789" width="12.5555%" height="15" fill="rgb(233,194,0)"/><text x="57.3781%" y="799.50">rustfft::twiddles::..</text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (798 samples, 11.80%)</title><rect x="57.8823%" y="773" width="11.8012%" height="15" fill="rgb(249,111,24)"/><text x="58.1323%" y="783.50">num_complex::Compl..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (798 samples, 11.80%)</title><rect x="57.8823%" y="757" width="11.8012%" height="15" fill="rgb(250,223,3)"/><text x="58.1323%" y="767.50">&lt;f64 as num_traits..</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (798 samples, 11.80%)</title><rect x="57.8823%" y="741" width="11.8012%" height="15" fill="rgb(236,178,37)"/><text x="58.1323%" y="751.50">std::f64::&lt;impl f6..</text></g><g><title>__sincos (769 samples, 11.37%)</title><rect x="58.3112%" y="725" width="11.3724%" height="15" fill="rgb(241,158,50)"/><text x="58.5612%" y="735.50">__sincos</text></g><g><title>reduce_sincos (65 samples, 0.96%)</title><rect x="68.7223%" y="709" width="0.9613%" height="15" fill="rgb(213,121,41)"/><text x="68.9723%" y="719.50"></text></g><g><title>mass::math::fft_mult (3,091 samples, 45.71%)</title><rect x="24.0018%" y="853" width="45.7113%" height="15" fill="rgb(240,92,3)"/><text x="24.2518%" y="863.50">mass::math::fft_mult</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft (1,148 samples, 16.98%)</title><rect x="52.7359%" y="837" width="16.9772%" height="15" fill="rgb(205,123,3)"/><text x="52.9859%" y="847.50">rustfft::plan::FFTplanner&lt;..</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (1,146 samples, 16.95%)</title><rect x="52.7655%" y="821" width="16.9476%" height="15" fill="rgb(205,97,47)"/><text x="53.0155%" y="831.50">rustfft::plan::FFTplanner&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.13%)</title><rect x="69.8462%" y="645" width="0.1331%" height="15" fill="rgb(247,152,14)"/><text x="70.0962%" y="655.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (9 samples, 0.13%)</title><rect x="69.8462%" y="629" width="0.1331%" height="15" fill="rgb(248,195,53)"/><text x="70.0962%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (9 samples, 0.13%)</title><rect x="69.8462%" y="613" width="0.1331%" height="15" fill="rgb(226,201,16)"/><text x="70.0962%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.24%)</title><rect x="69.7575%" y="693" width="0.2366%" height="15" fill="rgb(205,98,0)"/><text x="70.0075%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (16 samples, 0.24%)</title><rect x="69.7575%" y="677" width="0.2366%" height="15" fill="rgb(214,191,48)"/><text x="70.0075%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.24%)</title><rect x="69.7575%" y="661" width="0.2366%" height="15" fill="rgb(237,112,39)"/><text x="70.0075%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (10 samples, 0.15%)</title><rect x="69.9941%" y="677" width="0.1479%" height="15" fill="rgb(247,203,27)"/><text x="70.2441%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (10 samples, 0.15%)</title><rect x="69.9941%" y="661" width="0.1479%" height="15" fill="rgb(235,124,28)"/><text x="70.2441%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (110 samples, 1.63%)</title><rect x="69.7131%" y="821" width="1.6267%" height="15" fill="rgb(208,207,46)"/><text x="69.9631%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (110 samples, 1.63%)</title><rect x="69.7131%" y="805" width="1.6267%" height="15" fill="rgb(234,176,4)"/><text x="69.9631%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (110 samples, 1.63%)</title><rect x="69.7131%" y="789" width="1.6267%" height="15" fill="rgb(230,133,28)"/><text x="69.9631%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (110 samples, 1.63%)</title><rect x="69.7131%" y="773" width="1.6267%" height="15" fill="rgb(211,137,40)"/><text x="69.9631%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (110 samples, 1.63%)</title><rect x="69.7131%" y="757" width="1.6267%" height="15" fill="rgb(254,35,13)"/><text x="69.9631%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (110 samples, 1.63%)</title><rect x="69.7131%" y="741" width="1.6267%" height="15" fill="rgb(225,49,51)"/><text x="69.9631%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (110 samples, 1.63%)</title><rect x="69.7131%" y="725" width="1.6267%" height="15" fill="rgb(251,10,15)"/><text x="69.9631%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (107 samples, 1.58%)</title><rect x="69.7575%" y="709" width="1.5824%" height="15" fill="rgb(228,207,15)"/><text x="70.0075%" y="719.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (91 samples, 1.35%)</title><rect x="69.9941%" y="693" width="1.3458%" height="15" fill="rgb(241,99,19)"/><text x="70.2441%" y="703.50"></text></g><g><title>mass::stats::rolling_mean::{{closure}} (81 samples, 1.20%)</title><rect x="70.1420%" y="677" width="1.1979%" height="15" fill="rgb(207,104,49)"/><text x="70.3920%" y="687.50"></text></g><g><title>mass::stats::moving_avg (111 samples, 1.64%)</title><rect x="69.7131%" y="853" width="1.6415%" height="15" fill="rgb(234,99,18)"/><text x="69.9631%" y="863.50"></text></g><g><title>mass::stats::rolling_mean (111 samples, 1.64%)</title><rect x="69.7131%" y="837" width="1.6415%" height="15" fill="rgb(213,191,49)"/><text x="69.9631%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.35%)</title><rect x="71.4434%" y="693" width="0.3549%" height="15" fill="rgb(210,226,19)"/><text x="71.6934%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (24 samples, 0.35%)</title><rect x="71.4434%" y="677" width="0.3549%" height="15" fill="rgb(229,97,18)"/><text x="71.6934%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (24 samples, 0.35%)</title><rect x="71.4434%" y="661" width="0.3549%" height="15" fill="rgb(211,167,15)"/><text x="71.6934%" y="671.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.19%)</title><rect x="71.6060%" y="645" width="0.1923%" height="15" fill="rgb(210,169,34)"/><text x="71.8560%" y="655.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (7 samples, 0.10%)</title><rect x="71.6948%" y="629" width="0.1035%" height="15" fill="rgb(241,121,31)"/><text x="71.9448%" y="639.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.10%)</title><rect x="71.6948%" y="613" width="0.1035%" height="15" fill="rgb(232,40,11)"/><text x="71.9448%" y="623.50"></text></g><g><title>finish_task_switch (15 samples, 0.22%)</title><rect x="71.9757%" y="501" width="0.2218%" height="15" fill="rgb(205,86,26)"/><text x="72.2257%" y="511.50"></text></g><g><title>__perf_event_task_sched_in (15 samples, 0.22%)</title><rect x="71.9757%" y="485" width="0.2218%" height="15" fill="rgb(231,126,28)"/><text x="72.2257%" y="495.50"></text></g><g><title>perf_pmu_enable.part.0 (15 samples, 0.22%)</title><rect x="71.9757%" y="469" width="0.2218%" height="15" fill="rgb(219,221,18)"/><text x="72.2257%" y="479.50"></text></g><g><title>x86_pmu_enable (14 samples, 0.21%)</title><rect x="71.9905%" y="453" width="0.2070%" height="15" fill="rgb(211,40,0)"/><text x="72.2405%" y="463.50"></text></g><g><title>intel_tfa_pmu_enable_all (14 samples, 0.21%)</title><rect x="71.9905%" y="437" width="0.2070%" height="15" fill="rgb(239,85,43)"/><text x="72.2405%" y="447.50"></text></g><g><title>native_write_msr (14 samples, 0.21%)</title><rect x="71.9905%" y="421" width="0.2070%" height="15" fill="rgb(231,55,21)"/><text x="72.2405%" y="431.50"></text></g><g><title>down_read (17 samples, 0.25%)</title><rect x="71.9610%" y="565" width="0.2514%" height="15" fill="rgb(225,184,43)"/><text x="72.2110%" y="575.50"></text></g><g><title>rwsem_down_read_slowpath (17 samples, 0.25%)</title><rect x="71.9610%" y="549" width="0.2514%" height="15" fill="rgb(251,158,41)"/><text x="72.2110%" y="559.50"></text></g><g><title>schedule (16 samples, 0.24%)</title><rect x="71.9757%" y="533" width="0.2366%" height="15" fill="rgb(234,159,37)"/><text x="72.2257%" y="543.50"></text></g><g><title>__sched_text_start (16 samples, 0.24%)</title><rect x="71.9757%" y="517" width="0.2366%" height="15" fill="rgb(216,204,22)"/><text x="72.2257%" y="527.50"></text></g><g><title>clear_page_erms (14 samples, 0.21%)</title><rect x="72.4638%" y="469" width="0.2070%" height="15" fill="rgb(214,17,3)"/><text x="72.7138%" y="479.50"></text></g><g><title>alloc_pages_vma (18 samples, 0.27%)</title><rect x="72.4342%" y="517" width="0.2662%" height="15" fill="rgb(212,111,17)"/><text x="72.6842%" y="527.50"></text></g><g><title>__alloc_pages_nodemask (18 samples, 0.27%)</title><rect x="72.4342%" y="501" width="0.2662%" height="15" fill="rgb(221,157,24)"/><text x="72.6842%" y="511.50"></text></g><g><title>get_page_from_freelist (16 samples, 0.24%)</title><rect x="72.4638%" y="485" width="0.2366%" height="15" fill="rgb(252,16,13)"/><text x="72.7138%" y="495.50"></text></g><g><title>do_user_addr_fault (58 samples, 0.86%)</title><rect x="71.9462%" y="581" width="0.8577%" height="15" fill="rgb(221,62,2)"/><text x="72.1962%" y="591.50"></text></g><g><title>handle_mm_fault (35 samples, 0.52%)</title><rect x="72.2863%" y="565" width="0.5176%" height="15" fill="rgb(247,87,22)"/><text x="72.5363%" y="575.50"></text></g><g><title>__handle_mm_fault (32 samples, 0.47%)</title><rect x="72.3307%" y="549" width="0.4732%" height="15" fill="rgb(215,73,9)"/><text x="72.5807%" y="559.50"></text></g><g><title>do_anonymous_page (26 samples, 0.38%)</title><rect x="72.4194%" y="533" width="0.3845%" height="15" fill="rgb(207,175,33)"/><text x="72.6694%" y="543.50"></text></g><g><title>page_fault (60 samples, 0.89%)</title><rect x="71.9314%" y="629" width="0.8873%" height="15" fill="rgb(243,129,54)"/><text x="72.1814%" y="639.50"></text></g><g><title>do_page_fault (59 samples, 0.87%)</title><rect x="71.9462%" y="613" width="0.8725%" height="15" fill="rgb(227,119,45)"/><text x="72.1962%" y="623.50"></text></g><g><title>__do_page_fault (59 samples, 0.87%)</title><rect x="71.9462%" y="597" width="0.8725%" height="15" fill="rgb(205,109,36)"/><text x="72.1962%" y="607.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.12%)</title><rect x="72.8187%" y="629" width="0.1183%" height="15" fill="rgb(205,6,39)"/><text x="73.0687%" y="639.50"></text></g><g><title>prepare_exit_to_usermode (8 samples, 0.12%)</title><rect x="72.8187%" y="613" width="0.1183%" height="15" fill="rgb(221,32,16)"/><text x="73.0687%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (78 samples, 1.15%)</title><rect x="71.7983%" y="677" width="1.1535%" height="15" fill="rgb(228,144,50)"/><text x="72.0483%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (78 samples, 1.15%)</title><rect x="71.7983%" y="661" width="1.1535%" height="15" fill="rgb(229,201,53)"/><text x="72.0483%" y="671.50"></text></g><g><title>core::ptr::write (75 samples, 1.11%)</title><rect x="71.8427%" y="645" width="1.1091%" height="15" fill="rgb(249,153,27)"/><text x="72.0927%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (244 samples, 3.61%)</title><rect x="71.3546%" y="821" width="3.6084%" height="15" fill="rgb(227,106,25)"/><text x="71.6046%" y="831.50">core..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (244 samples, 3.61%)</title><rect x="71.3546%" y="805" width="3.6084%" height="15" fill="rgb(230,65,29)"/><text x="71.6046%" y="815.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (244 samples, 3.61%)</title><rect x="71.3546%" y="789" width="3.6084%" height="15" fill="rgb(221,57,46)"/><text x="71.6046%" y="799.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (244 samples, 3.61%)</title><rect x="71.3546%" y="773" width="3.6084%" height="15" fill="rgb(229,161,17)"/><text x="71.6046%" y="783.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (244 samples, 3.61%)</title><rect x="71.3546%" y="757" width="3.6084%" height="15" fill="rgb(222,213,11)"/><text x="71.6046%" y="767.50">&lt;all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (239 samples, 3.53%)</title><rect x="71.4286%" y="741" width="3.5345%" height="15" fill="rgb(235,35,13)"/><text x="71.6786%" y="751.50">cor..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (239 samples, 3.53%)</title><rect x="71.4286%" y="725" width="3.5345%" height="15" fill="rgb(233,158,34)"/><text x="71.6786%" y="735.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (238 samples, 3.52%)</title><rect x="71.4434%" y="709" width="3.5197%" height="15" fill="rgb(215,151,48)"/><text x="71.6934%" y="719.50">cor..</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (214 samples, 3.16%)</title><rect x="71.7983%" y="693" width="3.1647%" height="15" fill="rgb(229,84,14)"/><text x="72.0483%" y="703.50">cor..</text></g><g><title>mass::stats::rolling_std::{{closure}} (136 samples, 2.01%)</title><rect x="72.9518%" y="677" width="2.0112%" height="15" fill="rgb(229,68,14)"/><text x="73.2018%" y="687.50">m..</text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (59 samples, 0.87%)</title><rect x="74.0905%" y="661" width="0.8725%" height="15" fill="rgb(243,106,26)"/><text x="74.3405%" y="671.50"></text></g><g><title>mass::stats::moving_std (250 samples, 3.70%)</title><rect x="71.3546%" y="853" width="3.6971%" height="15" fill="rgb(206,45,38)"/><text x="71.6046%" y="863.50">mass..</text></g><g><title>mass::stats::rolling_std (250 samples, 3.70%)</title><rect x="71.3546%" y="837" width="3.6971%" height="15" fill="rgb(226,6,15)"/><text x="71.6046%" y="847.50">mass..</text></g><g><title>mass::mass (3,511 samples, 51.92%)</title><rect x="23.1588%" y="869" width="51.9225%" height="15" fill="rgb(232,22,54)"/><text x="23.4088%" y="879.50">mass::mass</text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (3,592 samples, 53.12%)</title><rect x="22.2419%" y="917" width="53.1204%" height="15" fill="rgb(229,222,32)"/><text x="22.4919%" y="927.50">&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume</text></g><g><title>mass::mass_batch::{{closure}} (3,592 samples, 53.12%)</title><rect x="22.2419%" y="901" width="53.1204%" height="15" fill="rgb(228,62,29)"/><text x="22.4919%" y="911.50">mass::mass_batch::{{closure}}</text></g><g><title>mass::min_subsequence_distance (3,591 samples, 53.11%)</title><rect x="22.2567%" y="885" width="53.1056%" height="15" fill="rgb(251,103,34)"/><text x="22.5067%" y="895.50">mass::min_subsequence_distance</text></g><g><title>mass::math::argmin (19 samples, 0.28%)</title><rect x="75.0813%" y="869" width="0.2810%" height="15" fill="rgb(233,12,30)"/><text x="75.3313%" y="879.50"></text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (3,593 samples, 53.14%)</title><rect x="22.2419%" y="933" width="53.1352%" height="15" fill="rgb(238,52,0)"/><text x="22.4919%" y="943.50">&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::Unindexed..</text></g><g><title>core::ptr::drop_in_place (14 samples, 0.21%)</title><rect x="75.3919%" y="517" width="0.2070%" height="15" fill="rgb(223,98,5)"/><text x="75.6419%" y="527.50"></text></g><g><title>core::ptr::drop_in_place (14 samples, 0.21%)</title><rect x="75.3919%" y="501" width="0.2070%" height="15" fill="rgb(228,75,37)"/><text x="75.6419%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.21%)</title><rect x="75.3919%" y="485" width="0.2070%" height="15" fill="rgb(205,115,49)"/><text x="75.6419%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (14 samples, 0.21%)</title><rect x="75.3919%" y="469" width="0.2070%" height="15" fill="rgb(250,154,43)"/><text x="75.6419%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.21%)</title><rect x="75.3919%" y="453" width="0.2070%" height="15" fill="rgb(226,43,29)"/><text x="75.6419%" y="463.50"></text></g><g><title>_int_free (14 samples, 0.21%)</title><rect x="75.3919%" y="437" width="0.2070%" height="15" fill="rgb(249,228,39)"/><text x="75.6419%" y="447.50"></text></g><g><title>heap_trim (14 samples, 0.21%)</title><rect x="75.3919%" y="421" width="0.2070%" height="15" fill="rgb(216,79,43)"/><text x="75.6419%" y="431.50"></text></g><g><title>shrink_heap (14 samples, 0.21%)</title><rect x="75.3919%" y="405" width="0.2070%" height="15" fill="rgb(228,95,12)"/><text x="75.6419%" y="415.50"></text></g><g><title>__GI_madvise (14 samples, 0.21%)</title><rect x="75.3919%" y="389" width="0.2070%" height="15" fill="rgb(249,221,15)"/><text x="75.6419%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.21%)</title><rect x="75.3919%" y="373" width="0.2070%" height="15" fill="rgb(233,34,13)"/><text x="75.6419%" y="383.50"></text></g><g><title>do_syscall_64 (14 samples, 0.21%)</title><rect x="75.3919%" y="357" width="0.2070%" height="15" fill="rgb(214,103,39)"/><text x="75.6419%" y="367.50"></text></g><g><title>__x64_sys_madvise (14 samples, 0.21%)</title><rect x="75.3919%" y="341" width="0.2070%" height="15" fill="rgb(251,126,39)"/><text x="75.6419%" y="351.50"></text></g><g><title>__do_sys_madvise (14 samples, 0.21%)</title><rect x="75.3919%" y="325" width="0.2070%" height="15" fill="rgb(214,216,36)"/><text x="75.6419%" y="335.50"></text></g><g><title>zap_page_range (9 samples, 0.13%)</title><rect x="75.4658%" y="309" width="0.1331%" height="15" fill="rgb(220,221,8)"/><text x="75.7158%" y="319.50"></text></g><g><title>mass::math::dist (8 samples, 0.12%)</title><rect x="75.5989%" y="501" width="0.1183%" height="15" fill="rgb(240,216,3)"/><text x="75.8489%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (8 samples, 0.12%)</title><rect x="75.5989%" y="485" width="0.1183%" height="15" fill="rgb(232,218,17)"/><text x="75.8489%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (8 samples, 0.12%)</title><rect x="75.5989%" y="469" width="0.1183%" height="15" fill="rgb(229,163,45)"/><text x="75.8489%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.12%)</title><rect x="75.5989%" y="453" width="0.1183%" height="15" fill="rgb(231,110,42)"/><text x="75.8489%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (8 samples, 0.12%)</title><rect x="75.5989%" y="437" width="0.1183%" height="15" fill="rgb(208,170,48)"/><text x="75.8489%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (8 samples, 0.12%)</title><rect x="75.5989%" y="421" width="0.1183%" height="15" fill="rgb(239,116,25)"/><text x="75.8489%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 0.12%)</title><rect x="75.5989%" y="405" width="0.1183%" height="15" fill="rgb(219,200,50)"/><text x="75.8489%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.12%)</title><rect x="75.5989%" y="389" width="0.1183%" height="15" fill="rgb(245,200,0)"/><text x="75.8489%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (8 samples, 0.12%)</title><rect x="75.5989%" y="373" width="0.1183%" height="15" fill="rgb(245,119,33)"/><text x="75.8489%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 0.12%)</title><rect x="75.5989%" y="357" width="0.1183%" height="15" fill="rgb(231,125,12)"/><text x="75.8489%" y="367.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8 samples, 0.12%)</title><rect x="75.5989%" y="341" width="0.1183%" height="15" fill="rgb(216,96,41)"/><text x="75.8489%" y="351.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (8 samples, 0.12%)</title><rect x="75.5989%" y="325" width="0.1183%" height="15" fill="rgb(248,43,45)"/><text x="75.8489%" y="335.50"></text></g><g><title>mass::math::dist::{{closure}} (8 samples, 0.12%)</title><rect x="75.5989%" y="309" width="0.1183%" height="15" fill="rgb(217,222,7)"/><text x="75.8489%" y="319.50"></text></g><g><title>alloc_pages_vma (7 samples, 0.10%)</title><rect x="75.8208%" y="309" width="0.1035%" height="15" fill="rgb(233,28,6)"/><text x="76.0708%" y="319.50"></text></g><g><title>__alloc_pages_nodemask (7 samples, 0.10%)</title><rect x="75.8208%" y="293" width="0.1035%" height="15" fill="rgb(231,218,15)"/><text x="76.0708%" y="303.50"></text></g><g><title>get_page_from_freelist (7 samples, 0.10%)</title><rect x="75.8208%" y="277" width="0.1035%" height="15" fill="rgb(226,171,48)"/><text x="76.0708%" y="287.50"></text></g><g><title>clear_page_erms (7 samples, 0.10%)</title><rect x="75.8208%" y="261" width="0.1035%" height="15" fill="rgb(235,201,9)"/><text x="76.0708%" y="271.50"></text></g><g><title>do_anonymous_page (12 samples, 0.18%)</title><rect x="75.8208%" y="325" width="0.1775%" height="15" fill="rgb(217,80,15)"/><text x="76.0708%" y="335.50"></text></g><g><title>page_fault (16 samples, 0.24%)</title><rect x="75.7764%" y="421" width="0.2366%" height="15" fill="rgb(219,152,8)"/><text x="76.0264%" y="431.50"></text></g><g><title>do_page_fault (16 samples, 0.24%)</title><rect x="75.7764%" y="405" width="0.2366%" height="15" fill="rgb(243,107,38)"/><text x="76.0264%" y="415.50"></text></g><g><title>__do_page_fault (16 samples, 0.24%)</title><rect x="75.7764%" y="389" width="0.2366%" height="15" fill="rgb(231,17,5)"/><text x="76.0264%" y="399.50"></text></g><g><title>do_user_addr_fault (16 samples, 0.24%)</title><rect x="75.7764%" y="373" width="0.2366%" height="15" fill="rgb(209,25,54)"/><text x="76.0264%" y="383.50"></text></g><g><title>handle_mm_fault (14 samples, 0.21%)</title><rect x="75.8060%" y="357" width="0.2070%" height="15" fill="rgb(219,0,2)"/><text x="76.0560%" y="367.50"></text></g><g><title>__handle_mm_fault (14 samples, 0.21%)</title><rect x="75.8060%" y="341" width="0.2070%" height="15" fill="rgb(246,9,5)"/><text x="76.0560%" y="351.50"></text></g><g><title>alloc::vec::from_elem (27 samples, 0.40%)</title><rect x="75.7172%" y="485" width="0.3993%" height="15" fill="rgb(226,159,4)"/><text x="75.9672%" y="495.50"></text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (27 samples, 0.40%)</title><rect x="75.7172%" y="469" width="0.3993%" height="15" fill="rgb(219,175,34)"/><text x="75.9672%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_with (27 samples, 0.40%)</title><rect x="75.7172%" y="453" width="0.3993%" height="15" fill="rgb(236,10,46)"/><text x="75.9672%" y="463.50"></text></g><g><title>core::ptr::write (27 samples, 0.40%)</title><rect x="75.7172%" y="437" width="0.3993%" height="15" fill="rgb(240,211,16)"/><text x="75.9672%" y="447.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (7 samples, 0.10%)</title><rect x="76.0130%" y="421" width="0.1035%" height="15" fill="rgb(205,3,43)"/><text x="76.2630%" y="431.50"></text></g><g><title>prepare_exit_to_usermode (7 samples, 0.10%)</title><rect x="76.0130%" y="405" width="0.1035%" height="15" fill="rgb(245,7,22)"/><text x="76.2630%" y="415.50"></text></g><g><title>down_read (8 samples, 0.12%)</title><rect x="76.2940%" y="229" width="0.1183%" height="15" fill="rgb(239,132,32)"/><text x="76.5440%" y="239.50"></text></g><g><title>rwsem_down_read_slowpath (8 samples, 0.12%)</title><rect x="76.2940%" y="213" width="0.1183%" height="15" fill="rgb(228,202,34)"/><text x="76.5440%" y="223.50"></text></g><g><title>__handle_mm_fault (7 samples, 0.10%)</title><rect x="76.4419%" y="213" width="0.1035%" height="15" fill="rgb(254,200,22)"/><text x="76.6919%" y="223.50"></text></g><g><title>do_user_addr_fault (19 samples, 0.28%)</title><rect x="76.2940%" y="245" width="0.2810%" height="15" fill="rgb(219,10,39)"/><text x="76.5440%" y="255.50"></text></g><g><title>handle_mm_fault (10 samples, 0.15%)</title><rect x="76.4271%" y="229" width="0.1479%" height="15" fill="rgb(226,210,39)"/><text x="76.6771%" y="239.50"></text></g><g><title>page_fault (20 samples, 0.30%)</title><rect x="76.2940%" y="293" width="0.2958%" height="15" fill="rgb(208,219,16)"/><text x="76.5440%" y="303.50"></text></g><g><title>do_page_fault (20 samples, 0.30%)</title><rect x="76.2940%" y="277" width="0.2958%" height="15" fill="rgb(216,158,51)"/><text x="76.5440%" y="287.50"></text></g><g><title>__do_page_fault (20 samples, 0.30%)</title><rect x="76.2940%" y="261" width="0.2958%" height="15" fill="rgb(233,14,44)"/><text x="76.5440%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (40 samples, 0.59%)</title><rect x="76.1165%" y="437" width="0.5915%" height="15" fill="rgb(237,97,39)"/><text x="76.3665%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (40 samples, 0.59%)</title><rect x="76.1165%" y="421" width="0.5915%" height="15" fill="rgb(218,198,43)"/><text x="76.3665%" y="431.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (40 samples, 0.59%)</title><rect x="76.1165%" y="405" width="0.5915%" height="15" fill="rgb(231,104,20)"/><text x="76.3665%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (40 samples, 0.59%)</title><rect x="76.1165%" y="389" width="0.5915%" height="15" fill="rgb(254,36,13)"/><text x="76.3665%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (40 samples, 0.59%)</title><rect x="76.1165%" y="373" width="0.5915%" height="15" fill="rgb(248,14,50)"/><text x="76.3665%" y="383.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (33 samples, 0.49%)</title><rect x="76.2201%" y="357" width="0.4880%" height="15" fill="rgb(217,107,29)"/><text x="76.4701%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (33 samples, 0.49%)</title><rect x="76.2201%" y="341" width="0.4880%" height="15" fill="rgb(251,169,33)"/><text x="76.4701%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (33 samples, 0.49%)</title><rect x="76.2201%" y="325" width="0.4880%" height="15" fill="rgb(217,108,32)"/><text x="76.4701%" y="335.50"></text></g><g><title>core::ptr::write (31 samples, 0.46%)</title><rect x="76.2496%" y="309" width="0.4584%" height="15" fill="rgb(219,66,42)"/><text x="76.4996%" y="319.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (8 samples, 0.12%)</title><rect x="76.5898%" y="293" width="0.1183%" height="15" fill="rgb(206,180,7)"/><text x="76.8398%" y="303.50"></text></g><g><title>prepare_exit_to_usermode (8 samples, 0.12%)</title><rect x="76.5898%" y="277" width="0.1183%" height="15" fill="rgb(208,226,31)"/><text x="76.8398%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (44 samples, 0.65%)</title><rect x="76.1165%" y="485" width="0.6507%" height="15" fill="rgb(218,26,49)"/><text x="76.3665%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (44 samples, 0.65%)</title><rect x="76.1165%" y="469" width="0.6507%" height="15" fill="rgb(233,197,48)"/><text x="76.3665%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 0.65%)</title><rect x="76.1165%" y="453" width="0.6507%" height="15" fill="rgb(252,181,51)"/><text x="76.3665%" y="463.50"></text></g><g><title>__do_munmap (9 samples, 0.13%)</title><rect x="76.7820%" y="213" width="0.1331%" height="15" fill="rgb(253,90,19)"/><text x="77.0320%" y="223.50"></text></g><g><title>unmap_region (7 samples, 0.10%)</title><rect x="76.8116%" y="197" width="0.1035%" height="15" fill="rgb(215,171,30)"/><text x="77.0616%" y="207.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.19%)</title><rect x="76.7672%" y="485" width="0.1923%" height="15" fill="rgb(214,222,9)"/><text x="77.0172%" y="495.50"></text></g><g><title>core::ptr::drop_in_place (13 samples, 0.19%)</title><rect x="76.7672%" y="469" width="0.1923%" height="15" fill="rgb(223,3,22)"/><text x="77.0172%" y="479.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.18%)</title><rect x="76.7820%" y="453" width="0.1775%" height="15" fill="rgb(225,196,46)"/><text x="77.0320%" y="463.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.18%)</title><rect x="76.7820%" y="437" width="0.1775%" height="15" fill="rgb(209,110,37)"/><text x="77.0320%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.18%)</title><rect x="76.7820%" y="421" width="0.1775%" height="15" fill="rgb(249,89,12)"/><text x="77.0320%" y="431.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (12 samples, 0.18%)</title><rect x="76.7820%" y="405" width="0.1775%" height="15" fill="rgb(226,27,33)"/><text x="77.0320%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (12 samples, 0.18%)</title><rect x="76.7820%" y="389" width="0.1775%" height="15" fill="rgb(213,82,22)"/><text x="77.0320%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.18%)</title><rect x="76.7820%" y="373" width="0.1775%" height="15" fill="rgb(248,140,0)"/><text x="77.0320%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.18%)</title><rect x="76.7820%" y="357" width="0.1775%" height="15" fill="rgb(228,106,3)"/><text x="77.0320%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (12 samples, 0.18%)</title><rect x="76.7820%" y="341" width="0.1775%" height="15" fill="rgb(209,23,37)"/><text x="77.0320%" y="351.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (12 samples, 0.18%)</title><rect x="76.7820%" y="325" width="0.1775%" height="15" fill="rgb(241,93,50)"/><text x="77.0320%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (12 samples, 0.18%)</title><rect x="76.7820%" y="309" width="0.1775%" height="15" fill="rgb(253,46,43)"/><text x="77.0320%" y="319.50"></text></g><g><title>__GI_munmap (12 samples, 0.18%)</title><rect x="76.7820%" y="293" width="0.1775%" height="15" fill="rgb(226,206,43)"/><text x="77.0320%" y="303.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (12 samples, 0.18%)</title><rect x="76.7820%" y="277" width="0.1775%" height="15" fill="rgb(217,54,7)"/><text x="77.0320%" y="287.50"></text></g><g><title>do_syscall_64 (12 samples, 0.18%)</title><rect x="76.7820%" y="261" width="0.1775%" height="15" fill="rgb(223,5,52)"/><text x="77.0320%" y="271.50"></text></g><g><title>__x64_sys_munmap (12 samples, 0.18%)</title><rect x="76.7820%" y="245" width="0.1775%" height="15" fill="rgb(206,52,46)"/><text x="77.0320%" y="255.50"></text></g><g><title>__vm_munmap (12 samples, 0.18%)</title><rect x="76.7820%" y="229" width="0.1775%" height="15" fill="rgb(253,136,11)"/><text x="77.0320%" y="239.50"></text></g><g><title>mass::math::fft_mult (90 samples, 1.33%)</title><rect x="75.7172%" y="501" width="1.3310%" height="15" fill="rgb(208,106,33)"/><text x="75.9672%" y="511.50"></text></g><g><title>mass::mass (99 samples, 1.46%)</title><rect x="75.5989%" y="517" width="1.4641%" height="15" fill="rgb(206,54,4)"/><text x="75.8489%" y="527.50"></text></g><g><title>std::panic::catch_unwind (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1301" width="54.8654%" height="15" fill="rgb(213,3,15)"/><text x="22.4772%" y="1311.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1285" width="54.8654%" height="15" fill="rgb(252,211,39)"/><text x="22.4772%" y="1295.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1269" width="54.8654%" height="15" fill="rgb(223,6,36)"/><text x="22.4772%" y="1279.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1253" width="54.8654%" height="15" fill="rgb(252,169,45)"/><text x="22.4772%" y="1263.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}} (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1237" width="54.8654%" height="15" fill="rgb(212,48,26)"/><text x="22.4772%" y="1247.50">std::thread::Builder::spawn_unchecked::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1221" width="54.8654%" height="15" fill="rgb(251,102,48)"/><text x="22.4772%" y="1231.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closure}} (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1205" width="54.8654%" height="15" fill="rgb(243,208,16)"/><text x="22.4772%" y="1215.50">&lt;rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn&gt;::spawn::{{closur..</text></g><g><title>rayon_core::registry::ThreadBuilder::run (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1189" width="54.8654%" height="15" fill="rgb(219,96,24)"/><text x="22.4772%" y="1199.50">rayon_core::registry::ThreadBuilder::run</text></g><g><title>rayon_core::registry::main_loop (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1173" width="54.8654%" height="15" fill="rgb(219,33,29)"/><text x="22.4772%" y="1183.50">rayon_core::registry::main_loop</text></g><g><title>rayon_core::registry::WorkerThread::wait_until (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1157" width="54.8654%" height="15" fill="rgb(223,176,5)"/><text x="22.4772%" y="1167.50">rayon_core::registry::WorkerThread::wait_until</text></g><g><title>rayon_core::registry::WorkerThread::wait_until_cold (3,710 samples, 54.87%)</title><rect x="22.2272%" y="1141" width="54.8654%" height="15" fill="rgb(228,140,14)"/><text x="22.4772%" y="1151.50">rayon_core::registry::WorkerThread::wait_until_cold</text></g><g><title>rayon_core::registry::WorkerThread::execute (3,709 samples, 54.85%)</title><rect x="22.2419%" y="1125" width="54.8506%" height="15" fill="rgb(217,179,31)"/><text x="22.4919%" y="1135.50">rayon_core::registry::WorkerThread::execute</text></g><g><title>rayon_core::job::JobRef::execute (3,709 samples, 54.85%)</title><rect x="22.2419%" y="1109" width="54.8506%" height="15" fill="rgb(230,9,30)"/><text x="22.4919%" y="1119.50">rayon_core::job::JobRef::execute</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute (3,709 samples, 54.85%)</title><rect x="22.2419%" y="1093" width="54.8506%" height="15" fill="rgb(230,136,20)"/><text x="22.4919%" y="1103.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute</text></g><g><title>rayon_core::unwind::halt_unwinding (3,709 samples, 54.85%)</title><rect x="22.2419%" y="1077" width="54.8506%" height="15" fill="rgb(215,210,22)"/><text x="22.4919%" y="1087.50">rayon_core::unwind::halt_unwinding</text></g><g><title>std::panic::catch_unwind (3,709 samples, 54.85%)</title><rect x="22.2419%" y="1061" width="54.8506%" height="15" fill="rgb(218,43,5)"/><text x="22.4919%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (3,709 samples, 54.85%)</title><rect x="22.2419%" y="1045" width="54.8506%" height="15" fill="rgb(216,11,5)"/><text x="22.4919%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (3,709 samples, 54.85%)</title><rect x="22.2419%" y="1029" width="54.8506%" height="15" fill="rgb(209,82,29)"/><text x="22.4919%" y="1039.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (3,709 samples, 54.85%)</title><rect x="22.2419%" y="1013" width="54.8506%" height="15" fill="rgb(244,115,12)"/><text x="22.4919%" y="1023.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}} (3,709 samples, 54.85%)</title><rect x="22.2419%" y="997" width="54.8506%" height="15" fill="rgb(222,82,18)"/><text x="22.4919%" y="1007.50">&lt;rayon_core::job::StackJob&lt;L,F,R&gt; as rayon_core::job::Job&gt;::execute::call::{{closure}}</text></g><g><title>rayon_core::join::join_context::call_b::{{closure}} (3,709 samples, 54.85%)</title><rect x="22.2419%" y="981" width="54.8506%" height="15" fill="rgb(249,227,8)"/><text x="22.4919%" y="991.50">rayon_core::join::join_context::call_b::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (3,709 samples, 54.85%)</title><rect x="22.2419%" y="965" width="54.8506%" height="15" fill="rgb(253,141,45)"/><text x="22.4919%" y="975.50">rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}}</text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (3,709 samples, 54.85%)</title><rect x="22.2419%" y="949" width="54.8506%" height="15" fill="rgb(234,184,4)"/><text x="22.4919%" y="959.50">rayon::iter::plumbing::bridge_unindexed_producer_consumer</text></g><g><title>rayon_core::join::join_context (116 samples, 1.72%)</title><rect x="75.3771%" y="933" width="1.7155%" height="15" fill="rgb(218,194,23)"/><text x="75.6271%" y="943.50"></text></g><g><title>rayon_core::registry::in_worker (116 samples, 1.72%)</title><rect x="75.3771%" y="917" width="1.7155%" height="15" fill="rgb(235,66,41)"/><text x="75.6271%" y="927.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (116 samples, 1.72%)</title><rect x="75.3771%" y="901" width="1.7155%" height="15" fill="rgb(245,217,1)"/><text x="75.6271%" y="911.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (116 samples, 1.72%)</title><rect x="75.3771%" y="885" width="1.7155%" height="15" fill="rgb(229,91,1)"/><text x="75.6271%" y="895.50"></text></g><g><title>std::panic::catch_unwind (116 samples, 1.72%)</title><rect x="75.3771%" y="869" width="1.7155%" height="15" fill="rgb(207,101,30)"/><text x="75.6271%" y="879.50"></text></g><g><title>std::panicking::try (116 samples, 1.72%)</title><rect x="75.3771%" y="853" width="1.7155%" height="15" fill="rgb(223,82,49)"/><text x="75.6271%" y="863.50"></text></g><g><title>std::panicking::try::do_call (116 samples, 1.72%)</title><rect x="75.3771%" y="837" width="1.7155%" height="15" fill="rgb(218,167,17)"/><text x="75.6271%" y="847.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (116 samples, 1.72%)</title><rect x="75.3771%" y="821" width="1.7155%" height="15" fill="rgb(208,103,14)"/><text x="75.6271%" y="831.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (116 samples, 1.72%)</title><rect x="75.3771%" y="805" width="1.7155%" height="15" fill="rgb(238,20,8)"/><text x="75.6271%" y="815.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (116 samples, 1.72%)</title><rect x="75.3771%" y="789" width="1.7155%" height="15" fill="rgb(218,80,54)"/><text x="75.6271%" y="799.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (116 samples, 1.72%)</title><rect x="75.3771%" y="773" width="1.7155%" height="15" fill="rgb(240,144,17)"/><text x="75.6271%" y="783.50"></text></g><g><title>rayon_core::join::join_context (116 samples, 1.72%)</title><rect x="75.3771%" y="757" width="1.7155%" height="15" fill="rgb(245,27,50)"/><text x="75.6271%" y="767.50"></text></g><g><title>rayon_core::registry::in_worker (116 samples, 1.72%)</title><rect x="75.3771%" y="741" width="1.7155%" height="15" fill="rgb(251,51,7)"/><text x="75.6271%" y="751.50"></text></g><g><title>rayon_core::join::join_context::{{closure}} (116 samples, 1.72%)</title><rect x="75.3771%" y="725" width="1.7155%" height="15" fill="rgb(245,217,29)"/><text x="75.6271%" y="735.50"></text></g><g><title>rayon_core::unwind::halt_unwinding (116 samples, 1.72%)</title><rect x="75.3771%" y="709" width="1.7155%" height="15" fill="rgb(221,176,29)"/><text x="75.6271%" y="719.50"></text></g><g><title>std::panic::catch_unwind (116 samples, 1.72%)</title><rect x="75.3771%" y="693" width="1.7155%" height="15" fill="rgb(212,180,24)"/><text x="75.6271%" y="703.50"></text></g><g><title>std::panicking::try (116 samples, 1.72%)</title><rect x="75.3771%" y="677" width="1.7155%" height="15" fill="rgb(254,24,2)"/><text x="75.6271%" y="687.50"></text></g><g><title>std::panicking::try::do_call (116 samples, 1.72%)</title><rect x="75.3771%" y="661" width="1.7155%" height="15" fill="rgb(230,100,2)"/><text x="75.6271%" y="671.50"></text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (116 samples, 1.72%)</title><rect x="75.3771%" y="645" width="1.7155%" height="15" fill="rgb(219,142,25)"/><text x="75.6271%" y="655.50"></text></g><g><title>rayon_core::join::join_context::call_a::{{closure}} (116 samples, 1.72%)</title><rect x="75.3771%" y="629" width="1.7155%" height="15" fill="rgb(240,73,43)"/><text x="75.6271%" y="639.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer::{{closure}} (116 samples, 1.72%)</title><rect x="75.3771%" y="613" width="1.7155%" height="15" fill="rgb(214,114,15)"/><text x="75.6271%" y="623.50"></text></g><g><title>rayon::iter::plumbing::bridge_unindexed_producer_consumer (116 samples, 1.72%)</title><rect x="75.3771%" y="597" width="1.7155%" height="15" fill="rgb(207,130,4)"/><text x="75.6271%" y="607.50"></text></g><g><title>&lt;rayon::iter::par_bridge::IterParallelProducer&lt;Iter&gt; as rayon::iter::plumbing::UnindexedProducer&gt;::fold_with (116 samples, 1.72%)</title><rect x="75.3771%" y="581" width="1.7155%" height="15" fill="rgb(221,25,40)"/><text x="75.6271%" y="591.50"></text></g><g><title>&lt;rayon::iter::map::MapFolder&lt;C,F&gt; as rayon::iter::plumbing::Folder&lt;T&gt;&gt;::consume (116 samples, 1.72%)</title><rect x="75.3771%" y="565" width="1.7155%" height="15" fill="rgb(241,184,7)"/><text x="75.6271%" y="575.50"></text></g><g><title>mass::mass_batch::{{closure}} (116 samples, 1.72%)</title><rect x="75.3771%" y="549" width="1.7155%" height="15" fill="rgb(235,159,4)"/><text x="75.6271%" y="559.50"></text></g><g><title>mass::min_subsequence_distance (115 samples, 1.70%)</title><rect x="75.3919%" y="533" width="1.7007%" height="15" fill="rgb(214,87,48)"/><text x="75.6419%" y="543.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (3,711 samples, 54.88%)</title><rect x="22.2272%" y="1365" width="54.8802%" height="15" fill="rgb(246,198,24)"/><text x="22.4772%" y="1375.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once (3,711 samples, 54.88%)</title><rect x="22.2272%" y="1349" width="54.8802%" height="15" fill="rgb(209,66,40)"/><text x="22.4772%" y="1359.50">&lt;alloc::boxed::Box&lt;F&gt; as core::ops::function::FnOnce&lt;A&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable-shim}} (3,711 samples, 54.88%)</title><rect x="22.2272%" y="1333" width="54.8802%" height="15" fill="rgb(233,147,39)"/><text x="22.4772%" y="1343.50">core::ops::function::FnOnce::call_once{{vtable-shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::{{closure}} (3,711 samples, 54.88%)</title><rect x="22.2272%" y="1317" width="54.8802%" height="15" fill="rgb(231,145,52)"/><text x="22.4772%" y="1327.50">std::thread::Builder::spawn_unchecked::{{closure}}</text></g><g><title>__GI___clone (3,757 samples, 55.56%)</title><rect x="21.6208%" y="1413" width="55.5605%" height="15" fill="rgb(206,20,26)"/><text x="21.8708%" y="1423.50">__GI___clone</text></g><g><title>start_thread (3,716 samples, 54.95%)</title><rect x="22.2272%" y="1397" width="54.9542%" height="15" fill="rgb(238,220,4)"/><text x="22.4772%" y="1407.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (3,716 samples, 54.95%)</title><rect x="22.2272%" y="1381" width="54.9542%" height="15" fill="rgb(252,195,42)"/><text x="22.4772%" y="1391.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.15%)</title><rect x="79.8580%" y="965" width="0.1479%" height="15" fill="rgb(209,10,6)"/><text x="80.1080%" y="975.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (48 samples, 0.71%)</title><rect x="79.4587%" y="1013" width="0.7098%" height="15" fill="rgb(229,3,52)"/><text x="79.7087%" y="1023.50"></text></g><g><title>core::slice::ascii::is_ascii (48 samples, 0.71%)</title><rect x="79.4587%" y="997" width="0.7098%" height="15" fill="rgb(253,49,37)"/><text x="79.7087%" y="1007.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (42 samples, 0.62%)</title><rect x="79.5475%" y="981" width="0.6211%" height="15" fill="rgb(240,103,49)"/><text x="79.7975%" y="991.50"></text></g><g><title>core::slice::ascii::is_ascii::{{closure}} (11 samples, 0.16%)</title><rect x="80.0059%" y="965" width="0.1627%" height="15" fill="rgb(250,182,30)"/><text x="80.2559%" y="975.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii (11 samples, 0.16%)</title><rect x="80.0059%" y="949" width="0.1627%" height="15" fill="rgb(248,8,30)"/><text x="80.2559%" y="959.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (66 samples, 0.98%)</title><rect x="79.3404%" y="1029" width="0.9760%" height="15" fill="rgb(237,120,30)"/><text x="79.5904%" y="1039.50"></text></g><g><title>csv::byte_record::Bounds::end (10 samples, 0.15%)</title><rect x="80.1686%" y="1013" width="0.1479%" height="15" fill="rgb(221,146,34)"/><text x="80.4186%" y="1023.50"></text></g><g><title>csv::Trim::should_trim_fields (7 samples, 0.10%)</title><rect x="80.7010%" y="1013" width="0.1035%" height="15" fill="rgb(242,55,13)"/><text x="80.9510%" y="1023.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (9 samples, 0.13%)</title><rect x="81.5439%" y="997" width="0.1331%" height="15" fill="rgb(242,112,31)"/><text x="81.7939%" y="1007.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (9 samples, 0.13%)</title><rect x="81.5439%" y="981" width="0.1331%" height="15" fill="rgb(249,192,27)"/><text x="81.7939%" y="991.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (9 samples, 0.13%)</title><rect x="81.5439%" y="965" width="0.1331%" height="15" fill="rgb(208,204,44)"/><text x="81.7939%" y="975.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (13 samples, 0.19%)</title><rect x="81.6770%" y="997" width="0.1923%" height="15" fill="rgb(208,93,54)"/><text x="81.9270%" y="1007.50"></text></g><g><title>&lt;tar::entry::Entry&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.12%)</title><rect x="81.9580%" y="981" width="0.1183%" height="15" fill="rgb(242,1,31)"/><text x="82.2080%" y="991.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read (8 samples, 0.12%)</title><rect x="81.9580%" y="965" width="0.1183%" height="15" fill="rgb(241,83,25)"/><text x="82.2080%" y="975.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 0.12%)</title><rect x="81.9580%" y="949" width="0.1183%" height="15" fill="rgb(205,169,50)"/><text x="82.2080%" y="959.50"></text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read::{{closure}} (8 samples, 0.12%)</title><rect x="81.9580%" y="933" width="0.1183%" height="15" fill="rgb(239,186,37)"/><text x="82.2080%" y="943.50"></text></g><g><title>&lt;tar::entry::EntryIo as std::io::Read&gt;::read (8 samples, 0.12%)</title><rect x="81.9580%" y="917" width="0.1183%" height="15" fill="rgb(205,221,10)"/><text x="82.2080%" y="927.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (8 samples, 0.12%)</title><rect x="81.9580%" y="901" width="0.1183%" height="15" fill="rgb(218,196,15)"/><text x="82.2080%" y="911.50"></text></g><g><title>&lt;&amp;tar::archive::ArchiveInner&lt;R&gt; as std::io::Read&gt;::read (8 samples, 0.12%)</title><rect x="81.9580%" y="885" width="0.1183%" height="15" fill="rgb(218,196,35)"/><text x="82.2080%" y="895.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.10%)</title><rect x="81.9728%" y="869" width="0.1035%" height="15" fill="rgb(233,63,24)"/><text x="82.2228%" y="879.50"></text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (7 samples, 0.10%)</title><rect x="81.9728%" y="853" width="0.1035%" height="15" fill="rgb(225,8,4)"/><text x="82.2228%" y="863.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (19 samples, 0.28%)</title><rect x="81.8693%" y="997" width="0.2810%" height="15" fill="rgb(234,105,35)"/><text x="82.1193%" y="1007.50"></text></g><g><title>csv::byte_record::ByteRecord::set_len (11 samples, 0.16%)</title><rect x="82.1650%" y="997" width="0.1627%" height="15" fill="rgb(236,21,32)"/><text x="82.4150%" y="1007.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (10 samples, 0.15%)</title><rect x="82.3277%" y="997" width="0.1479%" height="15" fill="rgb(228,109,6)"/><text x="82.5777%" y="1007.50"></text></g><g><title>csv::byte_record::ByteRecord::len (8 samples, 0.12%)</title><rect x="82.6678%" y="981" width="0.1183%" height="15" fill="rgb(229,215,31)"/><text x="82.9178%" y="991.50"></text></g><g><title>csv::reader::ReaderState::add_record (22 samples, 0.33%)</title><rect x="82.5348%" y="997" width="0.3253%" height="15" fill="rgb(221,52,54)"/><text x="82.7848%" y="1007.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialEq&gt;::eq (12 samples, 0.18%)</title><rect x="84.8418%" y="965" width="0.1775%" height="15" fill="rgb(252,129,43)"/><text x="85.0918%" y="975.50"></text></g><g><title>csv_core::reader::Dfa::get_output (42 samples, 0.62%)</title><rect x="85.0636%" y="965" width="0.6211%" height="15" fill="rgb(248,183,27)"/><text x="85.3136%" y="975.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (595 samples, 8.80%)</title><rect x="78.6897%" y="1061" width="8.7992%" height="15" fill="rgb(250,0,22)"/><text x="78.9397%" y="1071.50">csv::reader:..</text></g><g><title>csv::string_record::StringRecord::read (576 samples, 8.52%)</title><rect x="78.9707%" y="1045" width="8.5182%" height="15" fill="rgb(213,166,10)"/><text x="79.2207%" y="1055.50">csv::string_..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (485 samples, 7.17%)</title><rect x="80.3165%" y="1029" width="7.1724%" height="15" fill="rgb(207,163,36)"/><text x="80.5665%" y="1039.50">csv::reade..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (452 samples, 6.68%)</title><rect x="80.8045%" y="1013" width="6.6844%" height="15" fill="rgb(208,122,22)"/><text x="81.0545%" y="1023.50">csv::read..</text></g><g><title>csv_core::reader::Reader::read_record (313 samples, 4.63%)</title><rect x="82.8601%" y="997" width="4.6288%" height="15" fill="rgb(207,104,49)"/><text x="83.1101%" y="1007.50">csv_c..</text></g><g><title>csv_core::reader::Reader::read_record_dfa (276 samples, 4.08%)</title><rect x="83.4073%" y="981" width="4.0816%" height="15" fill="rgb(248,211,50)"/><text x="83.6573%" y="991.50">csv_..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (118 samples, 1.75%)</title><rect x="85.7439%" y="965" width="1.7450%" height="15" fill="rgb(217,13,45)"/><text x="85.9939%" y="975.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (14 samples, 0.21%)</title><rect x="88.0657%" y="1029" width="0.2070%" height="15" fill="rgb(211,216,49)"/><text x="88.3157%" y="1039.50"></text></g><g><title>csv::string_record::StringRecord::iter (12 samples, 0.18%)</title><rect x="88.2727%" y="1029" width="0.1775%" height="15" fill="rgb(221,58,53)"/><text x="88.5227%" y="1039.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.18%)</title><rect x="88.2727%" y="1013" width="0.1775%" height="15" fill="rgb(220,112,41)"/><text x="88.5227%" y="1023.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (12 samples, 0.18%)</title><rect x="88.2727%" y="997" width="0.1775%" height="15" fill="rgb(236,38,28)"/><text x="88.5227%" y="1007.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (12 samples, 0.18%)</title><rect x="88.2727%" y="981" width="0.1775%" height="15" fill="rgb(227,195,22)"/><text x="88.5227%" y="991.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (12 samples, 0.18%)</title><rect x="88.2727%" y="965" width="0.1775%" height="15" fill="rgb(214,55,33)"/><text x="88.5227%" y="975.50"></text></g><g><title>csv::byte_record::Bounds::end (11 samples, 0.16%)</title><rect x="88.2875%" y="949" width="0.1627%" height="15" fill="rgb(248,80,13)"/><text x="88.5375%" y="959.50"></text></g><g><title>csv::byte_record::Bounds::ends (7 samples, 0.10%)</title><rect x="88.3466%" y="933" width="0.1035%" height="15" fill="rgb(238,52,6)"/><text x="88.5966%" y="943.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.10%)</title><rect x="88.3466%" y="917" width="0.1035%" height="15" fill="rgb(224,198,47)"/><text x="88.5966%" y="927.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.10%)</title><rect x="88.3466%" y="901" width="0.1035%" height="15" fill="rgb(233,171,20)"/><text x="88.5966%" y="911.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (7 samples, 0.10%)</title><rect x="89.2487%" y="869" width="0.1035%" height="15" fill="rgb(241,30,25)"/><text x="89.4987%" y="879.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (51 samples, 0.75%)</title><rect x="88.6720%" y="949" width="0.7542%" height="15" fill="rgb(207,171,38)"/><text x="88.9220%" y="959.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (51 samples, 0.75%)</title><rect x="88.6720%" y="933" width="0.7542%" height="15" fill="rgb(234,70,1)"/><text x="88.9220%" y="943.50"></text></g><g><title>&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (46 samples, 0.68%)</title><rect x="88.7459%" y="917" width="0.6803%" height="15" fill="rgb(232,178,18)"/><text x="88.9959%" y="927.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.59%)</title><rect x="88.8347%" y="901" width="0.5915%" height="15" fill="rgb(241,78,40)"/><text x="89.0847%" y="911.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 0.59%)</title><rect x="88.8347%" y="885" width="0.5915%" height="15" fill="rgb(222,35,25)"/><text x="89.0847%" y="895.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (9 samples, 0.13%)</title><rect x="91.7036%" y="869" width="0.1331%" height="15" fill="rgb(207,92,16)"/><text x="91.9536%" y="879.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (35 samples, 0.52%)</title><rect x="91.9255%" y="869" width="0.5176%" height="15" fill="rgb(216,59,51)"/><text x="92.1755%" y="879.50"></text></g><g><title>core::num::dec2flt::num::from_str_unchecked (42 samples, 0.62%)</title><rect x="92.5318%" y="869" width="0.6211%" height="15" fill="rgb(213,80,28)"/><text x="92.7818%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.24%)</title><rect x="92.9163%" y="853" width="0.2366%" height="15" fill="rgb(220,93,7)"/><text x="93.1663%" y="863.50"></text></g><g><title>core::num::dec2flt::algorithm::fast_path (130 samples, 1.92%)</title><rect x="91.3339%" y="885" width="1.9225%" height="15" fill="rgb(225,24,44)"/><text x="91.5839%" y="895.50">c..</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (7 samples, 0.10%)</title><rect x="93.1529%" y="869" width="0.1035%" height="15" fill="rgb(243,74,40)"/><text x="93.4029%" y="879.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (7 samples, 0.10%)</title><rect x="93.1529%" y="853" width="0.1035%" height="15" fill="rgb(228,39,7)"/><text x="93.4029%" y="863.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (7 samples, 0.10%)</title><rect x="93.1529%" y="837" width="0.1035%" height="15" fill="rgb(227,79,8)"/><text x="93.4029%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (16 samples, 0.24%)</title><rect x="93.6705%" y="821" width="0.2366%" height="15" fill="rgb(236,58,11)"/><text x="93.9205%" y="831.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (16 samples, 0.24%)</title><rect x="93.6705%" y="805" width="0.2366%" height="15" fill="rgb(249,63,35)"/><text x="93.9205%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::double_ended::DoubleEndedIterator&gt;::next_back (10 samples, 0.15%)</title><rect x="93.7592%" y="789" width="0.1479%" height="15" fill="rgb(252,114,16)"/><text x="94.0092%" y="799.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (9 samples, 0.13%)</title><rect x="93.9367%" y="789" width="0.1331%" height="15" fill="rgb(254,151,24)"/><text x="94.1867%" y="799.50"></text></g><g><title>core::ops::function::FnMut::call_mut (9 samples, 0.13%)</title><rect x="93.9367%" y="773" width="0.1331%" height="15" fill="rgb(253,54,39)"/><text x="94.1867%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count::add1 (9 samples, 0.13%)</title><rect x="93.9367%" y="757" width="0.1331%" height="15" fill="rgb(243,25,45)"/><text x="94.1867%" y="767.50"></text></g><g><title>&lt;usize as core::ops::arith::Add&gt;::add (9 samples, 0.13%)</title><rect x="93.9367%" y="741" width="0.1331%" height="15" fill="rgb(234,134,9)"/><text x="94.1867%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (44 samples, 0.65%)</title><rect x="93.9071%" y="805" width="0.6507%" height="15" fill="rgb(227,166,31)"/><text x="94.1571%" y="815.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (33 samples, 0.49%)</title><rect x="94.0698%" y="789" width="0.4880%" height="15" fill="rgb(245,143,41)"/><text x="94.3198%" y="799.50"></text></g><g><title>core::num::dec2flt::simplify::{{closure}} (33 samples, 0.49%)</title><rect x="94.0698%" y="773" width="0.4880%" height="15" fill="rgb(238,181,32)"/><text x="94.3198%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (75 samples, 1.11%)</title><rect x="93.6705%" y="869" width="1.1091%" height="15" fill="rgb(224,113,18)"/><text x="93.9205%" y="879.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (75 samples, 1.11%)</title><rect x="93.6705%" y="853" width="1.1091%" height="15" fill="rgb(240,229,28)"/><text x="93.9205%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (75 samples, 1.11%)</title><rect x="93.6705%" y="837" width="1.1091%" height="15" fill="rgb(250,185,3)"/><text x="93.9205%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (59 samples, 0.87%)</title><rect x="93.9071%" y="821" width="0.8725%" height="15" fill="rgb(212,59,25)"/><text x="94.1571%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 0.22%)</title><rect x="94.5578%" y="805" width="0.2218%" height="15" fill="rgb(221,87,20)"/><text x="94.8078%" y="815.50"></text></g><g><title>core::num::dec2flt::simplify (120 samples, 1.77%)</title><rect x="93.2564%" y="885" width="1.7746%" height="15" fill="rgb(213,74,28)"/><text x="93.5064%" y="895.50">c..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (17 samples, 0.25%)</title><rect x="94.7797%" y="869" width="0.2514%" height="15" fill="rgb(224,132,34)"/><text x="95.0297%" y="879.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (17 samples, 0.25%)</title><rect x="94.7797%" y="853" width="0.2514%" height="15" fill="rgb(222,101,24)"/><text x="95.0297%" y="863.50"></text></g><g><title>core::num::dec2flt::convert (268 samples, 3.96%)</title><rect x="91.2600%" y="901" width="3.9633%" height="15" fill="rgb(254,142,4)"/><text x="91.5100%" y="911.50">core..</text></g><g><title>core::num::dec2flt::trivial_cases (13 samples, 0.19%)</title><rect x="95.0311%" y="885" width="0.1923%" height="15" fill="rgb(230,229,49)"/><text x="95.2811%" y="895.50"></text></g><g><title>core::num::dec2flt::extract_sign (18 samples, 0.27%)</title><rect x="95.2233%" y="901" width="0.2662%" height="15" fill="rgb(238,70,47)"/><text x="95.4733%" y="911.50"></text></g><g><title>core::num::dec2flt::parse::parse_decimal (63 samples, 0.93%)</title><rect x="95.4895%" y="901" width="0.9317%" height="15" fill="rgb(231,160,17)"/><text x="95.7395%" y="911.50"></text></g><g><title>core::num::dec2flt::parse::eat_digits (37 samples, 0.55%)</title><rect x="95.8740%" y="885" width="0.5472%" height="15" fill="rgb(218,68,53)"/><text x="96.1240%" y="895.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,293 samples, 19.12%)</title><rect x="77.3588%" y="1077" width="19.1216%" height="15" fill="rgb(236,111,10)"/><text x="77.6088%" y="1087.50">&lt;csv::reader::DeserializeRecor..</text></g><g><title>csv::string_record::StringRecord::deserialize (608 samples, 8.99%)</title><rect x="87.4889%" y="1061" width="8.9914%" height="15" fill="rgb(224,34,41)"/><text x="87.7389%" y="1071.50">csv::string_r..</text></g><g><title>csv::deserializer::deserialize_string_record (602 samples, 8.90%)</title><rect x="87.5776%" y="1045" width="8.9027%" height="15" fill="rgb(241,118,19)"/><text x="87.8276%" y="1055.50">csv::deserial..</text></g><g><title>mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize (543 samples, 8.03%)</title><rect x="88.4502%" y="1029" width="8.0302%" height="15" fill="rgb(238,129,25)"/><text x="88.7002%" y="1039.50">mass::time_..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (543 samples, 8.03%)</title><rect x="88.4502%" y="1013" width="8.0302%" height="15" fill="rgb(238,22,31)"/><text x="88.7002%" y="1023.50">&lt;&amp;mut csv::..</text></g><g><title>&lt;mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize::__Visitor&lt;T&gt; as serde::de::Visitor&gt;::visit_newtype_struct (540 samples, 7.99%)</title><rect x="88.4945%" y="997" width="7.9858%" height="15" fill="rgb(222,174,48)"/><text x="88.7445%" y="1007.50">&lt;mass::time..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (534 samples, 7.90%)</title><rect x="88.5833%" y="981" width="7.8971%" height="15" fill="rgb(206,152,40)"/><text x="88.8333%" y="991.50">serde::de::..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (534 samples, 7.90%)</title><rect x="88.5833%" y="965" width="7.8971%" height="15" fill="rgb(218,99,54)"/><text x="88.8333%" y="975.50">&lt;&amp;mut csv::..</text></g><g><title>core::str::&lt;impl str&gt;::parse (471 samples, 6.97%)</title><rect x="89.5149%" y="949" width="6.9654%" height="15" fill="rgb(220,174,26)"/><text x="89.7649%" y="959.50">core::str..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::FromStr for f64&gt;::from_str (471 samples, 6.97%)</title><rect x="89.5149%" y="933" width="6.9654%" height="15" fill="rgb(245,116,9)"/><text x="89.7649%" y="943.50">core::num..</text></g><g><title>core::num::dec2flt::dec2flt (471 samples, 6.97%)</title><rect x="89.5149%" y="917" width="6.9654%" height="15" fill="rgb(209,72,35)"/><text x="89.7649%" y="927.50">core::num..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,315 samples, 19.45%)</title><rect x="77.2848%" y="1093" width="19.4469%" height="15" fill="rgb(226,126,21)"/><text x="77.5348%" y="1103.50">&lt;core::iter::adapters::Map&lt;I,F..</text></g><g><title>core::option::Option&lt;T&gt;::map (17 samples, 0.25%)</title><rect x="96.4803%" y="1077" width="0.2514%" height="15" fill="rgb(227,192,1)"/><text x="96.7303%" y="1087.50"></text></g><g><title>alloc_pages_vma (14 samples, 0.21%)</title><rect x="97.0719%" y="965" width="0.2070%" height="15" fill="rgb(237,180,29)"/><text x="97.3219%" y="975.50"></text></g><g><title>__alloc_pages_nodemask (14 samples, 0.21%)</title><rect x="97.0719%" y="949" width="0.2070%" height="15" fill="rgb(230,197,35)"/><text x="97.3219%" y="959.50"></text></g><g><title>get_page_from_freelist (13 samples, 0.19%)</title><rect x="97.0867%" y="933" width="0.1923%" height="15" fill="rgb(246,193,31)"/><text x="97.3367%" y="943.50"></text></g><g><title>do_anonymous_page (19 samples, 0.28%)</title><rect x="97.0719%" y="981" width="0.2810%" height="15" fill="rgb(241,36,4)"/><text x="97.3219%" y="991.50"></text></g><g><title>handle_mm_fault (26 samples, 0.38%)</title><rect x="96.9831%" y="1013" width="0.3845%" height="15" fill="rgb(241,130,17)"/><text x="97.2331%" y="1023.50"></text></g><g><title>__handle_mm_fault (25 samples, 0.37%)</title><rect x="96.9979%" y="997" width="0.3697%" height="15" fill="rgb(206,137,32)"/><text x="97.2479%" y="1007.50"></text></g><g><title>do_user_addr_fault (27 samples, 0.40%)</title><rect x="96.9831%" y="1029" width="0.3993%" height="15" fill="rgb(237,228,51)"/><text x="97.2331%" y="1039.50"></text></g><g><title>page_fault (28 samples, 0.41%)</title><rect x="96.9831%" y="1077" width="0.4141%" height="15" fill="rgb(243,6,42)"/><text x="97.2331%" y="1087.50"></text></g><g><title>do_page_fault (28 samples, 0.41%)</title><rect x="96.9831%" y="1061" width="0.4141%" height="15" fill="rgb(251,74,28)"/><text x="97.2331%" y="1071.50"></text></g><g><title>__do_page_fault (28 samples, 0.41%)</title><rect x="96.9831%" y="1045" width="0.4141%" height="15" fill="rgb(218,20,49)"/><text x="97.2331%" y="1055.50"></text></g><g><title>__libc_start_main (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1397" width="20.3638%" height="15" fill="rgb(238,28,14)"/><text x="77.4313%" y="1407.50">__libc_start_main</text></g><g><title>main (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1381" width="20.3638%" height="15" fill="rgb(229,40,46)"/><text x="77.4313%" y="1391.50">main</text></g><g><title>std::rt::lang_start_internal (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1365" width="20.3638%" height="15" fill="rgb(244,195,20)"/><text x="77.4313%" y="1375.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1349" width="20.3638%" height="15" fill="rgb(253,56,35)"/><text x="77.4313%" y="1359.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1333" width="20.3638%" height="15" fill="rgb(210,149,44)"/><text x="77.4313%" y="1343.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1317" width="20.3638%" height="15" fill="rgb(240,135,12)"/><text x="77.4313%" y="1327.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1301" width="20.3638%" height="15" fill="rgb(251,24,50)"/><text x="77.4313%" y="1311.50">core::ops::function::impls::&lt;imp..</text></g><g><title>std::rt::lang_start::{{closure}} (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1285" width="20.3638%" height="15" fill="rgb(243,200,47)"/><text x="77.4313%" y="1295.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1269" width="20.3638%" height="15" fill="rgb(224,166,26)"/><text x="77.4313%" y="1279.50">std::sys_common::backtrace::__ru..</text></g><g><title>core::ops::function::FnOnce::call_once (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1253" width="20.3638%" height="15" fill="rgb(233,0,47)"/><text x="77.4313%" y="1263.50">core::ops::function::FnOnce::cal..</text></g><g><title>main::main (1,377 samples, 20.36%)</title><rect x="77.1813%" y="1237" width="20.3638%" height="15" fill="rgb(253,80,5)"/><text x="77.4313%" y="1247.50">main::main</text></g><g><title>mass_bench::input_pair (1,371 samples, 20.28%)</title><rect x="77.2700%" y="1221" width="20.2751%" height="15" fill="rgb(214,133,25)"/><text x="77.5200%" y="1231.50">mass_bench::input_pair</text></g><g><title>mass_bench::load_series (1,371 samples, 20.28%)</title><rect x="77.2700%" y="1205" width="20.2751%" height="15" fill="rgb(209,27,14)"/><text x="77.5200%" y="1215.50">mass_bench::load_series</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,371 samples, 20.28%)</title><rect x="77.2700%" y="1189" width="20.2751%" height="15" fill="rgb(219,102,51)"/><text x="77.5200%" y="1199.50">core::iter::traits::iterator::It..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,371 samples, 20.28%)</title><rect x="77.2700%" y="1173" width="20.2751%" height="15" fill="rgb(237,18,16)"/><text x="77.5200%" y="1183.50">&lt;alloc::vec::Vec&lt;T&gt; as core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,371 samples, 20.28%)</title><rect x="77.2700%" y="1157" width="20.2751%" height="15" fill="rgb(241,85,17)"/><text x="77.5200%" y="1167.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,371 samples, 20.28%)</title><rect x="77.2700%" y="1141" width="20.2751%" height="15" fill="rgb(236,90,42)"/><text x="77.5200%" y="1151.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::ve..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,371 samples, 20.28%)</title><rect x="77.2700%" y="1125" width="20.2751%" height="15" fill="rgb(249,57,21)"/><text x="77.5200%" y="1135.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::ve..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1,371 samples, 20.28%)</title><rect x="77.2700%" y="1109" width="20.2751%" height="15" fill="rgb(243,12,36)"/><text x="77.5200%" y="1119.50">alloc::vec::Vec&lt;T&gt;::extend_desug..</text></g><g><title>core::ptr::write (53 samples, 0.78%)</title><rect x="96.7613%" y="1093" width="0.7838%" height="15" fill="rgb(253,128,47)"/><text x="97.0113%" y="1103.50"></text></g><g><title>_start (1,378 samples, 20.38%)</title><rect x="77.1813%" y="1413" width="20.3786%" height="15" fill="rgb(207,33,20)"/><text x="77.4313%" y="1423.50">_start</text></g><g><title>core::num::dec2flt::dec2flt (30 samples, 0.44%)</title><rect x="97.5747%" y="1413" width="0.4437%" height="15" fill="rgb(233,215,35)"/><text x="97.8247%" y="1423.50"></text></g><g><title>core::num::dec2flt::convert (14 samples, 0.21%)</title><rect x="97.8113%" y="1397" width="0.2070%" height="15" fill="rgb(249,188,52)"/><text x="98.0613%" y="1407.50"></text></g><g><title>core::num::dec2flt::algorithm::fast_path (14 samples, 0.21%)</title><rect x="97.8113%" y="1381" width="0.2070%" height="15" fill="rgb(225,12,32)"/><text x="98.0613%" y="1391.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (8 samples, 0.12%)</title><rect x="98.0923%" y="1413" width="0.1183%" height="15" fill="rgb(247,98,14)"/><text x="98.3423%" y="1423.50"></text></g><g><title>page_fault (109 samples, 1.61%)</title><rect x="98.2993%" y="1413" width="1.6119%" height="15" fill="rgb(247,219,48)"/><text x="98.5493%" y="1423.50"></text></g><g><title>main (6,757 samples, 99.93%)</title><rect x="0.0000%" y="1429" width="99.9261%" height="15" fill="rgb(253,60,48)"/><text x="0.2500%" y="1439.50">main</text></g><g><title>all (6,762 samples, 100%)</title><rect x="0.0000%" y="1445" width="100.0000%" height="15" fill="rgb(245,15,52)"/><text x="0.2500%" y="1455.50"></text></g></svg></svg>