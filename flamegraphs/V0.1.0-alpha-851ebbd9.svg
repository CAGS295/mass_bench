<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="773.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="773.00"> </text><svg id="frames" x="10" width="1180"><g><title>csv_core::reader::Reader::read_record (11 samples, 0.29%)</title><rect x="0.0000%" y="693" width="0.2912%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="703.50"></text></g><g><title>[[heap]] (13 samples, 0.34%)</title><rect x="0.0000%" y="709" width="0.3442%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="719.50"></text></g><g><title>csv_core::reader::Reader::read_record (6 samples, 0.16%)</title><rect x="0.4236%" y="693" width="0.1589%" height="15" fill="rgb(221,193,54)"/><text x="0.6736%" y="703.50"></text></g><g><title>[[stack]] (12 samples, 0.32%)</title><rect x="0.3442%" y="709" width="0.3177%" height="15" fill="rgb(248,212,6)"/><text x="0.5942%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (40 samples, 1.06%)</title><rect x="0.6884%" y="693" width="1.0590%" height="15" fill="rgb(208,68,35)"/><text x="0.9384%" y="703.50"></text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.34%)</title><rect x="1.4032%" y="677" width="0.3442%" height="15" fill="rgb(232,128,0)"/><text x="1.6532%" y="687.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (13 samples, 0.34%)</title><rect x="1.4032%" y="661" width="0.3442%" height="15" fill="rgb(207,160,47)"/><text x="1.6532%" y="671.50"></text></g><g><title>csv::string_record::StringRecord::read (13 samples, 0.34%)</title><rect x="1.4032%" y="645" width="0.3442%" height="15" fill="rgb(228,23,34)"/><text x="1.6532%" y="655.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (12 samples, 0.32%)</title><rect x="1.4297%" y="629" width="0.3177%" height="15" fill="rgb(218,30,26)"/><text x="1.6797%" y="639.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (12 samples, 0.32%)</title><rect x="1.4297%" y="613" width="0.3177%" height="15" fill="rgb(220,122,19)"/><text x="1.6797%" y="623.50"></text></g><g><title>__sincos (41 samples, 1.09%)</title><rect x="1.7474%" y="693" width="1.0855%" height="15" fill="rgb(250,228,42)"/><text x="1.9974%" y="703.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (14 samples, 0.37%)</title><rect x="2.8329%" y="693" width="0.3707%" height="15" fill="rgb(240,193,28)"/><text x="3.0829%" y="703.50"></text></g><g><title>csv_core::reader::Reader::read_record (9 samples, 0.24%)</title><rect x="3.2036%" y="693" width="0.2383%" height="15" fill="rgb(216,20,37)"/><text x="3.4536%" y="703.50"></text></g><g><title>clear_page_erms (7 samples, 0.19%)</title><rect x="4.2362%" y="373" width="0.1853%" height="15" fill="rgb(206,188,39)"/><text x="4.4862%" y="383.50"></text></g><g><title>alloc_pages_vma (15 samples, 0.40%)</title><rect x="4.1038%" y="421" width="0.3971%" height="15" fill="rgb(217,207,13)"/><text x="4.3538%" y="431.50"></text></g><g><title>__alloc_pages_nodemask (13 samples, 0.34%)</title><rect x="4.1567%" y="405" width="0.3442%" height="15" fill="rgb(231,73,38)"/><text x="4.4067%" y="415.50"></text></g><g><title>get_page_from_freelist (11 samples, 0.29%)</title><rect x="4.2097%" y="389" width="0.2912%" height="15" fill="rgb(225,20,46)"/><text x="4.4597%" y="399.50"></text></g><g><title>page_fault (24 samples, 0.64%)</title><rect x="4.0244%" y="533" width="0.6354%" height="15" fill="rgb(210,31,41)"/><text x="4.2744%" y="543.50"></text></g><g><title>do_page_fault (24 samples, 0.64%)</title><rect x="4.0244%" y="517" width="0.6354%" height="15" fill="rgb(221,200,47)"/><text x="4.2744%" y="527.50"></text></g><g><title>__do_page_fault (24 samples, 0.64%)</title><rect x="4.0244%" y="501" width="0.6354%" height="15" fill="rgb(226,26,5)"/><text x="4.2744%" y="511.50"></text></g><g><title>do_user_addr_fault (24 samples, 0.64%)</title><rect x="4.0244%" y="485" width="0.6354%" height="15" fill="rgb(249,33,26)"/><text x="4.2744%" y="495.50"></text></g><g><title>handle_mm_fault (24 samples, 0.64%)</title><rect x="4.0244%" y="469" width="0.6354%" height="15" fill="rgb(235,183,28)"/><text x="4.2744%" y="479.50"></text></g><g><title>__handle_mm_fault (24 samples, 0.64%)</title><rect x="4.0244%" y="453" width="0.6354%" height="15" fill="rgb(221,5,38)"/><text x="4.2744%" y="463.50"></text></g><g><title>do_anonymous_page (23 samples, 0.61%)</title><rect x="4.0508%" y="437" width="0.6089%" height="15" fill="rgb(247,18,42)"/><text x="4.3008%" y="447.50"></text></g><g><title>mem_cgroup_try_charge_delay (4 samples, 0.11%)</title><rect x="4.5539%" y="421" width="0.1059%" height="15" fill="rgb(241,131,45)"/><text x="4.8039%" y="431.50"></text></g><g><title>mem_cgroup_try_charge (4 samples, 0.11%)</title><rect x="4.5539%" y="405" width="0.1059%" height="15" fill="rgb(249,31,29)"/><text x="4.8039%" y="415.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (6 samples, 0.16%)</title><rect x="4.6598%" y="533" width="0.1589%" height="15" fill="rgb(225,111,53)"/><text x="4.9098%" y="543.50"></text></g><g><title>prepare_exit_to_usermode (6 samples, 0.16%)</title><rect x="4.6598%" y="517" width="0.1589%" height="15" fill="rgb(238,160,17)"/><text x="4.9098%" y="527.50"></text></g><g><title>main::main (57 samples, 1.51%)</title><rect x="3.4419%" y="693" width="1.5091%" height="15" fill="rgb(214,148,48)"/><text x="3.6919%" y="703.50"></text></g><g><title>mass_bench::input_pair (57 samples, 1.51%)</title><rect x="3.4419%" y="677" width="1.5091%" height="15" fill="rgb(232,36,49)"/><text x="3.6919%" y="687.50"></text></g><g><title>mass_bench::load_series (56 samples, 1.48%)</title><rect x="3.4684%" y="661" width="1.4827%" height="15" fill="rgb(209,103,24)"/><text x="3.7184%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (56 samples, 1.48%)</title><rect x="3.4684%" y="645" width="1.4827%" height="15" fill="rgb(229,88,8)"/><text x="3.7184%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (56 samples, 1.48%)</title><rect x="3.4684%" y="629" width="1.4827%" height="15" fill="rgb(213,181,19)"/><text x="3.7184%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (56 samples, 1.48%)</title><rect x="3.4684%" y="613" width="1.4827%" height="15" fill="rgb(254,191,54)"/><text x="3.7184%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (56 samples, 1.48%)</title><rect x="3.4684%" y="597" width="1.4827%" height="15" fill="rgb(241,83,37)"/><text x="3.7184%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (56 samples, 1.48%)</title><rect x="3.4684%" y="581" width="1.4827%" height="15" fill="rgb(233,36,39)"/><text x="3.7184%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (56 samples, 1.48%)</title><rect x="3.4684%" y="565" width="1.4827%" height="15" fill="rgb(226,3,54)"/><text x="3.7184%" y="575.50"></text></g><g><title>core::ptr::write (42 samples, 1.11%)</title><rect x="3.8390%" y="549" width="1.1120%" height="15" fill="rgb(245,192,40)"/><text x="4.0890%" y="559.50"></text></g><g><title>sync_regs (5 samples, 0.13%)</title><rect x="4.8186%" y="533" width="0.1324%" height="15" fill="rgb(238,167,29)"/><text x="5.0686%" y="543.50"></text></g><g><title>csv::Trim::should_trim_fields (6 samples, 0.16%)</title><rect x="6.2748%" y="533" width="0.1589%" height="15" fill="rgb(232,182,51)"/><text x="6.5248%" y="543.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.50%)</title><rect x="7.9428%" y="453" width="0.5030%" height="15" fill="rgb(231,60,39)"/><text x="8.1928%" y="463.50"></text></g><g><title>core::slice::ascii::&lt;impl [u8]&gt;::is_ascii (47 samples, 1.24%)</title><rect x="7.3868%" y="501" width="1.2444%" height="15" fill="rgb(208,69,12)"/><text x="7.6368%" y="511.50"></text></g><g><title>core::slice::ascii::is_ascii (47 samples, 1.24%)</title><rect x="7.3868%" y="485" width="1.2444%" height="15" fill="rgb(235,93,37)"/><text x="7.6368%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::all (41 samples, 1.09%)</title><rect x="7.5457%" y="469" width="1.0855%" height="15" fill="rgb(213,116,39)"/><text x="7.7957%" y="479.50"></text></g><g><title>core::slice::ascii::is_ascii::{{closure}} (7 samples, 0.19%)</title><rect x="8.4459%" y="453" width="0.1853%" height="15" fill="rgb(222,207,29)"/><text x="8.6959%" y="463.50"></text></g><g><title>core::num::&lt;impl u8&gt;::is_ascii (7 samples, 0.19%)</title><rect x="8.4459%" y="437" width="0.1853%" height="15" fill="rgb(206,96,30)"/><text x="8.6959%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.13%)</title><rect x="8.6577%" y="485" width="0.1324%" height="15" fill="rgb(218,138,4)"/><text x="8.9077%" y="495.50"></text></g><g><title>csv::byte_record::ByteRecord::validate (61 samples, 1.62%)</title><rect x="7.3339%" y="517" width="1.6150%" height="15" fill="rgb(250,191,14)"/><text x="7.5839%" y="527.50"></text></g><g><title>csv::byte_record::Bounds::end (12 samples, 0.32%)</title><rect x="8.6312%" y="501" width="0.3177%" height="15" fill="rgb(239,60,40)"/><text x="8.8812%" y="511.50"></text></g><g><title>csv::byte_record::Bounds::ends (5 samples, 0.13%)</title><rect x="8.8165%" y="485" width="0.1324%" height="15" fill="rgb(206,27,48)"/><text x="9.0665%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (5 samples, 0.13%)</title><rect x="8.8165%" y="469" width="0.1324%" height="15" fill="rgb(225,35,8)"/><text x="9.0665%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (4 samples, 0.11%)</title><rect x="8.8430%" y="453" width="0.1059%" height="15" fill="rgb(250,213,24)"/><text x="9.0930%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.11%)</title><rect x="8.8430%" y="437" width="0.1059%" height="15" fill="rgb(247,123,22)"/><text x="9.0930%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (4 samples, 0.11%)</title><rect x="8.8430%" y="421" width="0.1059%" height="15" fill="rgb(231,138,38)"/><text x="9.0930%" y="431.50"></text></g><g><title>csv::Trim::should_trim_fields (10 samples, 0.26%)</title><rect x="9.7167%" y="501" width="0.2648%" height="15" fill="rgb(231,145,46)"/><text x="9.9667%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::DerefMut&gt;::deref_mut (6 samples, 0.16%)</title><rect x="10.9876%" y="469" width="0.1589%" height="15" fill="rgb(251,118,11)"/><text x="11.2376%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (17 samples, 0.45%)</title><rect x="10.9876%" y="485" width="0.4501%" height="15" fill="rgb(217,147,25)"/><text x="11.2376%" y="495.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (11 samples, 0.29%)</title><rect x="11.1464%" y="469" width="0.2912%" height="15" fill="rgb(247,81,37)"/><text x="11.3964%" y="479.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (11 samples, 0.29%)</title><rect x="11.1464%" y="453" width="0.2912%" height="15" fill="rgb(209,12,38)"/><text x="11.3964%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (11 samples, 0.29%)</title><rect x="11.1464%" y="437" width="0.2912%" height="15" fill="rgb(227,1,9)"/><text x="11.3964%" y="447.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (11 samples, 0.29%)</title><rect x="11.1464%" y="421" width="0.2912%" height="15" fill="rgb(248,47,43)"/><text x="11.3964%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (11 samples, 0.29%)</title><rect x="11.1464%" y="405" width="0.2912%" height="15" fill="rgb(221,10,30)"/><text x="11.3964%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (11 samples, 0.29%)</title><rect x="11.1464%" y="389" width="0.2912%" height="15" fill="rgb(210,229,1)"/><text x="11.3964%" y="399.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (12 samples, 0.32%)</title><rect x="11.4376%" y="485" width="0.3177%" height="15" fill="rgb(222,148,37)"/><text x="11.6876%" y="495.50"></text></g><g><title>core::cmp::min (4 samples, 0.11%)</title><rect x="11.6495%" y="469" width="0.1059%" height="15" fill="rgb(234,67,33)"/><text x="11.8995%" y="479.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.11%)</title><rect x="11.6495%" y="453" width="0.1059%" height="15" fill="rgb(247,98,35)"/><text x="11.8995%" y="463.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.11%)</title><rect x="11.6495%" y="437" width="0.1059%" height="15" fill="rgb(247,138,52)"/><text x="11.8995%" y="447.50"></text></g><g><title>&lt;flate2::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (4 samples, 0.11%)</title><rect x="11.8877%" y="277" width="0.1059%" height="15" fill="rgb(213,79,30)"/><text x="12.1377%" y="287.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (4 samples, 0.11%)</title><rect x="11.8877%" y="261" width="0.1059%" height="15" fill="rgb(246,177,23)"/><text x="12.1377%" y="271.50"></text></g><g><title>std::sys::unix::fs::File::read (4 samples, 0.11%)</title><rect x="11.8877%" y="245" width="0.1059%" height="15" fill="rgb(230,62,27)"/><text x="12.1377%" y="255.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (4 samples, 0.11%)</title><rect x="11.8877%" y="229" width="0.1059%" height="15" fill="rgb(216,154,8)"/><text x="12.1377%" y="239.50"></text></g><g><title>__libc_read (4 samples, 0.11%)</title><rect x="11.8877%" y="213" width="0.1059%" height="15" fill="rgb(244,35,45)"/><text x="12.1377%" y="223.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.11%)</title><rect x="11.8877%" y="197" width="0.1059%" height="15" fill="rgb(251,115,12)"/><text x="12.1377%" y="207.50"></text></g><g><title>do_syscall_64 (4 samples, 0.11%)</title><rect x="11.8877%" y="181" width="0.1059%" height="15" fill="rgb(240,54,50)"/><text x="12.1377%" y="191.50"></text></g><g><title>__x64_sys_read (4 samples, 0.11%)</title><rect x="11.8877%" y="165" width="0.1059%" height="15" fill="rgb(233,84,52)"/><text x="12.1377%" y="175.50"></text></g><g><title>ksys_read (4 samples, 0.11%)</title><rect x="11.8877%" y="149" width="0.1059%" height="15" fill="rgb(207,117,47)"/><text x="12.1377%" y="159.50"></text></g><g><title>vfs_read (4 samples, 0.11%)</title><rect x="11.8877%" y="133" width="0.1059%" height="15" fill="rgb(249,43,39)"/><text x="12.1377%" y="143.50"></text></g><g><title>__vfs_read (4 samples, 0.11%)</title><rect x="11.8877%" y="117" width="0.1059%" height="15" fill="rgb(209,38,44)"/><text x="12.1377%" y="127.50"></text></g><g><title>new_sync_read (4 samples, 0.11%)</title><rect x="11.8877%" y="101" width="0.1059%" height="15" fill="rgb(236,212,23)"/><text x="12.1377%" y="111.50"></text></g><g><title>ext4_file_read_iter (4 samples, 0.11%)</title><rect x="11.8877%" y="85" width="0.1059%" height="15" fill="rgb(242,79,21)"/><text x="12.1377%" y="95.50"></text></g><g><title>generic_file_read_iter (4 samples, 0.11%)</title><rect x="11.8877%" y="69" width="0.1059%" height="15" fill="rgb(211,96,35)"/><text x="12.1377%" y="79.50"></text></g><g><title>generic_file_buffered_read (4 samples, 0.11%)</title><rect x="11.8877%" y="53" width="0.1059%" height="15" fill="rgb(253,215,40)"/><text x="12.1377%" y="63.50"></text></g><g><title>&lt;&amp;mut I as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (6 samples, 0.16%)</title><rect x="14.1117%" y="165" width="0.1589%" height="15" fill="rgb(211,81,21)"/><text x="14.3617%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::exact_size::ExactSizeIterator&gt;::len (6 samples, 0.16%)</title><rect x="14.1117%" y="149" width="0.1589%" height="15" fill="rgb(208,190,38)"/><text x="14.3617%" y="159.50"></text></g><g><title>__memmove_avx_unaligned_erms (30 samples, 0.79%)</title><rect x="14.2706%" y="165" width="0.7943%" height="15" fill="rgb(235,213,38)"/><text x="14.5206%" y="175.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::lookup (13 samples, 0.34%)</title><rect x="15.0649%" y="165" width="0.3442%" height="15" fill="rgb(237,122,38)"/><text x="15.3149%" y="175.50"></text></g><g><title>miniz_oxide::inflate::core::HuffmanTable::fast_lookup (12 samples, 0.32%)</title><rect x="15.0913%" y="149" width="0.3177%" height="15" fill="rgb(244,218,35)"/><text x="15.3413%" y="159.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_mut (5 samples, 0.13%)</title><rect x="15.7268%" y="149" width="0.1324%" height="15" fill="rgb(240,68,47)"/><text x="15.9768%" y="159.50"></text></g><g><title>miniz_oxide::inflate::core::apply_match (23 samples, 0.61%)</title><rect x="15.4091%" y="165" width="0.6089%" height="15" fill="rgb(210,16,53)"/><text x="15.6591%" y="175.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (6 samples, 0.16%)</title><rect x="15.8591%" y="149" width="0.1589%" height="15" fill="rgb(235,124,12)"/><text x="16.1091%" y="159.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (6 samples, 0.16%)</title><rect x="15.8591%" y="133" width="0.1589%" height="15" fill="rgb(224,169,11)"/><text x="16.1091%" y="143.50"></text></g><g><title>&lt;&amp;mut T as core::convert::AsRef&lt;U&gt;&gt;::as_ref (7 samples, 0.19%)</title><rect x="16.0710%" y="133" width="0.1853%" height="15" fill="rgb(250,166,2)"/><text x="16.3210%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::convert::AsRef&lt;[T]&gt;&gt;::as_ref (7 samples, 0.19%)</title><rect x="16.0710%" y="117" width="0.1853%" height="15" fill="rgb(242,216,29)"/><text x="16.3210%" y="127.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::as_slice (7 samples, 0.19%)</title><rect x="16.0710%" y="101" width="0.1853%" height="15" fill="rgb(230,116,27)"/><text x="16.3210%" y="111.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::make_slice (7 samples, 0.19%)</title><rect x="16.0710%" y="85" width="0.1853%" height="15" fill="rgb(228,99,48)"/><text x="16.3210%" y="95.50"></text></g><g><title>miniz_oxide::inflate::core::fill_bit_buffer (11 samples, 0.29%)</title><rect x="16.0180%" y="165" width="0.2912%" height="15" fill="rgb(253,11,6)"/><text x="16.2680%" y="175.50"></text></g><g><title>miniz_oxide::inflate::core::read_u32_le (9 samples, 0.24%)</title><rect x="16.0710%" y="149" width="0.2383%" height="15" fill="rgb(247,143,39)"/><text x="16.3210%" y="159.50"></text></g><g><title>miniz_oxide::inflate::core::transfer (11 samples, 0.29%)</title><rect x="16.3092%" y="165" width="0.2912%" height="15" fill="rgb(236,97,10)"/><text x="16.5592%" y="175.50"></text></g><g><title>miniz_oxide::inflate::core::decompress_fast (170 samples, 4.50%)</title><rect x="12.1260%" y="181" width="4.5009%" height="15" fill="rgb(233,208,19)"/><text x="12.3760%" y="191.50">miniz..</text></g><g><title>&lt;adler::algo::U32X4 as core::ops::arith::AddAssign&gt;::add_assign (16 samples, 0.42%)</title><rect x="16.6799%" y="133" width="0.4236%" height="15" fill="rgb(216,164,2)"/><text x="16.9299%" y="143.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&lt;&amp;u32&gt;&gt;::add_assign (16 samples, 0.42%)</title><rect x="16.6799%" y="117" width="0.4236%" height="15" fill="rgb(220,129,5)"/><text x="16.9299%" y="127.50"></text></g><g><title>&lt;u32 as core::ops::arith::AddAssign&gt;::add_assign (16 samples, 0.42%)</title><rect x="16.6799%" y="101" width="0.4236%" height="15" fill="rgb(242,17,10)"/><text x="16.9299%" y="111.50"></text></g><g><title>miniz_oxide::inflate::stream::inflate_loop (200 samples, 5.30%)</title><rect x="11.9936%" y="213" width="5.2952%" height="15" fill="rgb(242,107,0)"/><text x="12.2436%" y="223.50">miniz_..</text></g><g><title>miniz_oxide::inflate::core::decompress (200 samples, 5.30%)</title><rect x="11.9936%" y="197" width="5.2952%" height="15" fill="rgb(251,28,31)"/><text x="12.2436%" y="207.50">miniz_..</text></g><g><title>miniz_oxide::shared::update_adler32 (23 samples, 0.61%)</title><rect x="16.6799%" y="181" width="0.6089%" height="15" fill="rgb(233,223,10)"/><text x="16.9299%" y="191.50"></text></g><g><title>adler::Adler32::write_slice (23 samples, 0.61%)</title><rect x="16.6799%" y="165" width="0.6089%" height="15" fill="rgb(215,21,27)"/><text x="16.9299%" y="175.50"></text></g><g><title>adler::algo::&lt;impl adler::Adler32&gt;::compute (23 samples, 0.61%)</title><rect x="16.6799%" y="149" width="0.6089%" height="15" fill="rgb(232,23,21)"/><text x="16.9299%" y="159.50"></text></g><g><title>adler::algo::U32X4::from (6 samples, 0.16%)</title><rect x="17.1300%" y="133" width="0.1589%" height="15" fill="rgb(244,5,23)"/><text x="17.3800%" y="143.50"></text></g><g><title>&lt;flate2::deflate::bufread::DeflateDecoder&lt;R&gt; as std::io::Read&gt;::read (208 samples, 5.51%)</title><rect x="11.8877%" y="309" width="5.5070%" height="15" fill="rgb(226,81,46)"/><text x="12.1377%" y="319.50">&lt;flate2..</text></g><g><title>flate2::zio::read (208 samples, 5.51%)</title><rect x="11.8877%" y="293" width="5.5070%" height="15" fill="rgb(247,70,30)"/><text x="12.1377%" y="303.50">flate2:..</text></g><g><title>&lt;flate2::mem::Decompress as flate2::zio::Ops&gt;::run (204 samples, 5.40%)</title><rect x="11.9936%" y="277" width="5.4011%" height="15" fill="rgb(212,68,19)"/><text x="12.2436%" y="287.50">&lt;flate2..</text></g><g><title>flate2::mem::Decompress::decompress (204 samples, 5.40%)</title><rect x="11.9936%" y="261" width="5.4011%" height="15" fill="rgb(240,187,13)"/><text x="12.2436%" y="271.50">flate2:..</text></g><g><title>&lt;flate2::ffi::rust::Inflate as flate2::ffi::InflateBackend&gt;::decompress (204 samples, 5.40%)</title><rect x="11.9936%" y="245" width="5.4011%" height="15" fill="rgb(223,113,26)"/><text x="12.2436%" y="255.50">&lt;flate2..</text></g><g><title>miniz_oxide::inflate::stream::inflate (204 samples, 5.40%)</title><rect x="11.9936%" y="229" width="5.4011%" height="15" fill="rgb(206,192,2)"/><text x="12.2436%" y="239.50">miniz_o..</text></g><g><title>miniz_oxide::inflate::stream::push_dict_out (4 samples, 0.11%)</title><rect x="17.2889%" y="213" width="0.1059%" height="15" fill="rgb(241,108,4)"/><text x="17.5389%" y="223.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (4 samples, 0.11%)</title><rect x="17.2889%" y="197" width="0.1059%" height="15" fill="rgb(247,173,49)"/><text x="17.5389%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.11%)</title><rect x="17.2889%" y="181" width="0.1059%" height="15" fill="rgb(224,114,35)"/><text x="17.5389%" y="191.50"></text></g><g><title>__memmove_avx_unaligned_erms (4 samples, 0.11%)</title><rect x="17.2889%" y="165" width="0.1059%" height="15" fill="rgb(245,159,27)"/><text x="17.5389%" y="175.50"></text></g><g><title>&lt;flate2::gz::read::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (212 samples, 5.61%)</title><rect x="11.8877%" y="357" width="5.6129%" height="15" fill="rgb(245,172,44)"/><text x="12.1377%" y="367.50">&lt;flate2..</text></g><g><title>&lt;flate2::gz::bufread::GzDecoder&lt;R&gt; as std::io::Read&gt;::read (212 samples, 5.61%)</title><rect x="11.8877%" y="341" width="5.6129%" height="15" fill="rgb(236,23,11)"/><text x="12.1377%" y="351.50">&lt;flate2..</text></g><g><title>&lt;flate2::crc::CrcReader&lt;R&gt; as std::io::Read&gt;::read (212 samples, 5.61%)</title><rect x="11.8877%" y="325" width="5.6129%" height="15" fill="rgb(205,117,38)"/><text x="12.1377%" y="335.50">&lt;flate2..</text></g><g><title>flate2::crc::Crc::update (4 samples, 0.11%)</title><rect x="17.3948%" y="309" width="0.1059%" height="15" fill="rgb(237,72,25)"/><text x="17.6448%" y="319.50"></text></g><g><title>crc32fast::Hasher::update (4 samples, 0.11%)</title><rect x="17.3948%" y="293" width="0.1059%" height="15" fill="rgb(244,70,9)"/><text x="17.6448%" y="303.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::State::update (4 samples, 0.11%)</title><rect x="17.3948%" y="277" width="0.1059%" height="15" fill="rgb(217,125,39)"/><text x="17.6448%" y="287.50"></text></g><g><title>crc32fast::specialized::pclmulqdq::calculate (4 samples, 0.11%)</title><rect x="17.3948%" y="261" width="0.1059%" height="15" fill="rgb(235,36,10)"/><text x="17.6448%" y="271.50"></text></g><g><title>&lt;std::io::buffered::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (218 samples, 5.77%)</title><rect x="11.7554%" y="485" width="5.7718%" height="15" fill="rgb(251,123,47)"/><text x="12.0054%" y="495.50">&lt;std::i..</text></g><g><title>&lt;tar::entry::Entry&lt;R&gt; as std::io::Read&gt;::read (213 samples, 5.64%)</title><rect x="11.8877%" y="469" width="5.6394%" height="15" fill="rgb(221,13,13)"/><text x="12.1377%" y="479.50">&lt;tar::e..</text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read (213 samples, 5.64%)</title><rect x="11.8877%" y="453" width="5.6394%" height="15" fill="rgb(238,131,9)"/><text x="12.1377%" y="463.50">&lt;tar::e..</text></g><g><title>core::option::Option&lt;T&gt;::map (213 samples, 5.64%)</title><rect x="11.8877%" y="437" width="5.6394%" height="15" fill="rgb(211,50,8)"/><text x="12.1377%" y="447.50">core::o..</text></g><g><title>&lt;tar::entry::EntryFields as std::io::Read&gt;::read::{{closure}} (213 samples, 5.64%)</title><rect x="11.8877%" y="421" width="5.6394%" height="15" fill="rgb(245,182,24)"/><text x="12.1377%" y="431.50">&lt;tar::e..</text></g><g><title>&lt;tar::entry::EntryIo as std::io::Read&gt;::read (213 samples, 5.64%)</title><rect x="11.8877%" y="405" width="5.6394%" height="15" fill="rgb(242,14,37)"/><text x="12.1377%" y="415.50">&lt;tar::e..</text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read (213 samples, 5.64%)</title><rect x="11.8877%" y="389" width="5.6394%" height="15" fill="rgb(246,228,12)"/><text x="12.1377%" y="399.50">&lt;std::i..</text></g><g><title>&lt;&amp;tar::archive::ArchiveInner&lt;R&gt; as std::io::Read&gt;::read (213 samples, 5.64%)</title><rect x="11.8877%" y="373" width="5.6394%" height="15" fill="rgb(213,55,15)"/><text x="12.1377%" y="383.50">&lt;&amp;tar::..</text></g><g><title>csv::byte_record::ByteRecord::as_parts (5 samples, 0.13%)</title><rect x="17.5271%" y="485" width="0.1324%" height="15" fill="rgb(209,9,3)"/><text x="17.7771%" y="495.50"></text></g><g><title>csv::byte_record::ByteRecord::clear (9 samples, 0.24%)</title><rect x="17.6595%" y="485" width="0.2383%" height="15" fill="rgb(230,59,30)"/><text x="17.9095%" y="495.50"></text></g><g><title>csv::byte_record::ByteRecord::truncate (9 samples, 0.24%)</title><rect x="17.6595%" y="469" width="0.2383%" height="15" fill="rgb(209,121,21)"/><text x="17.9095%" y="479.50"></text></g><g><title>csv::byte_record::ByteRecord::set_len (5 samples, 0.13%)</title><rect x="17.8978%" y="485" width="0.1324%" height="15" fill="rgb(220,109,13)"/><text x="18.1478%" y="495.50"></text></g><g><title>csv::byte_record::ByteRecord::set_position (14 samples, 0.37%)</title><rect x="18.0302%" y="485" width="0.3707%" height="15" fill="rgb(232,18,1)"/><text x="18.2802%" y="495.50"></text></g><g><title>csv::byte_record::ByteRecord::len (8 samples, 0.21%)</title><rect x="19.0892%" y="469" width="0.2118%" height="15" fill="rgb(215,41,42)"/><text x="19.3392%" y="479.50"></text></g><g><title>csv::reader::ReaderState::add_record (34 samples, 0.90%)</title><rect x="18.5068%" y="485" width="0.9002%" height="15" fill="rgb(224,123,36)"/><text x="18.7568%" y="495.50"></text></g><g><title>csv::byte_record::Position::set_record (4 samples, 0.11%)</title><rect x="19.3010%" y="469" width="0.1059%" height="15" fill="rgb(240,125,3)"/><text x="19.5510%" y="479.50"></text></g><g><title>csv_core::reader::Reader::line (5 samples, 0.13%)</title><rect x="19.4069%" y="485" width="0.1324%" height="15" fill="rgb(205,98,50)"/><text x="19.6569%" y="495.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialEq&gt;::eq (7 samples, 0.19%)</title><rect x="22.6370%" y="453" width="0.1853%" height="15" fill="rgb(205,185,37)"/><text x="22.8870%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (5 samples, 0.13%)</title><rect x="22.8223%" y="453" width="0.1324%" height="15" fill="rgb(238,207,15)"/><text x="23.0723%" y="463.50"></text></g><g><title>csv_core::reader::Dfa::get_output (50 samples, 1.32%)</title><rect x="22.9547%" y="453" width="1.3238%" height="15" fill="rgb(213,199,42)"/><text x="23.2047%" y="463.50"></text></g><g><title>csv_core::reader::Dfa::new_read_record_result (5 samples, 0.13%)</title><rect x="24.2785%" y="453" width="0.1324%" height="15" fill="rgb(235,201,11)"/><text x="24.5285%" y="463.50"></text></g><g><title>csv_core::reader::Reader::read_record_dfa (290 samples, 7.68%)</title><rect x="19.9365%" y="469" width="7.6781%" height="15" fill="rgb(207,46,11)"/><text x="20.1865%" y="479.50">csv_core::r..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (121 samples, 3.20%)</title><rect x="24.4109%" y="453" width="3.2036%" height="15" fill="rgb(241,35,35)"/><text x="24.6609%" y="463.50">csv..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_record (811 samples, 21.47%)</title><rect x="6.2748%" y="549" width="21.4721%" height="15" fill="rgb(243,32,47)"/><text x="6.5248%" y="559.50">csv::reader::Reader&lt;R&gt;::read_record</text></g><g><title>csv::string_record::StringRecord::read (805 samples, 21.31%)</title><rect x="6.4337%" y="533" width="21.3132%" height="15" fill="rgb(247,202,23)"/><text x="6.6837%" y="543.50">csv::string_record::StringRecord::..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (710 samples, 18.80%)</title><rect x="8.9489%" y="517" width="18.7980%" height="15" fill="rgb(219,102,11)"/><text x="9.1989%" y="527.50">csv::reader::Reader&lt;R&gt;::read_..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (671 samples, 17.77%)</title><rect x="9.9815%" y="501" width="17.7654%" height="15" fill="rgb(243,110,44)"/><text x="10.2315%" y="511.50">csv::reader::Reader&lt;R&gt;::read..</text></g><g><title>csv_core::reader::Reader::read_record (310 samples, 8.21%)</title><rect x="19.5393%" y="485" width="8.2076%" height="15" fill="rgb(222,74,54)"/><text x="19.7893%" y="495.50">csv_core::r..</text></g><g><title>csv_core::reader::Reader::strip_utf8_bom (5 samples, 0.13%)</title><rect x="27.6145%" y="469" width="0.1324%" height="15" fill="rgb(216,99,12)"/><text x="27.8645%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::last (4 samples, 0.11%)</title><rect x="27.7998%" y="421" width="0.1059%" height="15" fill="rgb(226,22,26)"/><text x="28.0498%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.19%)</title><rect x="27.9057%" y="389" width="0.1853%" height="15" fill="rgb(217,163,10)"/><text x="28.1557%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_ptr (7 samples, 0.19%)</title><rect x="27.9057%" y="373" width="0.1853%" height="15" fill="rgb(213,25,53)"/><text x="28.1557%" y="383.50"></text></g><g><title>csv::string_record::StringRecord::iter (18 samples, 0.48%)</title><rect x="27.7469%" y="517" width="0.4766%" height="15" fill="rgb(252,105,26)"/><text x="27.9969%" y="527.50"></text></g><g><title>&lt;&amp;csv::string_record::StringRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.48%)</title><rect x="27.7469%" y="501" width="0.4766%" height="15" fill="rgb(220,39,43)"/><text x="27.9969%" y="511.50"></text></g><g><title>csv::byte_record::ByteRecord::iter (18 samples, 0.48%)</title><rect x="27.7469%" y="485" width="0.4766%" height="15" fill="rgb(229,68,48)"/><text x="27.9969%" y="495.50"></text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (18 samples, 0.48%)</title><rect x="27.7469%" y="469" width="0.4766%" height="15" fill="rgb(252,8,32)"/><text x="27.9969%" y="479.50"></text></g><g><title>csv::byte_record::ByteRecord::as_slice (18 samples, 0.48%)</title><rect x="27.7469%" y="453" width="0.4766%" height="15" fill="rgb(223,20,43)"/><text x="27.9969%" y="463.50"></text></g><g><title>csv::byte_record::Bounds::end (17 samples, 0.45%)</title><rect x="27.7734%" y="437" width="0.4501%" height="15" fill="rgb(229,81,49)"/><text x="28.0234%" y="447.50"></text></g><g><title>csv::byte_record::Bounds::ends (12 samples, 0.32%)</title><rect x="27.9057%" y="421" width="0.3177%" height="15" fill="rgb(236,28,36)"/><text x="28.1557%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (12 samples, 0.32%)</title><rect x="27.9057%" y="405" width="0.3177%" height="15" fill="rgb(249,185,26)"/><text x="28.1557%" y="415.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.13%)</title><rect x="28.0911%" y="389" width="0.1324%" height="15" fill="rgb(249,174,33)"/><text x="28.3411%" y="399.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.13%)</title><rect x="28.0911%" y="373" width="0.1324%" height="15" fill="rgb(233,201,37)"/><text x="28.3411%" y="383.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.13%)</title><rect x="28.0911%" y="357" width="0.1324%" height="15" fill="rgb(221,78,26)"/><text x="28.3411%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try::Try&gt;::into_result (33 samples, 0.87%)</title><rect x="28.2235%" y="437" width="0.8737%" height="15" fill="rgb(250,127,30)"/><text x="28.4735%" y="447.50"></text></g><g><title>&lt;csv::deserializer::DeRecordWrap&lt;T&gt; as csv::deserializer::DeRecord&gt;::next_field (6 samples, 0.16%)</title><rect x="29.0972%" y="437" width="0.1589%" height="15" fill="rgb(230,49,44)"/><text x="29.3472%" y="447.50"></text></g><g><title>&lt;csv::deserializer::DeStringRecord as csv::deserializer::DeRecord&gt;::next_field (6 samples, 0.16%)</title><rect x="29.0972%" y="421" width="0.1589%" height="15" fill="rgb(229,67,23)"/><text x="29.3472%" y="431.50"></text></g><g><title>&lt;core::iter::adapters::Peekable&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.16%)</title><rect x="29.0972%" y="405" width="0.1589%" height="15" fill="rgb(249,83,47)"/><text x="29.3472%" y="415.50"></text></g><g><title>&lt;csv::string_record::StringRecordIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.16%)</title><rect x="29.0972%" y="389" width="0.1589%" height="15" fill="rgb(215,43,3)"/><text x="29.3472%" y="399.50"></text></g><g><title>&lt;csv::byte_record::ByteRecordIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.16%)</title><rect x="29.0972%" y="373" width="0.1589%" height="15" fill="rgb(238,154,13)"/><text x="29.3472%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (6 samples, 0.16%)</title><rect x="29.0972%" y="357" width="0.1589%" height="15" fill="rgb(219,56,2)"/><text x="29.3472%" y="367.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.13%)</title><rect x="29.1236%" y="341" width="0.1324%" height="15" fill="rgb(233,0,4)"/><text x="29.3736%" y="351.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.13%)</title><rect x="29.1236%" y="325" width="0.1324%" height="15" fill="rgb(235,30,7)"/><text x="29.3736%" y="335.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::from_int (33 samples, 0.87%)</title><rect x="30.1033%" y="357" width="0.8737%" height="15" fill="rgb(250,79,13)"/><text x="30.3533%" y="367.50"></text></g><g><title>&lt;f64 as core::num::dec2flt::rawfp::RawFloat&gt;::short_fast_pow10 (9 samples, 0.24%)</title><rect x="30.9770%" y="357" width="0.2383%" height="15" fill="rgb(211,146,34)"/><text x="31.2270%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Div&gt;::div (83 samples, 2.20%)</title><rect x="31.2153%" y="357" width="2.1975%" height="15" fill="rgb(228,22,38)"/><text x="31.4653%" y="367.50">&lt;..</text></g><g><title>core::num::&lt;impl i64&gt;::abs (7 samples, 0.19%)</title><rect x="33.4128%" y="357" width="0.1853%" height="15" fill="rgb(235,168,5)"/><text x="33.6628%" y="367.50"></text></g><g><title>core::num::dec2flt::num::from_str_unchecked (41 samples, 1.09%)</title><rect x="33.5981%" y="357" width="1.0855%" height="15" fill="rgb(221,155,16)"/><text x="33.8481%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.34%)</title><rect x="34.3394%" y="341" width="0.3442%" height="15" fill="rgb(215,215,53)"/><text x="34.5894%" y="351.50"></text></g><g><title>core::num::dec2flt::algorithm::fast_path (184 samples, 4.87%)</title><rect x="29.8650%" y="373" width="4.8716%" height="15" fill="rgb(223,4,10)"/><text x="30.1150%" y="383.50">core::..</text></g><g><title>&lt;core::iter::adapters::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.24%)</title><rect x="35.3190%" y="309" width="0.2383%" height="15" fill="rgb(234,103,6)"/><text x="35.5690%" y="319.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::try_rfold (9 samples, 0.24%)</title><rect x="35.3190%" y="293" width="0.2383%" height="15" fill="rgb(227,97,0)"/><text x="35.5690%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (9 samples, 0.24%)</title><rect x="35.3190%" y="277" width="0.2383%" height="15" fill="rgb(234,150,53)"/><text x="35.5690%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (5 samples, 0.13%)</title><rect x="35.4249%" y="261" width="0.1324%" height="15" fill="rgb(228,201,54)"/><text x="35.6749%" y="271.50"></text></g><g><title>core::num::dec2flt::simplify::{{closure}} (5 samples, 0.13%)</title><rect x="35.4249%" y="245" width="0.1324%" height="15" fill="rgb(222,22,37)"/><text x="35.6749%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (20 samples, 0.53%)</title><rect x="35.5573%" y="293" width="0.5295%" height="15" fill="rgb(237,53,32)"/><text x="35.8073%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;F&gt;::call_mut (11 samples, 0.29%)</title><rect x="35.7956%" y="277" width="0.2912%" height="15" fill="rgb(233,25,53)"/><text x="36.0456%" y="287.50"></text></g><g><title>core::num::dec2flt::simplify::{{closure}} (11 samples, 0.29%)</title><rect x="35.7956%" y="261" width="0.2912%" height="15" fill="rgb(210,40,34)"/><text x="36.0456%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::count (39 samples, 1.03%)</title><rect x="35.3190%" y="357" width="1.0326%" height="15" fill="rgb(241,220,44)"/><text x="35.5690%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::fold (39 samples, 1.03%)</title><rect x="35.3190%" y="341" width="1.0326%" height="15" fill="rgb(235,28,35)"/><text x="35.5690%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::TakeWhile&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (39 samples, 1.03%)</title><rect x="35.3190%" y="325" width="1.0326%" height="15" fill="rgb(210,56,17)"/><text x="35.5690%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (30 samples, 0.79%)</title><rect x="35.5573%" y="309" width="0.7943%" height="15" fill="rgb(224,130,29)"/><text x="35.8073%" y="319.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.26%)</title><rect x="36.0868%" y="293" width="0.2648%" height="15" fill="rgb(235,212,8)"/><text x="36.3368%" y="303.50"></text></g><g><title>core::num::dec2flt::simplify (66 samples, 1.75%)</title><rect x="34.7366%" y="373" width="1.7474%" height="15" fill="rgb(223,33,50)"/><text x="34.9866%" y="383.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (5 samples, 0.13%)</title><rect x="36.3516%" y="357" width="0.1324%" height="15" fill="rgb(219,149,13)"/><text x="36.6016%" y="367.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (5 samples, 0.13%)</title><rect x="36.3516%" y="341" width="0.1324%" height="15" fill="rgb(250,156,29)"/><text x="36.6016%" y="351.50"></text></g><g><title>core::num::dec2flt::convert (274 samples, 7.25%)</title><rect x="29.3619%" y="389" width="7.2544%" height="15" fill="rgb(216,193,19)"/><text x="29.6119%" y="399.50">core::num:..</text></g><g><title>core::num::dec2flt::trivial_cases (5 samples, 0.13%)</title><rect x="36.4840%" y="373" width="0.1324%" height="15" fill="rgb(216,135,14)"/><text x="36.7340%" y="383.50"></text></g><g><title>core::num::dec2flt::extract_sign (7 samples, 0.19%)</title><rect x="36.6164%" y="389" width="0.1853%" height="15" fill="rgb(241,47,5)"/><text x="36.8664%" y="399.50"></text></g><g><title>core::str::traits::&lt;impl core::ops::index::Index&lt;I&gt; for str&gt;::index (4 samples, 0.11%)</title><rect x="36.6958%" y="373" width="0.1059%" height="15" fill="rgb(233,42,35)"/><text x="36.9458%" y="383.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::index (4 samples, 0.11%)</title><rect x="36.6958%" y="357" width="0.1059%" height="15" fill="rgb(231,13,6)"/><text x="36.9458%" y="367.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get (4 samples, 0.11%)</title><rect x="36.6958%" y="341" width="0.1059%" height="15" fill="rgb(207,181,40)"/><text x="36.9458%" y="351.50"></text></g><g><title>core::str::traits::&lt;impl core::slice::index::SliceIndex&lt;str&gt; for core::ops::range::RangeFrom&lt;usize&gt;&gt;::get_unchecked (4 samples, 0.11%)</title><rect x="36.6958%" y="325" width="0.1059%" height="15" fill="rgb(254,173,49)"/><text x="36.9458%" y="335.50"></text></g><g><title>core::num::dec2flt::parse::eat_digits (30 samples, 0.79%)</title><rect x="37.3047%" y="373" width="0.7943%" height="15" fill="rgb(221,1,38)"/><text x="37.5547%" y="383.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::first (6 samples, 0.16%)</title><rect x="38.0990%" y="373" width="0.1589%" height="15" fill="rgb(206,124,46)"/><text x="38.3490%" y="383.50"></text></g><g><title>csv::string_record::StringRecord::deserialize (402 samples, 10.64%)</title><rect x="27.7469%" y="549" width="10.6434%" height="15" fill="rgb(249,21,11)"/><text x="27.9969%" y="559.50">csv::string_reco..</text></g><g><title>csv::deserializer::deserialize_string_record (402 samples, 10.64%)</title><rect x="27.7469%" y="533" width="10.6434%" height="15" fill="rgb(222,201,40)"/><text x="27.9969%" y="543.50">csv::deserialize..</text></g><g><title>mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize (384 samples, 10.17%)</title><rect x="28.2235%" y="517" width="10.1668%" height="15" fill="rgb(235,61,29)"/><text x="28.4735%" y="527.50">mass::time_seri..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_newtype_struct (384 samples, 10.17%)</title><rect x="28.2235%" y="501" width="10.1668%" height="15" fill="rgb(219,207,3)"/><text x="28.4735%" y="511.50">&lt;&amp;mut csv::dese..</text></g><g><title>&lt;mass::time_series::_::&lt;impl serde::de::Deserialize for mass::time_series::Record&lt;T&gt;&gt;::deserialize::__Visitor&lt;T&gt; as serde::de::Visitor&gt;::visit_newtype_struct (384 samples, 10.17%)</title><rect x="28.2235%" y="485" width="10.1668%" height="15" fill="rgb(222,56,46)"/><text x="28.4735%" y="495.50">&lt;mass::time_ser..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (384 samples, 10.17%)</title><rect x="28.2235%" y="469" width="10.1668%" height="15" fill="rgb(239,76,54)"/><text x="28.4735%" y="479.50">serde::de::impl..</text></g><g><title>&lt;&amp;mut csv::deserializer::DeRecordWrap&lt;T&gt; as serde::de::Deserializer&gt;::deserialize_f64 (384 samples, 10.17%)</title><rect x="28.2235%" y="453" width="10.1668%" height="15" fill="rgb(231,124,27)"/><text x="28.4735%" y="463.50">&lt;&amp;mut csv::dese..</text></g><g><title>core::str::&lt;impl str&gt;::parse (345 samples, 9.13%)</title><rect x="29.2560%" y="437" width="9.1342%" height="15" fill="rgb(249,195,6)"/><text x="29.5060%" y="447.50">core::str::&lt;i..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::FromStr for f64&gt;::from_str (345 samples, 9.13%)</title><rect x="29.2560%" y="421" width="9.1342%" height="15" fill="rgb(237,174,47)"/><text x="29.5060%" y="431.50">core::num::de..</text></g><g><title>core::num::dec2flt::dec2flt (345 samples, 9.13%)</title><rect x="29.2560%" y="405" width="9.1342%" height="15" fill="rgb(206,201,31)"/><text x="29.5060%" y="415.50">core::num::de..</text></g><g><title>core::num::dec2flt::parse::parse_decimal (60 samples, 1.59%)</title><rect x="36.8017%" y="389" width="1.5886%" height="15" fill="rgb(231,57,52)"/><text x="37.0517%" y="399.50"></text></g><g><title>mass_bench::load_series (1,264 samples, 33.47%)</title><rect x="4.9510%" y="693" width="33.4657%" height="15" fill="rgb(248,177,22)"/><text x="5.2010%" y="703.50">mass_bench::load_series</text></g><g><title>core::iter::traits::iterator::Iterator::collect (1,264 samples, 33.47%)</title><rect x="4.9510%" y="677" width="33.4657%" height="15" fill="rgb(215,211,37)"/><text x="5.2010%" y="687.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1,264 samples, 33.47%)</title><rect x="4.9510%" y="661" width="33.4657%" height="15" fill="rgb(241,128,51)"/><text x="5.2010%" y="671.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Fr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,264 samples, 33.47%)</title><rect x="4.9510%" y="645" width="33.4657%" height="15" fill="rgb(227,165,31)"/><text x="5.2010%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1,264 samples, 33.47%)</title><rect x="4.9510%" y="629" width="33.4657%" height="15" fill="rgb(228,167,24)"/><text x="5.2010%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,264 samples, 33.47%)</title><rect x="4.9510%" y="613" width="33.4657%" height="15" fill="rgb(228,143,12)"/><text x="5.2010%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::s..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1,264 samples, 33.47%)</title><rect x="4.9510%" y="597" width="33.4657%" height="15" fill="rgb(249,149,8)"/><text x="5.2010%" y="607.50">alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,264 samples, 33.47%)</title><rect x="4.9510%" y="581" width="33.4657%" height="15" fill="rgb(243,35,44)"/><text x="5.2010%" y="591.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits:..</text></g><g><title>&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,226 samples, 32.46%)</title><rect x="5.9571%" y="565" width="32.4596%" height="15" fill="rgb(246,89,9)"/><text x="6.2071%" y="575.50">&lt;csv::reader::DeserializeRecordsIter&lt;R,D&gt; as core::it..</text></g><g><title>miniz_oxide::inflate::core::apply_match (4 samples, 0.11%)</title><rect x="38.4167%" y="693" width="0.1059%" height="15" fill="rgb(233,213,13)"/><text x="38.6667%" y="703.50"></text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (6 samples, 0.16%)</title><rect x="38.5756%" y="693" width="0.1589%" height="15" fill="rgb(233,141,41)"/><text x="38.8256%" y="703.50"></text></g><g><title>[unknown] (1,438 samples, 38.07%)</title><rect x="0.6884%" y="709" width="38.0725%" height="15" fill="rgb(239,167,4)"/><text x="0.9384%" y="719.50">[unknown]</text></g><g><title>core::ptr::drop_in_place (6 samples, 0.16%)</title><rect x="38.8139%" y="613" width="0.1589%" height="15" fill="rgb(209,217,16)"/><text x="39.0639%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.16%)</title><rect x="38.8139%" y="597" width="0.1589%" height="15" fill="rgb(219,88,35)"/><text x="39.0639%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (6 samples, 0.16%)</title><rect x="38.8139%" y="581" width="0.1589%" height="15" fill="rgb(220,193,23)"/><text x="39.0639%" y="591.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.16%)</title><rect x="38.8139%" y="565" width="0.1589%" height="15" fill="rgb(230,90,52)"/><text x="39.0639%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (6 samples, 0.16%)</title><rect x="38.8139%" y="549" width="0.1589%" height="15" fill="rgb(252,106,19)"/><text x="39.0639%" y="559.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.16%)</title><rect x="38.8139%" y="533" width="0.1589%" height="15" fill="rgb(206,74,20)"/><text x="39.0639%" y="543.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.16%)</title><rect x="38.8139%" y="517" width="0.1589%" height="15" fill="rgb(230,138,44)"/><text x="39.0639%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.16%)</title><rect x="38.8139%" y="501" width="0.1589%" height="15" fill="rgb(235,182,43)"/><text x="39.0639%" y="511.50"></text></g><g><title>__GI_munmap (6 samples, 0.16%)</title><rect x="38.8139%" y="485" width="0.1589%" height="15" fill="rgb(242,16,51)"/><text x="39.0639%" y="495.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.16%)</title><rect x="38.8139%" y="469" width="0.1589%" height="15" fill="rgb(248,9,4)"/><text x="39.0639%" y="479.50"></text></g><g><title>do_syscall_64 (6 samples, 0.16%)</title><rect x="38.8139%" y="453" width="0.1589%" height="15" fill="rgb(210,31,22)"/><text x="39.0639%" y="463.50"></text></g><g><title>__x64_sys_munmap (6 samples, 0.16%)</title><rect x="38.8139%" y="437" width="0.1589%" height="15" fill="rgb(239,54,39)"/><text x="39.0639%" y="447.50"></text></g><g><title>__vm_munmap (6 samples, 0.16%)</title><rect x="38.8139%" y="421" width="0.1589%" height="15" fill="rgb(230,99,41)"/><text x="39.0639%" y="431.50"></text></g><g><title>__do_munmap (6 samples, 0.16%)</title><rect x="38.8139%" y="405" width="0.1589%" height="15" fill="rgb(253,106,12)"/><text x="39.0639%" y="415.50"></text></g><g><title>unmap_region (6 samples, 0.16%)</title><rect x="38.8139%" y="389" width="0.1589%" height="15" fill="rgb(213,46,41)"/><text x="39.0639%" y="399.50"></text></g><g><title>unmap_vmas (6 samples, 0.16%)</title><rect x="38.8139%" y="373" width="0.1589%" height="15" fill="rgb(215,133,35)"/><text x="39.0639%" y="383.50"></text></g><g><title>unmap_single_vma (6 samples, 0.16%)</title><rect x="38.8139%" y="357" width="0.1589%" height="15" fill="rgb(213,28,5)"/><text x="39.0639%" y="367.50"></text></g><g><title>unmap_page_range (6 samples, 0.16%)</title><rect x="38.8139%" y="341" width="0.1589%" height="15" fill="rgb(215,77,49)"/><text x="39.0639%" y="351.50"></text></g><g><title>zap_pte_range.isra.0 (6 samples, 0.16%)</title><rect x="38.8139%" y="325" width="0.1589%" height="15" fill="rgb(248,100,22)"/><text x="39.0639%" y="335.50"></text></g><g><title>tlb_flush_mmu (5 samples, 0.13%)</title><rect x="38.8403%" y="309" width="0.1324%" height="15" fill="rgb(208,67,9)"/><text x="39.0903%" y="319.50"></text></g><g><title>free_pages_and_swap_cache (5 samples, 0.13%)</title><rect x="38.8403%" y="293" width="0.1324%" height="15" fill="rgb(219,133,21)"/><text x="39.0903%" y="303.50"></text></g><g><title>release_pages (4 samples, 0.11%)</title><rect x="38.8668%" y="277" width="0.1059%" height="15" fill="rgb(246,46,29)"/><text x="39.1168%" y="287.50"></text></g><g><title>__mod_lruvec_state (4 samples, 0.11%)</title><rect x="39.0522%" y="69" width="0.1059%" height="15" fill="rgb(246,185,52)"/><text x="39.3022%" y="79.50"></text></g><g><title>free_unref_page_list (6 samples, 0.16%)</title><rect x="39.1845%" y="69" width="0.1589%" height="15" fill="rgb(252,136,11)"/><text x="39.4345%" y="79.50"></text></g><g><title>free_unref_page_commit (4 samples, 0.11%)</title><rect x="39.2375%" y="53" width="0.1059%" height="15" fill="rgb(219,138,53)"/><text x="39.4875%" y="63.50"></text></g><g><title>free_pcppages_bulk (4 samples, 0.11%)</title><rect x="39.2375%" y="37" width="0.1059%" height="15" fill="rgb(211,51,23)"/><text x="39.4875%" y="47.50"></text></g><g><title>tlb_finish_mmu (18 samples, 0.48%)</title><rect x="38.9727%" y="133" width="0.4766%" height="15" fill="rgb(247,221,28)"/><text x="39.2227%" y="143.50"></text></g><g><title>tlb_flush_mmu (18 samples, 0.48%)</title><rect x="38.9727%" y="117" width="0.4766%" height="15" fill="rgb(251,222,45)"/><text x="39.2227%" y="127.50"></text></g><g><title>free_pages_and_swap_cache (18 samples, 0.48%)</title><rect x="38.9727%" y="101" width="0.4766%" height="15" fill="rgb(217,162,53)"/><text x="39.2227%" y="111.50"></text></g><g><title>release_pages (18 samples, 0.48%)</title><rect x="38.9727%" y="85" width="0.4766%" height="15" fill="rgb(229,93,14)"/><text x="39.2227%" y="95.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.71%)</title><rect x="38.9727%" y="421" width="0.7149%" height="15" fill="rgb(209,67,49)"/><text x="39.2227%" y="431.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.71%)</title><rect x="38.9727%" y="405" width="0.7149%" height="15" fill="rgb(213,87,29)"/><text x="39.2227%" y="415.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.71%)</title><rect x="38.9727%" y="389" width="0.7149%" height="15" fill="rgb(205,151,52)"/><text x="39.2227%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (27 samples, 0.71%)</title><rect x="38.9727%" y="373" width="0.7149%" height="15" fill="rgb(253,215,39)"/><text x="39.2227%" y="383.50"></text></g><g><title>alloc::alloc::dealloc (27 samples, 0.71%)</title><rect x="38.9727%" y="357" width="0.7149%" height="15" fill="rgb(221,220,41)"/><text x="39.2227%" y="367.50"></text></g><g><title>__rdl_dealloc (27 samples, 0.71%)</title><rect x="38.9727%" y="341" width="0.7149%" height="15" fill="rgb(218,133,21)"/><text x="39.2227%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (27 samples, 0.71%)</title><rect x="38.9727%" y="325" width="0.7149%" height="15" fill="rgb(221,193,43)"/><text x="39.2227%" y="335.50"></text></g><g><title>_int_free (27 samples, 0.71%)</title><rect x="38.9727%" y="309" width="0.7149%" height="15" fill="rgb(240,128,52)"/><text x="39.2227%" y="319.50"></text></g><g><title>systrim (27 samples, 0.71%)</title><rect x="38.9727%" y="293" width="0.7149%" height="15" fill="rgb(253,114,12)"/><text x="39.2227%" y="303.50"></text></g><g><title>__GI___default_morecore (27 samples, 0.71%)</title><rect x="38.9727%" y="277" width="0.7149%" height="15" fill="rgb(215,223,47)"/><text x="39.2227%" y="287.50"></text></g><g><title>__GI___sbrk (27 samples, 0.71%)</title><rect x="38.9727%" y="261" width="0.7149%" height="15" fill="rgb(248,225,23)"/><text x="39.2227%" y="271.50"></text></g><g><title>__GI___sbrk (27 samples, 0.71%)</title><rect x="38.9727%" y="245" width="0.7149%" height="15" fill="rgb(250,108,0)"/><text x="39.2227%" y="255.50"></text></g><g><title>__brk (27 samples, 0.71%)</title><rect x="38.9727%" y="229" width="0.7149%" height="15" fill="rgb(228,208,7)"/><text x="39.2227%" y="239.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (27 samples, 0.71%)</title><rect x="38.9727%" y="213" width="0.7149%" height="15" fill="rgb(244,45,10)"/><text x="39.2227%" y="223.50"></text></g><g><title>do_syscall_64 (27 samples, 0.71%)</title><rect x="38.9727%" y="197" width="0.7149%" height="15" fill="rgb(207,125,25)"/><text x="39.2227%" y="207.50"></text></g><g><title>__x64_sys_brk (27 samples, 0.71%)</title><rect x="38.9727%" y="181" width="0.7149%" height="15" fill="rgb(210,195,18)"/><text x="39.2227%" y="191.50"></text></g><g><title>__do_munmap (27 samples, 0.71%)</title><rect x="38.9727%" y="165" width="0.7149%" height="15" fill="rgb(249,80,12)"/><text x="39.2227%" y="175.50"></text></g><g><title>unmap_region (27 samples, 0.71%)</title><rect x="38.9727%" y="149" width="0.7149%" height="15" fill="rgb(221,65,9)"/><text x="39.2227%" y="159.50"></text></g><g><title>unmap_vmas (9 samples, 0.24%)</title><rect x="39.4493%" y="133" width="0.2383%" height="15" fill="rgb(235,49,36)"/><text x="39.6993%" y="143.50"></text></g><g><title>unmap_single_vma (9 samples, 0.24%)</title><rect x="39.4493%" y="117" width="0.2383%" height="15" fill="rgb(225,32,20)"/><text x="39.6993%" y="127.50"></text></g><g><title>unmap_page_range (9 samples, 0.24%)</title><rect x="39.4493%" y="101" width="0.2383%" height="15" fill="rgb(215,141,46)"/><text x="39.6993%" y="111.50"></text></g><g><title>zap_pte_range.isra.0 (9 samples, 0.24%)</title><rect x="39.4493%" y="85" width="0.2383%" height="15" fill="rgb(250,160,47)"/><text x="39.6993%" y="95.50"></text></g><g><title>mass::math::dist (14 samples, 0.37%)</title><rect x="39.6876%" y="405" width="0.3707%" height="15" fill="rgb(216,222,40)"/><text x="39.9376%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (14 samples, 0.37%)</title><rect x="39.6876%" y="389" width="0.3707%" height="15" fill="rgb(234,217,39)"/><text x="39.9376%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (14 samples, 0.37%)</title><rect x="39.6876%" y="373" width="0.3707%" height="15" fill="rgb(207,178,40)"/><text x="39.9376%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (14 samples, 0.37%)</title><rect x="39.6876%" y="357" width="0.3707%" height="15" fill="rgb(221,136,13)"/><text x="39.9376%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (14 samples, 0.37%)</title><rect x="39.6876%" y="341" width="0.3707%" height="15" fill="rgb(249,199,10)"/><text x="39.9376%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (14 samples, 0.37%)</title><rect x="39.6876%" y="325" width="0.3707%" height="15" fill="rgb(249,222,13)"/><text x="39.9376%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (14 samples, 0.37%)</title><rect x="39.6876%" y="309" width="0.3707%" height="15" fill="rgb(244,185,38)"/><text x="39.9376%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.37%)</title><rect x="39.6876%" y="293" width="0.3707%" height="15" fill="rgb(236,202,9)"/><text x="39.9376%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.37%)</title><rect x="39.6876%" y="277" width="0.3707%" height="15" fill="rgb(250,229,37)"/><text x="39.9376%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (14 samples, 0.37%)</title><rect x="39.6876%" y="261" width="0.3707%" height="15" fill="rgb(206,174,23)"/><text x="39.9376%" y="271.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (14 samples, 0.37%)</title><rect x="39.6876%" y="245" width="0.3707%" height="15" fill="rgb(211,33,43)"/><text x="39.9376%" y="255.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (14 samples, 0.37%)</title><rect x="39.6876%" y="229" width="0.3707%" height="15" fill="rgb(245,58,50)"/><text x="39.9376%" y="239.50"></text></g><g><title>mass::math::dist::{{closure}} (11 samples, 0.29%)</title><rect x="39.7670%" y="213" width="0.2912%" height="15" fill="rgb(244,68,36)"/><text x="40.0170%" y="223.50"></text></g><g><title>_raw_spin_lock (4 samples, 0.11%)</title><rect x="41.1967%" y="229" width="0.1059%" height="15" fill="rgb(232,229,15)"/><text x="41.4467%" y="239.50"></text></g><g><title>clear_page_erms (8 samples, 0.21%)</title><rect x="41.5939%" y="165" width="0.2118%" height="15" fill="rgb(254,30,23)"/><text x="41.8439%" y="175.50"></text></g><g><title>__alloc_pages_nodemask (16 samples, 0.42%)</title><rect x="41.5144%" y="197" width="0.4236%" height="15" fill="rgb(235,160,14)"/><text x="41.7644%" y="207.50"></text></g><g><title>get_page_from_freelist (15 samples, 0.40%)</title><rect x="41.5409%" y="181" width="0.3971%" height="15" fill="rgb(212,155,44)"/><text x="41.7909%" y="191.50"></text></g><g><title>rmqueue (5 samples, 0.13%)</title><rect x="41.8057%" y="165" width="0.1324%" height="15" fill="rgb(226,2,50)"/><text x="42.0557%" y="175.50"></text></g><g><title>alloc_pages_vma (19 samples, 0.50%)</title><rect x="41.4615%" y="213" width="0.5030%" height="15" fill="rgb(234,177,6)"/><text x="41.7115%" y="223.50"></text></g><g><title>__pagevec_lru_add_fn (6 samples, 0.16%)</title><rect x="41.9910%" y="165" width="0.1589%" height="15" fill="rgb(217,24,9)"/><text x="42.2410%" y="175.50"></text></g><g><title>lru_cache_add_active_or_unevictable (8 samples, 0.21%)</title><rect x="41.9910%" y="213" width="0.2118%" height="15" fill="rgb(220,13,46)"/><text x="42.2410%" y="223.50"></text></g><g><title>__lru_cache_add (8 samples, 0.21%)</title><rect x="41.9910%" y="197" width="0.2118%" height="15" fill="rgb(239,221,27)"/><text x="42.2410%" y="207.50"></text></g><g><title>pagevec_lru_move_fn (8 samples, 0.21%)</title><rect x="41.9910%" y="181" width="0.2118%" height="15" fill="rgb(222,198,25)"/><text x="42.2410%" y="191.50"></text></g><g><title>do_anonymous_page (41 samples, 1.09%)</title><rect x="41.3026%" y="229" width="1.0855%" height="15" fill="rgb(211,99,13)"/><text x="41.5526%" y="239.50"></text></g><g><title>handle_mm_fault (49 samples, 1.30%)</title><rect x="41.1173%" y="261" width="1.2973%" height="15" fill="rgb(232,111,31)"/><text x="41.3673%" y="271.50"></text></g><g><title>__handle_mm_fault (46 samples, 1.22%)</title><rect x="41.1967%" y="245" width="1.2179%" height="15" fill="rgb(245,82,37)"/><text x="41.4467%" y="255.50"></text></g><g><title>do_user_addr_fault (55 samples, 1.46%)</title><rect x="41.0114%" y="277" width="1.4562%" height="15" fill="rgb(227,149,46)"/><text x="41.2614%" y="287.50"></text></g><g><title>page_fault (57 samples, 1.51%)</title><rect x="40.9849%" y="325" width="1.5091%" height="15" fill="rgb(218,36,50)"/><text x="41.2349%" y="335.50"></text></g><g><title>do_page_fault (57 samples, 1.51%)</title><rect x="40.9849%" y="309" width="1.5091%" height="15" fill="rgb(226,80,48)"/><text x="41.2349%" y="319.50"></text></g><g><title>__do_page_fault (56 samples, 1.48%)</title><rect x="41.0114%" y="293" width="1.4827%" height="15" fill="rgb(238,224,15)"/><text x="41.2614%" y="303.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (21 samples, 0.56%)</title><rect x="42.4940%" y="325" width="0.5560%" height="15" fill="rgb(241,136,10)"/><text x="42.7440%" y="335.50"></text></g><g><title>prepare_exit_to_usermode (19 samples, 0.50%)</title><rect x="42.5470%" y="309" width="0.5030%" height="15" fill="rgb(208,32,45)"/><text x="42.7970%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_with (120 samples, 3.18%)</title><rect x="40.0847%" y="357" width="3.1771%" height="15" fill="rgb(207,135,9)"/><text x="40.3347%" y="367.50">all..</text></g><g><title>core::ptr::write (120 samples, 3.18%)</title><rect x="40.0847%" y="341" width="3.1771%" height="15" fill="rgb(206,86,44)"/><text x="40.3347%" y="351.50">cor..</text></g><g><title>sync_regs (8 samples, 0.21%)</title><rect x="43.0500%" y="325" width="0.2118%" height="15" fill="rgb(245,177,15)"/><text x="43.3000%" y="335.50"></text></g><g><title>alloc::vec::from_elem (124 samples, 3.28%)</title><rect x="40.0847%" y="389" width="3.2830%" height="15" fill="rgb(206,64,50)"/><text x="40.3347%" y="399.50">all..</text></g><g><title>&lt;T as alloc::vec::SpecFromElem&gt;::from_elem (124 samples, 3.28%)</title><rect x="40.0847%" y="373" width="3.2830%" height="15" fill="rgb(234,36,40)"/><text x="40.3347%" y="383.50">&lt;T ..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.11%)</title><rect x="43.2618%" y="357" width="0.1059%" height="15" fill="rgb(213,64,8)"/><text x="43.5118%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (4 samples, 0.11%)</title><rect x="43.2618%" y="341" width="0.1059%" height="15" fill="rgb(210,75,36)"/><text x="43.5118%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.11%)</title><rect x="43.2618%" y="325" width="0.1059%" height="15" fill="rgb(229,88,21)"/><text x="43.5118%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.11%)</title><rect x="43.2618%" y="309" width="0.1059%" height="15" fill="rgb(252,204,47)"/><text x="43.5118%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (4 samples, 0.11%)</title><rect x="43.2618%" y="293" width="0.1059%" height="15" fill="rgb(208,77,27)"/><text x="43.5118%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.11%)</title><rect x="43.2618%" y="277" width="0.1059%" height="15" fill="rgb(221,76,26)"/><text x="43.5118%" y="287.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.11%)</title><rect x="43.2618%" y="261" width="0.1059%" height="15" fill="rgb(225,139,18)"/><text x="43.5118%" y="271.50"></text></g><g><title>__rdl_alloc (4 samples, 0.11%)</title><rect x="43.2618%" y="245" width="0.1059%" height="15" fill="rgb(230,137,11)"/><text x="43.5118%" y="255.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.11%)</title><rect x="43.2618%" y="229" width="0.1059%" height="15" fill="rgb(212,28,1)"/><text x="43.5118%" y="239.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.11%)</title><rect x="43.2618%" y="213" width="0.1059%" height="15" fill="rgb(248,164,17)"/><text x="43.5118%" y="223.50"></text></g><g><title>_int_malloc (4 samples, 0.11%)</title><rect x="43.2618%" y="197" width="0.1059%" height="15" fill="rgb(222,171,42)"/><text x="43.5118%" y="207.50"></text></g><g><title>sysmalloc (4 samples, 0.11%)</title><rect x="43.2618%" y="181" width="0.1059%" height="15" fill="rgb(243,84,45)"/><text x="43.5118%" y="191.50"></text></g><g><title>__GI___default_morecore (4 samples, 0.11%)</title><rect x="43.4207%" y="181" width="0.1059%" height="15" fill="rgb(252,49,23)"/><text x="43.6707%" y="191.50"></text></g><g><title>__GI___sbrk (4 samples, 0.11%)</title><rect x="43.4207%" y="165" width="0.1059%" height="15" fill="rgb(215,19,7)"/><text x="43.6707%" y="175.50"></text></g><g><title>__GI___sbrk (4 samples, 0.11%)</title><rect x="43.4207%" y="149" width="0.1059%" height="15" fill="rgb(238,81,41)"/><text x="43.6707%" y="159.50"></text></g><g><title>__brk (4 samples, 0.11%)</title><rect x="43.4207%" y="133" width="0.1059%" height="15" fill="rgb(210,199,37)"/><text x="43.6707%" y="143.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.11%)</title><rect x="43.4207%" y="117" width="0.1059%" height="15" fill="rgb(244,192,49)"/><text x="43.6707%" y="127.50"></text></g><g><title>do_syscall_64 (4 samples, 0.11%)</title><rect x="43.4207%" y="101" width="0.1059%" height="15" fill="rgb(226,211,11)"/><text x="43.6707%" y="111.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (8 samples, 0.21%)</title><rect x="43.3678%" y="309" width="0.2118%" height="15" fill="rgb(236,162,54)"/><text x="43.6178%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (8 samples, 0.21%)</title><rect x="43.3678%" y="293" width="0.2118%" height="15" fill="rgb(220,229,9)"/><text x="43.6178%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (8 samples, 0.21%)</title><rect x="43.3678%" y="277" width="0.2118%" height="15" fill="rgb(250,87,22)"/><text x="43.6178%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (8 samples, 0.21%)</title><rect x="43.3678%" y="261" width="0.2118%" height="15" fill="rgb(239,43,17)"/><text x="43.6178%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.21%)</title><rect x="43.3678%" y="245" width="0.2118%" height="15" fill="rgb(231,177,25)"/><text x="43.6178%" y="255.50"></text></g><g><title>__GI___libc_malloc (8 samples, 0.21%)</title><rect x="43.3678%" y="229" width="0.2118%" height="15" fill="rgb(219,179,1)"/><text x="43.6178%" y="239.50"></text></g><g><title>_int_malloc (7 samples, 0.19%)</title><rect x="43.3942%" y="213" width="0.1853%" height="15" fill="rgb(238,219,53)"/><text x="43.6442%" y="223.50"></text></g><g><title>sysmalloc (7 samples, 0.19%)</title><rect x="43.3942%" y="197" width="0.1853%" height="15" fill="rgb(232,167,36)"/><text x="43.6442%" y="207.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.13%)</title><rect x="43.8443%" y="261" width="0.1324%" height="15" fill="rgb(244,19,51)"/><text x="44.0943%" y="271.50"></text></g><g><title>_raw_spin_lock (4 samples, 0.11%)</title><rect x="45.0622%" y="101" width="0.1059%" height="15" fill="rgb(224,6,22)"/><text x="45.3122%" y="111.50"></text></g><g><title>clear_page_erms (7 samples, 0.19%)</title><rect x="45.3270%" y="37" width="0.1853%" height="15" fill="rgb(224,145,5)"/><text x="45.5770%" y="47.50"></text></g><g><title>__alloc_pages_nodemask (11 samples, 0.29%)</title><rect x="45.2740%" y="69" width="0.2912%" height="15" fill="rgb(234,130,49)"/><text x="45.5240%" y="79.50"></text></g><g><title>get_page_from_freelist (10 samples, 0.26%)</title><rect x="45.3005%" y="53" width="0.2648%" height="15" fill="rgb(254,6,2)"/><text x="45.5505%" y="63.50"></text></g><g><title>alloc_pages_vma (13 samples, 0.34%)</title><rect x="45.2476%" y="85" width="0.3442%" height="15" fill="rgb(208,96,46)"/><text x="45.4976%" y="95.50"></text></g><g><title>__pagevec_lru_add_fn (7 samples, 0.19%)</title><rect x="45.5917%" y="37" width="0.1853%" height="15" fill="rgb(239,3,39)"/><text x="45.8417%" y="47.50"></text></g><g><title>lru_cache_add_active_or_unevictable (10 samples, 0.26%)</title><rect x="45.5917%" y="85" width="0.2648%" height="15" fill="rgb(233,210,1)"/><text x="45.8417%" y="95.50"></text></g><g><title>__lru_cache_add (10 samples, 0.26%)</title><rect x="45.5917%" y="69" width="0.2648%" height="15" fill="rgb(244,137,37)"/><text x="45.8417%" y="79.50"></text></g><g><title>pagevec_lru_move_fn (10 samples, 0.26%)</title><rect x="45.5917%" y="53" width="0.2648%" height="15" fill="rgb(240,136,2)"/><text x="45.8417%" y="63.50"></text></g><g><title>do_user_addr_fault (40 samples, 1.06%)</title><rect x="44.9563%" y="149" width="1.0590%" height="15" fill="rgb(239,18,37)"/><text x="45.2063%" y="159.50"></text></g><g><title>handle_mm_fault (40 samples, 1.06%)</title><rect x="44.9563%" y="133" width="1.0590%" height="15" fill="rgb(218,185,22)"/><text x="45.2063%" y="143.50"></text></g><g><title>__handle_mm_fault (39 samples, 1.03%)</title><rect x="44.9828%" y="117" width="1.0326%" height="15" fill="rgb(225,218,4)"/><text x="45.2328%" y="127.50"></text></g><g><title>do_anonymous_page (32 samples, 0.85%)</title><rect x="45.1681%" y="101" width="0.8472%" height="15" fill="rgb(230,182,32)"/><text x="45.4181%" y="111.50"></text></g><g><title>page_fault (46 samples, 1.22%)</title><rect x="44.9034%" y="197" width="1.2179%" height="15" fill="rgb(242,56,43)"/><text x="45.1534%" y="207.50"></text></g><g><title>do_page_fault (45 samples, 1.19%)</title><rect x="44.9298%" y="181" width="1.1914%" height="15" fill="rgb(233,99,24)"/><text x="45.1798%" y="191.50"></text></g><g><title>__do_page_fault (44 samples, 1.16%)</title><rect x="44.9563%" y="165" width="1.1649%" height="15" fill="rgb(234,209,42)"/><text x="45.2063%" y="175.50"></text></g><g><title>up_read (4 samples, 0.11%)</title><rect x="46.0154%" y="149" width="0.1059%" height="15" fill="rgb(227,7,12)"/><text x="46.2654%" y="159.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (28 samples, 0.74%)</title><rect x="46.1213%" y="197" width="0.7413%" height="15" fill="rgb(245,203,43)"/><text x="46.3713%" y="207.50"></text></g><g><title>prepare_exit_to_usermode (28 samples, 0.74%)</title><rect x="46.1213%" y="181" width="0.7413%" height="15" fill="rgb(238,205,33)"/><text x="46.3713%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (119 samples, 3.15%)</title><rect x="43.9767%" y="245" width="3.1506%" height="15" fill="rgb(231,56,7)"/><text x="44.2267%" y="255.50">cor..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (119 samples, 3.15%)</title><rect x="43.9767%" y="229" width="3.1506%" height="15" fill="rgb(244,186,29)"/><text x="44.2267%" y="239.50">&lt;al..</text></g><g><title>core::ptr::write (118 samples, 3.12%)</title><rect x="44.0032%" y="213" width="3.1242%" height="15" fill="rgb(234,111,31)"/><text x="44.2532%" y="223.50">cor..</text></g><g><title>sync_regs (10 samples, 0.26%)</title><rect x="46.8626%" y="197" width="0.2648%" height="15" fill="rgb(241,149,10)"/><text x="47.1126%" y="207.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (154 samples, 4.08%)</title><rect x="43.3678%" y="341" width="4.0773%" height="15" fill="rgb(249,206,44)"/><text x="43.6178%" y="351.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (154 samples, 4.08%)</title><rect x="43.3678%" y="325" width="4.0773%" height="15" fill="rgb(251,153,30)"/><text x="43.6178%" y="335.50">&lt;all..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (146 samples, 3.87%)</title><rect x="43.5796%" y="309" width="3.8655%" height="15" fill="rgb(239,152,38)"/><text x="43.8296%" y="319.50">core..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (146 samples, 3.87%)</title><rect x="43.5796%" y="293" width="3.8655%" height="15" fill="rgb(249,139,47)"/><text x="43.8296%" y="303.50">&lt;cor..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (146 samples, 3.87%)</title><rect x="43.5796%" y="277" width="3.8655%" height="15" fill="rgb(244,64,35)"/><text x="43.8296%" y="287.50">core..</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (131 samples, 3.47%)</title><rect x="43.9767%" y="261" width="3.4684%" height="15" fill="rgb(216,46,15)"/><text x="44.2267%" y="271.50">cor..</text></g><g><title>mass::math::fft_mult::{{closure}} (12 samples, 0.32%)</title><rect x="47.1273%" y="245" width="0.3177%" height="15" fill="rgb(250,74,19)"/><text x="47.3773%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 0.21%)</title><rect x="47.4451%" y="309" width="0.2118%" height="15" fill="rgb(249,42,33)"/><text x="47.6951%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (8 samples, 0.21%)</title><rect x="47.4451%" y="293" width="0.2118%" height="15" fill="rgb(242,149,17)"/><text x="47.6951%" y="303.50"></text></g><g><title>&lt;alloc::vec::IntoIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::get_unchecked (8 samples, 0.21%)</title><rect x="47.4451%" y="277" width="0.2118%" height="15" fill="rgb(244,29,21)"/><text x="47.6951%" y="287.50"></text></g><g><title>core::ptr::read (8 samples, 0.21%)</title><rect x="47.4451%" y="261" width="0.2118%" height="15" fill="rgb(220,130,37)"/><text x="47.6951%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.21%)</title><rect x="47.4451%" y="245" width="0.2118%" height="15" fill="rgb(211,67,2)"/><text x="47.6951%" y="255.50"></text></g><g><title>alloc::vec::write_in_place_with_drop::{{closure}} (4 samples, 0.11%)</title><rect x="47.6569%" y="293" width="0.1059%" height="15" fill="rgb(235,68,52)"/><text x="47.9069%" y="303.50"></text></g><g><title>core::ptr::write (4 samples, 0.11%)</title><rect x="47.6569%" y="277" width="0.1059%" height="15" fill="rgb(246,142,3)"/><text x="47.9069%" y="287.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.11%)</title><rect x="47.8422%" y="261" width="0.1059%" height="15" fill="rgb(241,25,7)"/><text x="48.0922%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (174 samples, 4.61%)</title><rect x="43.3678%" y="389" width="4.6068%" height="15" fill="rgb(242,119,39)"/><text x="43.6178%" y="399.50">core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (174 samples, 4.61%)</title><rect x="43.3678%" y="373" width="4.6068%" height="15" fill="rgb(241,98,45)"/><text x="43.6178%" y="383.50">&lt;allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (174 samples, 4.61%)</title><rect x="43.3678%" y="357" width="4.6068%" height="15" fill="rgb(254,28,30)"/><text x="43.6178%" y="367.50">&lt;allo..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (20 samples, 0.53%)</title><rect x="47.4451%" y="341" width="0.5295%" height="15" fill="rgb(241,142,54)"/><text x="47.6951%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (20 samples, 0.53%)</title><rect x="47.4451%" y="325" width="0.5295%" height="15" fill="rgb(222,85,15)"/><text x="47.6951%" y="335.50"></text></g><g><title>core::iter::adapters::map_try_fold::{{closure}} (12 samples, 0.32%)</title><rect x="47.6569%" y="309" width="0.3177%" height="15" fill="rgb(210,85,47)"/><text x="47.9069%" y="319.50"></text></g><g><title>mass::math::fft_mult::{{closure}} (8 samples, 0.21%)</title><rect x="47.7628%" y="293" width="0.2118%" height="15" fill="rgb(224,206,25)"/><text x="48.0128%" y="303.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (8 samples, 0.21%)</title><rect x="47.7628%" y="277" width="0.2118%" height="15" fill="rgb(243,201,19)"/><text x="48.0128%" y="287.50"></text></g><g><title>tlb_finish_mmu (9 samples, 0.24%)</title><rect x="48.0275%" y="101" width="0.2383%" height="15" fill="rgb(236,59,4)"/><text x="48.2775%" y="111.50"></text></g><g><title>tlb_flush_mmu (9 samples, 0.24%)</title><rect x="48.0275%" y="85" width="0.2383%" height="15" fill="rgb(254,179,45)"/><text x="48.2775%" y="95.50"></text></g><g><title>free_pages_and_swap_cache (9 samples, 0.24%)</title><rect x="48.0275%" y="69" width="0.2383%" height="15" fill="rgb(226,14,10)"/><text x="48.2775%" y="79.50"></text></g><g><title>release_pages (9 samples, 0.24%)</title><rect x="48.0275%" y="53" width="0.2383%" height="15" fill="rgb(244,27,41)"/><text x="48.2775%" y="63.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.37%)</title><rect x="47.9746%" y="357" width="0.3707%" height="15" fill="rgb(235,35,32)"/><text x="48.2246%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (14 samples, 0.37%)</title><rect x="47.9746%" y="341" width="0.3707%" height="15" fill="rgb(218,68,31)"/><text x="48.2246%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (14 samples, 0.37%)</title><rect x="47.9746%" y="325" width="0.3707%" height="15" fill="rgb(207,120,37)"/><text x="48.2246%" y="335.50"></text></g><g><title>__rdl_dealloc (14 samples, 0.37%)</title><rect x="47.9746%" y="309" width="0.3707%" height="15" fill="rgb(227,98,0)"/><text x="48.2246%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (14 samples, 0.37%)</title><rect x="47.9746%" y="293" width="0.3707%" height="15" fill="rgb(207,7,3)"/><text x="48.2246%" y="303.50"></text></g><g><title>_int_free (14 samples, 0.37%)</title><rect x="47.9746%" y="277" width="0.3707%" height="15" fill="rgb(206,98,19)"/><text x="48.2246%" y="287.50"></text></g><g><title>systrim (14 samples, 0.37%)</title><rect x="47.9746%" y="261" width="0.3707%" height="15" fill="rgb(217,5,26)"/><text x="48.2246%" y="271.50"></text></g><g><title>__GI___default_morecore (14 samples, 0.37%)</title><rect x="47.9746%" y="245" width="0.3707%" height="15" fill="rgb(235,190,38)"/><text x="48.2246%" y="255.50"></text></g><g><title>__GI___sbrk (14 samples, 0.37%)</title><rect x="47.9746%" y="229" width="0.3707%" height="15" fill="rgb(247,86,24)"/><text x="48.2246%" y="239.50"></text></g><g><title>__GI___sbrk (14 samples, 0.37%)</title><rect x="47.9746%" y="213" width="0.3707%" height="15" fill="rgb(205,101,16)"/><text x="48.2246%" y="223.50"></text></g><g><title>__brk (14 samples, 0.37%)</title><rect x="47.9746%" y="197" width="0.3707%" height="15" fill="rgb(246,168,33)"/><text x="48.2246%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (14 samples, 0.37%)</title><rect x="47.9746%" y="181" width="0.3707%" height="15" fill="rgb(231,114,1)"/><text x="48.2246%" y="191.50"></text></g><g><title>do_syscall_64 (14 samples, 0.37%)</title><rect x="47.9746%" y="165" width="0.3707%" height="15" fill="rgb(207,184,53)"/><text x="48.2246%" y="175.50"></text></g><g><title>__x64_sys_brk (14 samples, 0.37%)</title><rect x="47.9746%" y="149" width="0.3707%" height="15" fill="rgb(224,95,51)"/><text x="48.2246%" y="159.50"></text></g><g><title>__do_munmap (13 samples, 0.34%)</title><rect x="48.0011%" y="133" width="0.3442%" height="15" fill="rgb(212,188,45)"/><text x="48.2511%" y="143.50"></text></g><g><title>unmap_region (12 samples, 0.32%)</title><rect x="48.0275%" y="117" width="0.3177%" height="15" fill="rgb(223,154,38)"/><text x="48.2775%" y="127.50"></text></g><g><title>tlb_finish_mmu (16 samples, 0.42%)</title><rect x="48.5041%" y="85" width="0.4236%" height="15" fill="rgb(251,22,52)"/><text x="48.7541%" y="95.50"></text></g><g><title>tlb_flush_mmu (16 samples, 0.42%)</title><rect x="48.5041%" y="69" width="0.4236%" height="15" fill="rgb(229,209,22)"/><text x="48.7541%" y="79.50"></text></g><g><title>free_pages_and_swap_cache (16 samples, 0.42%)</title><rect x="48.5041%" y="53" width="0.4236%" height="15" fill="rgb(234,138,34)"/><text x="48.7541%" y="63.50"></text></g><g><title>release_pages (13 samples, 0.34%)</title><rect x="48.5835%" y="37" width="0.3442%" height="15" fill="rgb(212,95,11)"/><text x="48.8335%" y="47.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 1.09%)</title><rect x="47.9746%" y="389" width="1.0855%" height="15" fill="rgb(240,179,47)"/><text x="48.2246%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (41 samples, 1.09%)</title><rect x="47.9746%" y="373" width="1.0855%" height="15" fill="rgb(240,163,11)"/><text x="48.2246%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.71%)</title><rect x="48.3452%" y="357" width="0.7149%" height="15" fill="rgb(236,37,12)"/><text x="48.5952%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.71%)</title><rect x="48.3452%" y="341" width="0.7149%" height="15" fill="rgb(232,164,16)"/><text x="48.5952%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.71%)</title><rect x="48.3452%" y="325" width="0.7149%" height="15" fill="rgb(244,205,15)"/><text x="48.5952%" y="335.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (27 samples, 0.71%)</title><rect x="48.3452%" y="309" width="0.7149%" height="15" fill="rgb(223,117,47)"/><text x="48.5952%" y="319.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (27 samples, 0.71%)</title><rect x="48.3452%" y="293" width="0.7149%" height="15" fill="rgb(244,107,35)"/><text x="48.5952%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.71%)</title><rect x="48.3452%" y="277" width="0.7149%" height="15" fill="rgb(205,140,8)"/><text x="48.5952%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (27 samples, 0.71%)</title><rect x="48.3452%" y="261" width="0.7149%" height="15" fill="rgb(228,84,46)"/><text x="48.5952%" y="271.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (27 samples, 0.71%)</title><rect x="48.3452%" y="245" width="0.7149%" height="15" fill="rgb(254,188,9)"/><text x="48.5952%" y="255.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (26 samples, 0.69%)</title><rect x="48.3717%" y="229" width="0.6884%" height="15" fill="rgb(206,112,54)"/><text x="48.6217%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (26 samples, 0.69%)</title><rect x="48.3717%" y="213" width="0.6884%" height="15" fill="rgb(216,84,49)"/><text x="48.6217%" y="223.50"></text></g><g><title>__GI_munmap (26 samples, 0.69%)</title><rect x="48.3717%" y="197" width="0.6884%" height="15" fill="rgb(214,194,35)"/><text x="48.6217%" y="207.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (26 samples, 0.69%)</title><rect x="48.3717%" y="181" width="0.6884%" height="15" fill="rgb(249,28,3)"/><text x="48.6217%" y="191.50"></text></g><g><title>do_syscall_64 (26 samples, 0.69%)</title><rect x="48.3717%" y="165" width="0.6884%" height="15" fill="rgb(222,56,52)"/><text x="48.6217%" y="175.50"></text></g><g><title>__x64_sys_munmap (25 samples, 0.66%)</title><rect x="48.3982%" y="149" width="0.6619%" height="15" fill="rgb(245,217,50)"/><text x="48.6482%" y="159.50"></text></g><g><title>__vm_munmap (25 samples, 0.66%)</title><rect x="48.3982%" y="133" width="0.6619%" height="15" fill="rgb(213,201,24)"/><text x="48.6482%" y="143.50"></text></g><g><title>__do_munmap (25 samples, 0.66%)</title><rect x="48.3982%" y="117" width="0.6619%" height="15" fill="rgb(248,116,28)"/><text x="48.6482%" y="127.50"></text></g><g><title>unmap_region (22 samples, 0.58%)</title><rect x="48.4776%" y="101" width="0.5825%" height="15" fill="rgb(219,72,43)"/><text x="48.7276%" y="111.50"></text></g><g><title>unmap_vmas (5 samples, 0.13%)</title><rect x="48.9277%" y="85" width="0.1324%" height="15" fill="rgb(209,138,14)"/><text x="49.1777%" y="95.50"></text></g><g><title>unmap_single_vma (5 samples, 0.13%)</title><rect x="48.9277%" y="69" width="0.1324%" height="15" fill="rgb(222,18,33)"/><text x="49.1777%" y="79.50"></text></g><g><title>unmap_page_range (5 samples, 0.13%)</title><rect x="48.9277%" y="53" width="0.1324%" height="15" fill="rgb(213,199,7)"/><text x="49.1777%" y="63.50"></text></g><g><title>zap_pte_range.isra.0 (5 samples, 0.13%)</title><rect x="48.9277%" y="37" width="0.1324%" height="15" fill="rgb(250,110,10)"/><text x="49.1777%" y="47.50"></text></g><g><title>alloc_pages_vma (4 samples, 0.11%)</title><rect x="49.3778%" y="85" width="0.1059%" height="15" fill="rgb(248,123,6)"/><text x="49.6278%" y="95.50"></text></g><g><title>__alloc_pages_nodemask (4 samples, 0.11%)</title><rect x="49.3778%" y="69" width="0.1059%" height="15" fill="rgb(206,91,31)"/><text x="49.6278%" y="79.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.11%)</title><rect x="49.3778%" y="53" width="0.1059%" height="15" fill="rgb(211,154,13)"/><text x="49.6278%" y="63.50"></text></g><g><title>lru_cache_add_active_or_unevictable (4 samples, 0.11%)</title><rect x="49.4837%" y="85" width="0.1059%" height="15" fill="rgb(225,148,7)"/><text x="49.7337%" y="95.50"></text></g><g><title>page_fault (16 samples, 0.42%)</title><rect x="49.2719%" y="197" width="0.4236%" height="15" fill="rgb(220,160,43)"/><text x="49.5219%" y="207.50"></text></g><g><title>do_page_fault (16 samples, 0.42%)</title><rect x="49.2719%" y="181" width="0.4236%" height="15" fill="rgb(213,52,39)"/><text x="49.5219%" y="191.50"></text></g><g><title>__do_page_fault (16 samples, 0.42%)</title><rect x="49.2719%" y="165" width="0.4236%" height="15" fill="rgb(243,137,7)"/><text x="49.5219%" y="175.50"></text></g><g><title>do_user_addr_fault (16 samples, 0.42%)</title><rect x="49.2719%" y="149" width="0.4236%" height="15" fill="rgb(230,79,13)"/><text x="49.5219%" y="159.50"></text></g><g><title>handle_mm_fault (15 samples, 0.40%)</title><rect x="49.2984%" y="133" width="0.3971%" height="15" fill="rgb(247,105,23)"/><text x="49.5484%" y="143.50"></text></g><g><title>__handle_mm_fault (15 samples, 0.40%)</title><rect x="49.2984%" y="117" width="0.3971%" height="15" fill="rgb(223,179,41)"/><text x="49.5484%" y="127.50"></text></g><g><title>do_anonymous_page (14 samples, 0.37%)</title><rect x="49.3249%" y="101" width="0.3707%" height="15" fill="rgb(218,9,34)"/><text x="49.5749%" y="111.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (11 samples, 0.29%)</title><rect x="49.6955%" y="197" width="0.2912%" height="15" fill="rgb(222,106,8)"/><text x="49.9455%" y="207.50"></text></g><g><title>prepare_exit_to_usermode (11 samples, 0.29%)</title><rect x="49.6955%" y="181" width="0.2912%" height="15" fill="rgb(211,220,0)"/><text x="49.9455%" y="191.50"></text></g><g><title>mass::stats::append (38 samples, 1.01%)</title><rect x="49.0601%" y="389" width="1.0061%" height="15" fill="rgb(229,52,16)"/><text x="49.3101%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (38 samples, 1.01%)</title><rect x="49.0601%" y="373" width="1.0061%" height="15" fill="rgb(212,155,18)"/><text x="49.3101%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (38 samples, 1.01%)</title><rect x="49.0601%" y="357" width="1.0061%" height="15" fill="rgb(242,21,14)"/><text x="49.3101%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (36 samples, 0.95%)</title><rect x="49.1131%" y="341" width="0.9531%" height="15" fill="rgb(222,19,48)"/><text x="49.3631%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36 samples, 0.95%)</title><rect x="49.1131%" y="325" width="0.9531%" height="15" fill="rgb(232,45,27)"/><text x="49.3631%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (36 samples, 0.95%)</title><rect x="49.1131%" y="309" width="0.9531%" height="15" fill="rgb(249,103,42)"/><text x="49.3631%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (36 samples, 0.95%)</title><rect x="49.1131%" y="293" width="0.9531%" height="15" fill="rgb(246,81,33)"/><text x="49.3631%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::check::{{closure}} (36 samples, 0.95%)</title><rect x="49.1131%" y="277" width="0.9531%" height="15" fill="rgb(252,33,42)"/><text x="49.3631%" y="287.50"></text></g><g><title>&lt;core::iter::adapters::Take&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::ok::{{closure}} (36 samples, 0.95%)</title><rect x="49.1131%" y="261" width="0.9531%" height="15" fill="rgb(209,212,41)"/><text x="49.3631%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (36 samples, 0.95%)</title><rect x="49.1131%" y="245" width="0.9531%" height="15" fill="rgb(207,154,6)"/><text x="49.3631%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (36 samples, 0.95%)</title><rect x="49.1131%" y="229" width="0.9531%" height="15" fill="rgb(223,64,47)"/><text x="49.3631%" y="239.50"></text></g><g><title>core::ptr::write (36 samples, 0.95%)</title><rect x="49.1131%" y="213" width="0.9531%" height="15" fill="rgb(211,161,38)"/><text x="49.3631%" y="223.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (4 samples, 0.11%)</title><rect x="54.2494%" y="341" width="0.1059%" height="15" fill="rgb(219,138,40)"/><text x="54.4994%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (4 samples, 0.11%)</title><rect x="54.2494%" y="325" width="0.1059%" height="15" fill="rgb(241,228,46)"/><text x="54.4994%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.11%)</title><rect x="54.3553%" y="325" width="0.1059%" height="15" fill="rgb(223,209,38)"/><text x="54.6053%" y="335.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (10 samples, 0.26%)</title><rect x="54.3553%" y="341" width="0.2648%" height="15" fill="rgb(236,164,45)"/><text x="54.6053%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (6 samples, 0.16%)</title><rect x="54.4612%" y="325" width="0.1589%" height="15" fill="rgb(231,15,5)"/><text x="54.7112%" y="335.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (5 samples, 0.13%)</title><rect x="54.6201%" y="309" width="0.1324%" height="15" fill="rgb(252,35,15)"/><text x="54.8701%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (5 samples, 0.13%)</title><rect x="54.6201%" y="293" width="0.1324%" height="15" fill="rgb(248,181,18)"/><text x="54.8701%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly2 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (6 samples, 0.16%)</title><rect x="54.6201%" y="325" width="0.1589%" height="15" fill="rgb(233,39,42)"/><text x="54.8701%" y="335.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly4 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (10 samples, 0.26%)</title><rect x="54.6201%" y="341" width="0.2648%" height="15" fill="rgb(238,110,33)"/><text x="54.8701%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (4 samples, 0.11%)</title><rect x="54.8848%" y="293" width="0.1059%" height="15" fill="rgb(233,195,10)"/><text x="55.1348%" y="303.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::mul (7 samples, 0.19%)</title><rect x="54.8848%" y="325" width="0.1853%" height="15" fill="rgb(254,105,3)"/><text x="55.1348%" y="335.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (7 samples, 0.19%)</title><rect x="54.8848%" y="309" width="0.1853%" height="15" fill="rgb(221,225,9)"/><text x="55.1348%" y="319.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (4 samples, 0.11%)</title><rect x="55.0702%" y="309" width="0.1059%" height="15" fill="rgb(224,227,45)"/><text x="55.3202%" y="319.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (4 samples, 0.11%)</title><rect x="55.0702%" y="293" width="0.1059%" height="15" fill="rgb(229,198,43)"/><text x="55.3202%" y="303.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly2 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (5 samples, 0.13%)</title><rect x="55.0702%" y="325" width="0.1324%" height="15" fill="rgb(206,209,35)"/><text x="55.3202%" y="335.50"></text></g><g><title>rustfft::algorithm::butterflies::Butterfly2::perform_fft_direct (6 samples, 0.16%)</title><rect x="55.2555%" y="309" width="0.1589%" height="15" fill="rgb(245,195,53)"/><text x="55.5055%" y="319.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly8&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (24 samples, 0.64%)</title><rect x="54.8848%" y="341" width="0.6354%" height="15" fill="rgb(240,92,26)"/><text x="55.1348%" y="351.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly4 as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (12 samples, 0.32%)</title><rect x="55.2025%" y="325" width="0.3177%" height="15" fill="rgb(207,40,23)"/><text x="55.4525%" y="335.50"></text></g><g><title>rustfft::twiddles::rotate_90 (4 samples, 0.11%)</title><rect x="55.4144%" y="309" width="0.1059%" height="15" fill="rgb(223,111,35)"/><text x="55.6644%" y="319.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (5 samples, 0.13%)</title><rect x="55.5203%" y="325" width="0.1324%" height="15" fill="rgb(229,147,28)"/><text x="55.7703%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (5 samples, 0.13%)</title><rect x="55.5203%" y="309" width="0.1324%" height="15" fill="rgb(211,29,28)"/><text x="55.7703%" y="319.50"></text></g><g><title>rustfft::algorithm::butterflies::Butterfly2::perform_fft_direct (9 samples, 0.24%)</title><rect x="55.5203%" y="341" width="0.2383%" height="15" fill="rgb(228,72,33)"/><text x="55.7703%" y="351.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (4 samples, 0.11%)</title><rect x="55.6526%" y="325" width="0.1059%" height="15" fill="rgb(205,214,31)"/><text x="55.9026%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (4 samples, 0.11%)</title><rect x="55.6526%" y="309" width="0.1059%" height="15" fill="rgb(224,111,15)"/><text x="55.9026%" y="319.50"></text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_multi_inplace (82 samples, 2.17%)</title><rect x="53.8787%" y="373" width="2.1710%" height="15" fill="rgb(253,21,26)"/><text x="54.1287%" y="383.50">&lt;..</text></g><g><title>&lt;rustfft::algorithm::butterflies::Butterfly16&lt;T&gt; as rustfft::algorithm::butterflies::FFTButterfly&lt;T&gt;&gt;::process_inplace (80 samples, 2.12%)</title><rect x="53.9317%" y="357" width="2.1181%" height="15" fill="rgb(245,139,43)"/><text x="54.1817%" y="367.50">&lt;..</text></g><g><title>rustfft::twiddles::rotate_90 (11 samples, 0.29%)</title><rect x="55.7585%" y="341" width="0.2912%" height="15" fill="rgb(252,170,7)"/><text x="56.0085%" y="351.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::add (29 samples, 0.77%)</title><rect x="59.2534%" y="357" width="0.7678%" height="15" fill="rgb(231,118,14)"/><text x="59.5034%" y="367.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (29 samples, 0.77%)</title><rect x="59.2534%" y="341" width="0.7678%" height="15" fill="rgb(238,83,0)"/><text x="59.5034%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (29 samples, 0.77%)</title><rect x="59.2534%" y="325" width="0.7678%" height="15" fill="rgb(221,39,39)"/><text x="59.5034%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (52 samples, 1.38%)</title><rect x="60.0212%" y="325" width="1.3768%" height="15" fill="rgb(222,119,46)"/><text x="60.2712%" y="335.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::mul (74 samples, 1.96%)</title><rect x="60.0212%" y="357" width="1.9592%" height="15" fill="rgb(222,165,49)"/><text x="60.2712%" y="367.50">&lt;..</text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Mul&gt;::mul (74 samples, 1.96%)</title><rect x="60.0212%" y="341" width="1.9592%" height="15" fill="rgb(219,113,52)"/><text x="60.2712%" y="351.50">&lt;..</text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (22 samples, 0.58%)</title><rect x="61.3979%" y="325" width="0.5825%" height="15" fill="rgb(214,7,15)"/><text x="61.6479%" y="335.50"></text></g><g><title>&lt;&amp;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&lt;num_complex::Complex&lt;T&gt;&gt;&gt;::sub (39 samples, 1.03%)</title><rect x="61.9804%" y="357" width="1.0326%" height="15" fill="rgb(235,32,4)"/><text x="62.2304%" y="367.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (39 samples, 1.03%)</title><rect x="61.9804%" y="341" width="1.0326%" height="15" fill="rgb(238,90,54)"/><text x="62.2304%" y="351.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (39 samples, 1.03%)</title><rect x="61.9804%" y="325" width="1.0326%" height="15" fill="rgb(213,208,19)"/><text x="62.2304%" y="335.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (5 samples, 0.13%)</title><rect x="63.0130%" y="357" width="0.1324%" height="15" fill="rgb(233,156,4)"/><text x="63.2630%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (12 samples, 0.32%)</title><rect x="63.1454%" y="357" width="0.3177%" height="15" fill="rgb(207,194,5)"/><text x="63.3954%" y="367.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Add&gt;::add (9 samples, 0.24%)</title><rect x="63.4631%" y="357" width="0.2383%" height="15" fill="rgb(206,111,30)"/><text x="63.7131%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (9 samples, 0.24%)</title><rect x="63.4631%" y="341" width="0.2383%" height="15" fill="rgb(243,70,54)"/><text x="63.7131%" y="351.50"></text></g><g><title>&lt;num_complex::Complex&lt;T&gt; as core::ops::arith::Sub&gt;::sub (20 samples, 0.53%)</title><rect x="63.7014%" y="357" width="0.5295%" height="15" fill="rgb(242,28,8)"/><text x="63.9514%" y="367.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (20 samples, 0.53%)</title><rect x="63.7014%" y="341" width="0.5295%" height="15" fill="rgb(219,106,18)"/><text x="63.9514%" y="351.50"></text></g><g><title>rustfft::algorithm::radix4::butterfly_4 (332 samples, 8.79%)</title><rect x="56.0498%" y="373" width="8.7900%" height="15" fill="rgb(244,222,10)"/><text x="56.2998%" y="383.50">rustfft::alg..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (23 samples, 0.61%)</title><rect x="64.2309%" y="357" width="0.6089%" height="15" fill="rgb(236,179,52)"/><text x="64.4809%" y="367.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (22 samples, 0.58%)</title><rect x="64.2573%" y="341" width="0.5825%" height="15" fill="rgb(213,23,39)"/><text x="64.5073%" y="351.50"></text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::perform_fft (669 samples, 17.71%)</title><rect x="50.1191%" y="389" width="17.7125%" height="15" fill="rgb(238,48,10)"/><text x="50.3691%" y="399.50">rustfft::algorithm::radix4::..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (113 samples, 2.99%)</title><rect x="64.8398%" y="373" width="2.9918%" height="15" fill="rgb(251,196,23)"/><text x="65.0898%" y="383.50">rus..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (113 samples, 2.99%)</title><rect x="64.8398%" y="357" width="2.9918%" height="15" fill="rgb(250,152,24)"/><text x="65.0898%" y="367.50">rus..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (113 samples, 2.99%)</title><rect x="64.8398%" y="341" width="2.9918%" height="15" fill="rgb(209,150,17)"/><text x="65.0898%" y="351.50">rus..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (102 samples, 2.70%)</title><rect x="65.1311%" y="325" width="2.7006%" height="15" fill="rgb(234,202,34)"/><text x="65.3811%" y="335.50">ru..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (69 samples, 1.83%)</title><rect x="66.0048%" y="309" width="1.8268%" height="15" fill="rgb(253,148,53)"/><text x="66.2548%" y="319.50">r..</text></g><g><title>rustfft::algorithm::radix4::prepare_radix4 (29 samples, 0.77%)</title><rect x="67.0638%" y="293" width="0.7678%" height="15" fill="rgb(218,129,16)"/><text x="67.3138%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (6 samples, 0.16%)</title><rect x="68.1758%" y="325" width="0.1589%" height="15" fill="rgb(216,85,19)"/><text x="68.4258%" y="335.50"></text></g><g><title>clear_page_erms (11 samples, 0.29%)</title><rect x="69.9497%" y="149" width="0.2912%" height="15" fill="rgb(235,228,7)"/><text x="70.1997%" y="159.50"></text></g><g><title>alloc_pages_vma (26 samples, 0.69%)</title><rect x="69.7379%" y="197" width="0.6884%" height="15" fill="rgb(245,175,0)"/><text x="69.9879%" y="207.50"></text></g><g><title>__alloc_pages_nodemask (25 samples, 0.66%)</title><rect x="69.7644%" y="181" width="0.6619%" height="15" fill="rgb(208,168,36)"/><text x="70.0144%" y="191.50"></text></g><g><title>get_page_from_freelist (23 samples, 0.61%)</title><rect x="69.8173%" y="165" width="0.6089%" height="15" fill="rgb(246,171,24)"/><text x="70.0673%" y="175.50"></text></g><g><title>rmqueue (5 samples, 0.13%)</title><rect x="70.2939%" y="149" width="0.1324%" height="15" fill="rgb(215,142,24)"/><text x="70.5439%" y="159.50"></text></g><g><title>__mod_lruvec_state (5 samples, 0.13%)</title><rect x="70.6116%" y="133" width="0.1324%" height="15" fill="rgb(250,187,7)"/><text x="70.8616%" y="143.50"></text></g><g><title>__pagevec_lru_add_fn (12 samples, 0.32%)</title><rect x="70.4792%" y="149" width="0.3177%" height="15" fill="rgb(228,66,33)"/><text x="70.7292%" y="159.50"></text></g><g><title>lru_cache_add_active_or_unevictable (17 samples, 0.45%)</title><rect x="70.4263%" y="197" width="0.4501%" height="15" fill="rgb(234,215,21)"/><text x="70.6763%" y="207.50"></text></g><g><title>__lru_cache_add (15 samples, 0.40%)</title><rect x="70.4792%" y="181" width="0.3971%" height="15" fill="rgb(222,191,20)"/><text x="70.7292%" y="191.50"></text></g><g><title>pagevec_lru_move_fn (15 samples, 0.40%)</title><rect x="70.4792%" y="165" width="0.3971%" height="15" fill="rgb(245,79,54)"/><text x="70.7292%" y="175.50"></text></g><g><title>mem_cgroup_try_charge_delay (8 samples, 0.21%)</title><rect x="70.9558%" y="197" width="0.2118%" height="15" fill="rgb(240,10,37)"/><text x="71.2058%" y="207.50"></text></g><g><title>mem_cgroup_try_charge (7 samples, 0.19%)</title><rect x="70.9823%" y="181" width="0.1853%" height="15" fill="rgb(214,192,32)"/><text x="71.2323%" y="191.50"></text></g><g><title>try_charge (5 samples, 0.13%)</title><rect x="71.0352%" y="165" width="0.1324%" height="15" fill="rgb(209,36,54)"/><text x="71.2852%" y="175.50"></text></g><g><title>handle_mm_fault (65 samples, 1.72%)</title><rect x="69.4731%" y="245" width="1.7209%" height="15" fill="rgb(220,10,11)"/><text x="69.7231%" y="255.50"></text></g><g><title>__handle_mm_fault (62 samples, 1.64%)</title><rect x="69.5526%" y="229" width="1.6415%" height="15" fill="rgb(221,106,17)"/><text x="69.8026%" y="239.50"></text></g><g><title>do_anonymous_page (56 samples, 1.48%)</title><rect x="69.7114%" y="213" width="1.4827%" height="15" fill="rgb(251,142,44)"/><text x="69.9614%" y="223.50"></text></g><g><title>do_user_addr_fault (67 samples, 1.77%)</title><rect x="69.4467%" y="261" width="1.7739%" height="15" fill="rgb(238,13,15)"/><text x="69.6967%" y="271.50">d..</text></g><g><title>page_fault (69 samples, 1.83%)</title><rect x="69.4202%" y="309" width="1.8268%" height="15" fill="rgb(208,107,27)"/><text x="69.6702%" y="319.50">p..</text></g><g><title>do_page_fault (69 samples, 1.83%)</title><rect x="69.4202%" y="293" width="1.8268%" height="15" fill="rgb(205,136,37)"/><text x="69.6702%" y="303.50">d..</text></g><g><title>__do_page_fault (68 samples, 1.80%)</title><rect x="69.4467%" y="277" width="1.8004%" height="15" fill="rgb(250,205,27)"/><text x="69.6967%" y="287.50">_..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (30 samples, 0.79%)</title><rect x="71.2470%" y="309" width="0.7943%" height="15" fill="rgb(210,80,43)"/><text x="71.4970%" y="319.50"></text></g><g><title>prepare_exit_to_usermode (30 samples, 0.79%)</title><rect x="71.2470%" y="293" width="0.7943%" height="15" fill="rgb(247,160,36)"/><text x="71.4970%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (161 samples, 4.26%)</title><rect x="67.9640%" y="341" width="4.2626%" height="15" fill="rgb(234,13,49)"/><text x="68.2140%" y="351.50">alloc..</text></g><g><title>core::ptr::write (147 samples, 3.89%)</title><rect x="68.3347%" y="325" width="3.8920%" height="15" fill="rgb(234,122,0)"/><text x="68.5847%" y="335.50">core..</text></g><g><title>sync_regs (7 samples, 0.19%)</title><rect x="72.0413%" y="309" width="0.1853%" height="15" fill="rgb(207,146,38)"/><text x="72.2913%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.13%)</title><rect x="72.2796%" y="117" width="0.1324%" height="15" fill="rgb(207,177,25)"/><text x="72.5296%" y="127.50"></text></g><g><title>do_syscall_64 (5 samples, 0.13%)</title><rect x="72.2796%" y="101" width="0.1324%" height="15" fill="rgb(211,178,42)"/><text x="72.5296%" y="111.50"></text></g><g><title>__x64_sys_mmap (4 samples, 0.11%)</title><rect x="72.3061%" y="85" width="0.1059%" height="15" fill="rgb(230,69,54)"/><text x="72.5561%" y="95.50"></text></g><g><title>ksys_mmap_pgoff (4 samples, 0.11%)</title><rect x="72.3061%" y="69" width="0.1059%" height="15" fill="rgb(214,135,41)"/><text x="72.5561%" y="79.50"></text></g><g><title>vm_mmap_pgoff (4 samples, 0.11%)</title><rect x="72.3061%" y="53" width="0.1059%" height="15" fill="rgb(237,67,25)"/><text x="72.5561%" y="63.50"></text></g><g><title>__GI___mmap64 (7 samples, 0.19%)</title><rect x="72.2531%" y="149" width="0.1853%" height="15" fill="rgb(222,189,50)"/><text x="72.5031%" y="159.50"></text></g><g><title>__GI___mmap64 (6 samples, 0.16%)</title><rect x="72.2796%" y="133" width="0.1589%" height="15" fill="rgb(245,148,34)"/><text x="72.5296%" y="143.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (9 samples, 0.24%)</title><rect x="72.2266%" y="341" width="0.2383%" height="15" fill="rgb(222,29,6)"/><text x="72.4766%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (9 samples, 0.24%)</title><rect x="72.2266%" y="325" width="0.2383%" height="15" fill="rgb(221,189,43)"/><text x="72.4766%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.24%)</title><rect x="72.2266%" y="309" width="0.2383%" height="15" fill="rgb(207,36,27)"/><text x="72.4766%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.24%)</title><rect x="72.2266%" y="293" width="0.2383%" height="15" fill="rgb(217,90,24)"/><text x="72.4766%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (9 samples, 0.24%)</title><rect x="72.2266%" y="277" width="0.2383%" height="15" fill="rgb(224,66,35)"/><text x="72.4766%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (9 samples, 0.24%)</title><rect x="72.2266%" y="261" width="0.2383%" height="15" fill="rgb(221,13,50)"/><text x="72.4766%" y="271.50"></text></g><g><title>alloc::alloc::alloc (9 samples, 0.24%)</title><rect x="72.2266%" y="245" width="0.2383%" height="15" fill="rgb(236,68,49)"/><text x="72.4766%" y="255.50"></text></g><g><title>__rdl_alloc (9 samples, 0.24%)</title><rect x="72.2266%" y="229" width="0.2383%" height="15" fill="rgb(229,146,28)"/><text x="72.4766%" y="239.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.24%)</title><rect x="72.2266%" y="213" width="0.2383%" height="15" fill="rgb(225,31,38)"/><text x="72.4766%" y="223.50"></text></g><g><title>__GI___libc_malloc (9 samples, 0.24%)</title><rect x="72.2266%" y="197" width="0.2383%" height="15" fill="rgb(250,208,3)"/><text x="72.4766%" y="207.50"></text></g><g><title>_int_malloc (9 samples, 0.24%)</title><rect x="72.2266%" y="181" width="0.2383%" height="15" fill="rgb(246,54,23)"/><text x="72.4766%" y="191.50"></text></g><g><title>sysmalloc (9 samples, 0.24%)</title><rect x="72.2266%" y="165" width="0.2383%" height="15" fill="rgb(243,76,11)"/><text x="72.4766%" y="175.50"></text></g><g><title>do_cos (203 samples, 5.37%)</title><rect x="76.0392%" y="261" width="5.3746%" height="15" fill="rgb(245,21,50)"/><text x="76.2892%" y="271.50">do_cos</text></g><g><title>do_sin (297 samples, 7.86%)</title><rect x="81.4138%" y="261" width="7.8634%" height="15" fill="rgb(228,9,43)"/><text x="81.6638%" y="271.50">do_sin</text></g><g><title>libc_feholdsetround_sse_ctx (26 samples, 0.69%)</title><rect x="89.2772%" y="261" width="0.6884%" height="15" fill="rgb(208,100,47)"/><text x="89.5272%" y="271.50"></text></g><g><title>libc_feresetround_sse_ctx (18 samples, 0.48%)</title><rect x="89.9656%" y="261" width="0.4766%" height="15" fill="rgb(232,26,8)"/><text x="90.2156%" y="271.50"></text></g><g><title>reduce_sincos (55 samples, 1.46%)</title><rect x="90.4421%" y="261" width="1.4562%" height="15" fill="rgb(216,166,38)"/><text x="90.6921%" y="271.50"></text></g><g><title>mass::math::fft_mult (1,959 samples, 51.87%)</title><rect x="40.0582%" y="405" width="51.8666%" height="15" fill="rgb(251,202,51)"/><text x="40.3082%" y="415.50">mass::math::fft_mult</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft (910 samples, 24.09%)</title><rect x="67.8316%" y="389" width="24.0932%" height="15" fill="rgb(254,216,34)"/><text x="68.0816%" y="399.50">rustfft::plan::FFTplanner&lt;T&gt;::plan_fft</text></g><g><title>rustfft::plan::FFTplanner&lt;T&gt;::plan_fft_with_factors (910 samples, 24.09%)</title><rect x="67.8316%" y="373" width="24.0932%" height="15" fill="rgb(251,32,27)"/><text x="68.0816%" y="383.50">rustfft::plan::FFTplanner&lt;T&gt;::plan_fft..</text></g><g><title>rustfft::algorithm::radix4::Radix4&lt;T&gt;::new (909 samples, 24.07%)</title><rect x="67.8581%" y="357" width="24.0667%" height="15" fill="rgb(208,127,28)"/><text x="68.1081%" y="367.50">rustfft::algorithm::radix4::Radix4&lt;T&gt;:..</text></g><g><title>rustfft::twiddles::single_twiddle (733 samples, 19.41%)</title><rect x="72.5179%" y="341" width="19.4069%" height="15" fill="rgb(224,137,22)"/><text x="72.7679%" y="351.50">rustfft::twiddles::single_twid..</text></g><g><title>num_complex::Complex&lt;T&gt;::from_polar (711 samples, 18.82%)</title><rect x="73.1003%" y="325" width="18.8245%" height="15" fill="rgb(254,70,32)"/><text x="73.3503%" y="335.50">num_complex::Complex&lt;T&gt;::from..</text></g><g><title>&lt;f64 as num_traits::float::Float&gt;::cos (711 samples, 18.82%)</title><rect x="73.1003%" y="309" width="18.8245%" height="15" fill="rgb(229,75,37)"/><text x="73.3503%" y="319.50">&lt;f64 as num_traits::float::Fl..</text></g><g><title>std::f64::&lt;impl f64&gt;::cos (711 samples, 18.82%)</title><rect x="73.1003%" y="293" width="18.8245%" height="15" fill="rgb(252,64,23)"/><text x="73.3503%" y="303.50">std::f64::&lt;impl f64&gt;::cos</text></g><g><title>__sincos (702 samples, 18.59%)</title><rect x="73.3386%" y="277" width="18.5862%" height="15" fill="rgb(232,162,48)"/><text x="73.5886%" y="287.50">__sincos</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.50%)</title><rect x="91.9248%" y="245" width="0.5030%" height="15" fill="rgb(246,160,12)"/><text x="92.1748%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (19 samples, 0.50%)</title><rect x="91.9248%" y="229" width="0.5030%" height="15" fill="rgb(247,166,0)"/><text x="92.1748%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.50%)</title><rect x="91.9248%" y="213" width="0.5030%" height="15" fill="rgb(249,219,21)"/><text x="92.1748%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (5 samples, 0.13%)</title><rect x="92.4279%" y="229" width="0.1324%" height="15" fill="rgb(205,209,3)"/><text x="92.6779%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (5 samples, 0.13%)</title><rect x="92.4279%" y="213" width="0.1324%" height="15" fill="rgb(243,44,1)"/><text x="92.6779%" y="223.50"></text></g><g><title>core::ptr::write (5 samples, 0.13%)</title><rect x="92.4279%" y="197" width="0.1324%" height="15" fill="rgb(206,159,16)"/><text x="92.6779%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (54 samples, 1.43%)</title><rect x="91.9248%" y="373" width="1.4297%" height="15" fill="rgb(244,77,30)"/><text x="92.1748%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (54 samples, 1.43%)</title><rect x="91.9248%" y="357" width="1.4297%" height="15" fill="rgb(218,69,12)"/><text x="92.1748%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (54 samples, 1.43%)</title><rect x="91.9248%" y="341" width="1.4297%" height="15" fill="rgb(212,87,7)"/><text x="92.1748%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (54 samples, 1.43%)</title><rect x="91.9248%" y="325" width="1.4297%" height="15" fill="rgb(245,114,25)"/><text x="92.1748%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (54 samples, 1.43%)</title><rect x="91.9248%" y="309" width="1.4297%" height="15" fill="rgb(210,61,42)"/><text x="92.1748%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (54 samples, 1.43%)</title><rect x="91.9248%" y="293" width="1.4297%" height="15" fill="rgb(211,52,33)"/><text x="92.1748%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (54 samples, 1.43%)</title><rect x="91.9248%" y="277" width="1.4297%" height="15" fill="rgb(234,58,33)"/><text x="92.1748%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (54 samples, 1.43%)</title><rect x="91.9248%" y="261" width="1.4297%" height="15" fill="rgb(220,115,36)"/><text x="92.1748%" y="271.50"></text></g><g><title>core::iter::adapters::map_fold::{{closure}} (35 samples, 0.93%)</title><rect x="92.4279%" y="245" width="0.9267%" height="15" fill="rgb(243,153,54)"/><text x="92.6779%" y="255.50"></text></g><g><title>mass::stats::rolling_mean::{{closure}} (30 samples, 0.79%)</title><rect x="92.5602%" y="229" width="0.7943%" height="15" fill="rgb(251,47,18)"/><text x="92.8102%" y="239.50"></text></g><g><title>mass::stats::moving_avg (55 samples, 1.46%)</title><rect x="91.9248%" y="405" width="1.4562%" height="15" fill="rgb(242,102,42)"/><text x="92.1748%" y="415.50"></text></g><g><title>mass::stats::rolling_mean (55 samples, 1.46%)</title><rect x="91.9248%" y="389" width="1.4562%" height="15" fill="rgb(234,31,38)"/><text x="92.1748%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (4 samples, 0.11%)</title><rect x="93.3810%" y="293" width="0.1059%" height="15" fill="rgb(221,117,51)"/><text x="93.6310%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.11%)</title><rect x="93.3810%" y="277" width="0.1059%" height="15" fill="rgb(212,20,18)"/><text x="93.6310%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (4 samples, 0.11%)</title><rect x="93.3810%" y="261" width="0.1059%" height="15" fill="rgb(245,133,36)"/><text x="93.6310%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.11%)</title><rect x="93.3810%" y="245" width="0.1059%" height="15" fill="rgb(212,6,19)"/><text x="93.6310%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.11%)</title><rect x="93.3810%" y="229" width="0.1059%" height="15" fill="rgb(218,1,36)"/><text x="93.6310%" y="239.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.11%)</title><rect x="93.3810%" y="213" width="0.1059%" height="15" fill="rgb(246,84,54)"/><text x="93.6310%" y="223.50"></text></g><g><title>_int_malloc (4 samples, 0.11%)</title><rect x="93.3810%" y="197" width="0.1059%" height="15" fill="rgb(242,110,6)"/><text x="93.6310%" y="207.50"></text></g><g><title>sysmalloc (4 samples, 0.11%)</title><rect x="93.3810%" y="181" width="0.1059%" height="15" fill="rgb(214,47,5)"/><text x="93.6310%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.45%)</title><rect x="93.4869%" y="245" width="0.4501%" height="15" fill="rgb(218,159,25)"/><text x="93.7369%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (17 samples, 0.45%)</title><rect x="93.4869%" y="229" width="0.4501%" height="15" fill="rgb(215,211,28)"/><text x="93.7369%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.45%)</title><rect x="93.4869%" y="213" width="0.4501%" height="15" fill="rgb(238,59,32)"/><text x="93.7369%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.19%)</title><rect x="93.7517%" y="197" width="0.1853%" height="15" fill="rgb(226,82,3)"/><text x="94.0017%" y="207.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (7 samples, 0.19%)</title><rect x="93.7517%" y="181" width="0.1853%" height="15" fill="rgb(240,164,32)"/><text x="94.0017%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.19%)</title><rect x="93.7517%" y="165" width="0.1853%" height="15" fill="rgb(232,46,7)"/><text x="94.0017%" y="175.50"></text></g><g><title>get_page_from_freelist (4 samples, 0.11%)</title><rect x="94.2282%" y="37" width="0.1059%" height="15" fill="rgb(229,129,53)"/><text x="94.4782%" y="47.50"></text></g><g><title>__alloc_pages_nodemask (5 samples, 0.13%)</title><rect x="94.2282%" y="53" width="0.1324%" height="15" fill="rgb(234,188,29)"/><text x="94.4782%" y="63.50"></text></g><g><title>alloc_pages_vma (6 samples, 0.16%)</title><rect x="94.2282%" y="69" width="0.1589%" height="15" fill="rgb(246,141,4)"/><text x="94.4782%" y="79.50"></text></g><g><title>page_fault (13 samples, 0.34%)</title><rect x="94.2017%" y="181" width="0.3442%" height="15" fill="rgb(229,23,39)"/><text x="94.4517%" y="191.50"></text></g><g><title>do_page_fault (13 samples, 0.34%)</title><rect x="94.2017%" y="165" width="0.3442%" height="15" fill="rgb(206,12,3)"/><text x="94.4517%" y="175.50"></text></g><g><title>__do_page_fault (13 samples, 0.34%)</title><rect x="94.2017%" y="149" width="0.3442%" height="15" fill="rgb(252,226,20)"/><text x="94.4517%" y="159.50"></text></g><g><title>do_user_addr_fault (13 samples, 0.34%)</title><rect x="94.2017%" y="133" width="0.3442%" height="15" fill="rgb(216,123,35)"/><text x="94.4517%" y="143.50"></text></g><g><title>handle_mm_fault (13 samples, 0.34%)</title><rect x="94.2017%" y="117" width="0.3442%" height="15" fill="rgb(212,68,40)"/><text x="94.4517%" y="127.50"></text></g><g><title>__handle_mm_fault (13 samples, 0.34%)</title><rect x="94.2017%" y="101" width="0.3442%" height="15" fill="rgb(254,125,32)"/><text x="94.4517%" y="111.50"></text></g><g><title>do_anonymous_page (13 samples, 0.34%)</title><rect x="94.2017%" y="85" width="0.3442%" height="15" fill="rgb(253,97,22)"/><text x="94.4517%" y="95.50"></text></g><g><title>mem_cgroup_try_charge_delay (4 samples, 0.11%)</title><rect x="94.4400%" y="69" width="0.1059%" height="15" fill="rgb(241,101,14)"/><text x="94.6900%" y="79.50"></text></g><g><title>swapgs_restore_regs_and_return_to_usermode (5 samples, 0.13%)</title><rect x="94.5459%" y="181" width="0.1324%" height="15" fill="rgb(238,103,29)"/><text x="94.7959%" y="191.50"></text></g><g><title>prepare_exit_to_usermode (4 samples, 0.11%)</title><rect x="94.5724%" y="165" width="0.1059%" height="15" fill="rgb(233,195,47)"/><text x="94.8224%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (29 samples, 0.77%)</title><rect x="93.9370%" y="229" width="0.7678%" height="15" fill="rgb(246,218,30)"/><text x="94.1870%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend::{{closure}} (29 samples, 0.77%)</title><rect x="93.9370%" y="213" width="0.7678%" height="15" fill="rgb(219,145,47)"/><text x="94.1870%" y="223.50"></text></g><g><title>core::ptr::write (29 samples, 0.77%)</title><rect x="93.9370%" y="197" width="0.7678%" height="15" fill="rgb(243,12,26)"/><text x="94.1870%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (100 samples, 2.65%)</title><rect x="93.3810%" y="373" width="2.6476%" height="15" fill="rgb(214,87,16)"/><text x="93.6310%" y="383.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (100 samples, 2.65%)</title><rect x="93.3810%" y="357" width="2.6476%" height="15" fill="rgb(208,99,42)"/><text x="93.6310%" y="367.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (100 samples, 2.65%)</title><rect x="93.3810%" y="341" width="2.6476%" height="15" fill="rgb(253,99,2)"/><text x="93.6310%" y="351.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (100 samples, 2.65%)</title><rect x="93.3810%" y="325" width="2.6476%" height="15" fill="rgb(220,168,23)"/><text x="93.6310%" y="335.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (100 samples, 2.65%)</title><rect x="93.3810%" y="309" width="2.6476%" height="15" fill="rgb(242,38,24)"/><text x="93.6310%" y="319.50">&lt;a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (96 samples, 2.54%)</title><rect x="93.4869%" y="293" width="2.5417%" height="15" fill="rgb(225,182,9)"/><text x="93.7369%" y="303.50">co..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (96 samples, 2.54%)</title><rect x="93.4869%" y="277" width="2.5417%" height="15" fill="rgb(243,178,37)"/><text x="93.7369%" y="287.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (96 samples, 2.54%)</title><rect x="93.4869%" y="261" width="2.5417%" height="15" fill="rgb(232,139,19)"/><text x="93.7369%" y="271.50">co..</text></g><g><title>core::iter::adapters::map_fold::{{closure}} (79 samples, 2.09%)</title><rect x="93.9370%" y="245" width="2.0916%" height="15" fill="rgb(225,201,24)"/><text x="94.1870%" y="255.50">c..</text></g><g><title>mass::stats::rolling_std::{{closure}} (50 samples, 1.32%)</title><rect x="94.7048%" y="229" width="1.3238%" height="15" fill="rgb(221,47,46)"/><text x="94.9548%" y="239.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::sqrt (26 samples, 0.69%)</title><rect x="95.3402%" y="213" width="0.6884%" height="15" fill="rgb(249,23,13)"/><text x="95.5902%" y="223.50"></text></g><g><title>mass::stats::moving_std (102 samples, 2.70%)</title><rect x="93.3810%" y="405" width="2.7006%" height="15" fill="rgb(219,9,5)"/><text x="93.6310%" y="415.50">ma..</text></g><g><title>mass::stats::rolling_std (102 samples, 2.70%)</title><rect x="93.3810%" y="389" width="2.7006%" height="15" fill="rgb(254,171,16)"/><text x="93.6310%" y="399.50">ma..</text></g><g><title>mass::mass (2,131 samples, 56.42%)</title><rect x="39.6876%" y="421" width="56.4204%" height="15" fill="rgb(230,171,20)"/><text x="39.9376%" y="431.50">mass::mass</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::lt (9 samples, 0.24%)</title><rect x="96.4787%" y="405" width="0.2383%" height="15" fill="rgb(210,71,41)"/><text x="96.7287%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,182 samples, 57.77%)</title><rect x="38.9727%" y="533" width="57.7707%" height="15" fill="rgb(206,173,20)"/><text x="39.2227%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (2,182 samples, 57.77%)</title><rect x="38.9727%" y="517" width="57.7707%" height="15" fill="rgb(233,88,34)"/><text x="39.2227%" y="527.50">alloc::vec::Vec&lt;T&gt;::extend_desugared</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,182 samples, 57.77%)</title><rect x="38.9727%" y="501" width="57.7707%" height="15" fill="rgb(223,209,46)"/><text x="39.2227%" y="511.50">&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next</text></g><g><title>core::option::Option&lt;T&gt;::map (2,182 samples, 57.77%)</title><rect x="38.9727%" y="485" width="57.7707%" height="15" fill="rgb(250,43,18)"/><text x="39.2227%" y="495.50">core::option::Option&lt;T&gt;::map</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2,182 samples, 57.77%)</title><rect x="38.9727%" y="469" width="57.7707%" height="15" fill="rgb(208,13,10)"/><text x="39.2227%" y="479.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once</text></g><g><title>mass::mass_batch::{{closure}} (2,182 samples, 57.77%)</title><rect x="38.9727%" y="453" width="57.7707%" height="15" fill="rgb(212,200,36)"/><text x="39.2227%" y="463.50">mass::mass_batch::{{closure}}</text></g><g><title>mass::min_subsequence_distance (2,182 samples, 57.77%)</title><rect x="38.9727%" y="437" width="57.7707%" height="15" fill="rgb(225,90,30)"/><text x="39.2227%" y="447.50">mass::min_subsequence_distance</text></g><g><title>mass::math::argmin (24 samples, 0.64%)</title><rect x="96.1080%" y="421" width="0.6354%" height="15" fill="rgb(236,182,39)"/><text x="96.3580%" y="431.50"></text></g><g><title>__libc_start_main (2,191 samples, 58.01%)</title><rect x="38.8139%" y="693" width="58.0090%" height="15" fill="rgb(212,144,35)"/><text x="39.0639%" y="703.50">__libc_start_main</text></g><g><title>main (2,191 samples, 58.01%)</title><rect x="38.8139%" y="677" width="58.0090%" height="15" fill="rgb(228,63,44)"/><text x="39.0639%" y="687.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,191 samples, 58.01%)</title><rect x="38.8139%" y="661" width="58.0090%" height="15" fill="rgb(228,109,6)"/><text x="39.0639%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,191 samples, 58.01%)</title><rect x="38.8139%" y="645" width="58.0090%" height="15" fill="rgb(238,117,24)"/><text x="39.0639%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>main::main (2,191 samples, 58.01%)</title><rect x="38.8139%" y="629" width="58.0090%" height="15" fill="rgb(242,26,26)"/><text x="39.0639%" y="639.50">main::main</text></g><g><title>mass::mass_batch (2,185 samples, 57.85%)</title><rect x="38.9727%" y="613" width="57.8501%" height="15" fill="rgb(221,92,48)"/><text x="39.2227%" y="623.50">mass::mass_batch</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,185 samples, 57.85%)</title><rect x="38.9727%" y="597" width="57.8501%" height="15" fill="rgb(209,209,32)"/><text x="39.2227%" y="607.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,185 samples, 57.85%)</title><rect x="38.9727%" y="581" width="57.8501%" height="15" fill="rgb(221,70,22)"/><text x="39.2227%" y="591.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,185 samples, 57.85%)</title><rect x="38.9727%" y="565" width="57.8501%" height="15" fill="rgb(248,145,5)"/><text x="39.2227%" y="575.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,185 samples, 57.85%)</title><rect x="38.9727%" y="549" width="57.8501%" height="15" fill="rgb(226,116,26)"/><text x="39.2227%" y="559.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>_start (2,192 samples, 58.04%)</title><rect x="38.8139%" y="709" width="58.0355%" height="15" fill="rgb(244,5,17)"/><text x="39.0639%" y="719.50">_start</text></g><g><title>csv::byte_record::ByteRecord::validate (4 samples, 0.11%)</title><rect x="96.8494%" y="709" width="0.1059%" height="15" fill="rgb(252,159,33)"/><text x="97.0994%" y="719.50"></text></g><g><title>page_fault (103 samples, 2.73%)</title><rect x="97.0347%" y="709" width="2.7270%" height="15" fill="rgb(206,71,0)"/><text x="97.2847%" y="719.50">pa..</text></g><g><title>main (3,771 samples, 99.84%)</title><rect x="0.0000%" y="725" width="99.8411%" height="15" fill="rgb(233,118,54)"/><text x="0.2500%" y="735.50">main</text></g><g><title>all (3,777 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(234,83,48)"/><text x="0.2500%" y="751.50"></text></g><g><title>perf (6 samples, 0.16%)</title><rect x="99.8411%" y="725" width="0.1589%" height="15" fill="rgb(228,3,54)"/><text x="100.0911%" y="735.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.16%)</title><rect x="99.8411%" y="709" width="0.1589%" height="15" fill="rgb(226,155,13)"/><text x="100.0911%" y="719.50"></text></g><g><title>do_syscall_64 (6 samples, 0.16%)</title><rect x="99.8411%" y="693" width="0.1589%" height="15" fill="rgb(241,28,37)"/><text x="100.0911%" y="703.50"></text></g><g><title>__x64_sys_execve (6 samples, 0.16%)</title><rect x="99.8411%" y="677" width="0.1589%" height="15" fill="rgb(233,93,10)"/><text x="100.0911%" y="687.50"></text></g><g><title>__do_execve_file.isra.0 (6 samples, 0.16%)</title><rect x="99.8411%" y="661" width="0.1589%" height="15" fill="rgb(225,113,19)"/><text x="100.0911%" y="671.50"></text></g><g><title>search_binary_handler (6 samples, 0.16%)</title><rect x="99.8411%" y="645" width="0.1589%" height="15" fill="rgb(241,2,18)"/><text x="100.0911%" y="655.50"></text></g><g><title>load_elf_binary (6 samples, 0.16%)</title><rect x="99.8411%" y="629" width="0.1589%" height="15" fill="rgb(228,207,21)"/><text x="100.0911%" y="639.50"></text></g><g><title>setup_new_exec (6 samples, 0.16%)</title><rect x="99.8411%" y="613" width="0.1589%" height="15" fill="rgb(213,211,35)"/><text x="100.0911%" y="623.50"></text></g><g><title>perf_event_exec (6 samples, 0.16%)</title><rect x="99.8411%" y="597" width="0.1589%" height="15" fill="rgb(209,83,10)"/><text x="100.0911%" y="607.50"></text></g><g><title>ctx_resched (6 samples, 0.16%)</title><rect x="99.8411%" y="581" width="0.1589%" height="15" fill="rgb(209,164,1)"/><text x="100.0911%" y="591.50"></text></g><g><title>perf_pmu_enable.part.0 (6 samples, 0.16%)</title><rect x="99.8411%" y="565" width="0.1589%" height="15" fill="rgb(213,184,43)"/><text x="100.0911%" y="575.50"></text></g><g><title>x86_pmu_enable (6 samples, 0.16%)</title><rect x="99.8411%" y="549" width="0.1589%" height="15" fill="rgb(231,61,34)"/><text x="100.0911%" y="559.50"></text></g><g><title>intel_tfa_pmu_enable_all (6 samples, 0.16%)</title><rect x="99.8411%" y="533" width="0.1589%" height="15" fill="rgb(235,75,3)"/><text x="100.0911%" y="543.50"></text></g><g><title>native_write_msr (6 samples, 0.16%)</title><rect x="99.8411%" y="517" width="0.1589%" height="15" fill="rgb(220,106,47)"/><text x="100.0911%" y="527.50"></text></g></svg></svg>